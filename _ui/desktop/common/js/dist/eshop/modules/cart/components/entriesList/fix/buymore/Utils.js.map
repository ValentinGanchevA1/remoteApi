{
    "version": 3,
    "sources": ["../../../../../../../../../es6/eshop/modules/cart/components/entriesList/fix/buymore/Utils.jsx"],
    "names": ["LRow", "props", "id", "className", "onClick", "children", "LCol", "bigColumnWidth", "big", "mediumColumnWidth", "medium", "smallColumnWidth", "small", "IfCollectionNotEmpty", "array", "length", "propTypes", "PropTypes", "string", "transformOneTimePriceInfo", "price", "net", "oneTimePrice", "priceTxt", "netPrice", "gross", "integer", "split", "fraction", "currency", "transformPriceInfo", "prices", "monthlyPrices", "map", "charge", "start", "monthFrom", "end", "monthTo"],
    "mappings": "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",
    "sourcesContent": ["import React, {Component} from \"react\";\nimport {PropTypes} from \"prop-types\";\n\nexport const LRow = (props) => {\n    return (<div id={props.id} className={\"l-row \" + props.className} onClick={props.onClick}>\n            {props.children}\n    </div>)\n}\n\nexport const LCol = (props) => {\n    let bigColumnWidth = props.big ? \" l-col-\"+props.big : \"\";\n    let mediumColumnWidth = props.medium ? \" l-col-medium-\"+props.medium : \"\";\n    let smallColumnWidth = props.small ? \" l-col-small-\"+props.small : \"\";\n    let className = props.className ? props.className : \"\";\n    return(<div className={\"l-col \"+bigColumnWidth+mediumColumnWidth+smallColumnWidth+\" \"+className}\n            onClick={props.onClick}>\n            {props.children}\n    </div>);\n}\n\nexport const IfCollectionNotEmpty = (props) => {\n    if(props.array && props.array.length > 0){\n        return <div>{props.children}</div>\n    } else {\n        return null;\n    }\n};\n\nLCol.propTypes = {\n    big: PropTypes.string,\n    medium: PropTypes.string,\n    small: PropTypes.string,\n    className: PropTypes.string\n}\n\nexport function transformOneTimePriceInfo(price, net){\n    let oneTimePrice;\n    if(price && price.price){\n        let priceTxt;\n        if (net) {\n            if (typeof(price.netPrice) === \"string\") {\n                priceTxt = price.netPrice;\n            } else {\n                priceTxt = price.net;\n            }\n        } else {\n            if (typeof(price.price) === \"string\") {\n                priceTxt = price.price;\n            } else {\n                priceTxt = price.gross;\n            }\n        }\n        oneTimePrice = {\n            integer: priceTxt.split(',')[0],\n            fraction: priceTxt.split(',')[1],\n            currency: price.currency\n        }\n    } else {\n        oneTimePrice = {\n            integer: \"0\",\n            fraction: \"00\",\n            currency: \"zł\"\n        };\n    }\n    return oneTimePrice;\n}\n\nexport function transformPriceInfo(prices, net){\n    let monthlyPrices = prices && prices.map((charge) => {\n        let priceTxt;\n        if (net) {\n            if (typeof(charge.netPrice) === \"string\") {\n                priceTxt = charge.netPrice;\n            } else {\n                priceTxt = charge.net;\n            }\n        } else {\n            if (typeof(charge.price) === \"string\") {\n                priceTxt = charge.price;\n            } else {\n                priceTxt = charge.gross;\n            }\n        }\n        return ({\n            integer: priceTxt.split(',')[0],\n            fraction: priceTxt.split(',')[1],\n            currency: charge.currency,\n            start: charge.monthFrom,\n            end: charge.monthTo\n        });\n    });\n    if(!monthlyPrices || monthlyPrices.length === 0){\n        monthlyPrices = [{\n            integer: \"0\",\n            fraction: \"00\",\n            currency: \"zł\",\n            start: null,\n            end: null\n        }]\n    }\n    return monthlyPrices;\n}"],
    "file": "Utils.js"
}