{
    "version": 3,
    "sources": ["../../../../../es6/eshop/modules/cbs/selectors.js"],
    "names": ["getCbsState", "state", "getAllCitySuggestions", "cbs", "cities", "getAllStreetSuggestions", "streets", "getCountries", "countries", "filterStreetsByCbsKey", "address", "result", "postalCode", "city", "town", "length", "townId", "filterStreetSuggestions", "suggestions", "filter", "suggestion", "toLowerCase", "indexOf", "streetName", "filterCitySuggestions", "createCitySuggestionsSelector", "addressSelector", "createStreetSuggestionsSelector", "createFilteredCitySuggestionsSelector", "createFilteredStreetSuggestionsSelector", "createAddressValidationSelector", "streetId", "zipValid", "validCities", "validStreets", "hasValidCities", "postalCodeValidation", "cityValidation", "toUpperCase", "townValidation", "mainFieldNotValid", "streetValidation"],
    "mappings": "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",
    "sourcesContent": ["import {createSelector} from \"Reselect\";\nimport {cbsKey, isValidPostalCode} from \"./utils\";\n\nexport const getCbsState = state => state[\"cbs\"];\n\nexport const getAllCitySuggestions = createSelector(getCbsState, cbs => cbs.cities);\nexport const getAllStreetSuggestions = createSelector(getCbsState, cbs => cbs.streets);\nexport const getCountries = createSelector(getCbsState, cbs => cbs.countries);\n\nconst filterStreetsByCbsKey = (streets, address) => {\n    let result = streets[cbsKey(address.postalCode, address.city || address.town)] || [];\n    if (result.length === 0) {\n        const townId = address.townId && ('' + address.townId);\n        result = streets[cbsKey('id', townId)] || [];\n    }\n    return result;\n};\n\nexport const filterStreetSuggestions = (suggestions, address) =>\n    suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(address.streetName ? address.streetName.toLowerCase() : \"\") >= 0);\n\nexport const filterCitySuggestions = (suggestions, address) =>\n    suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(address.town ? address.town.toLowerCase() : \"\") >= 0);\n\nexport const createCitySuggestionsSelector = (addressSelector) =>\n    createSelector(\n            [getAllCitySuggestions, addressSelector],\n            (cities, address) => cities[cbsKey(address.postalCode)] || []\n        );\n\nexport const createStreetSuggestionsSelector = (addressSelector) =>\n    createSelector(\n        [getAllStreetSuggestions, addressSelector],\n        (streets, address) => filterStreetsByCbsKey(streets, address)\n    );\n\nexport const createFilteredCitySuggestionsSelector = (addressSelector) =>\n    createSelector([createCitySuggestionsSelector(addressSelector), addressSelector], filterCitySuggestions);\n\nexport const createFilteredStreetSuggestionsSelector = (addressSelector) =>\n    createSelector([createStreetSuggestionsSelector(addressSelector), addressSelector], filterStreetSuggestions);\n\nexport const createAddressValidationSelector = (addressSelector) =>\n    createSelector(\n        [getAllCitySuggestions, getAllStreetSuggestions, addressSelector],\n        (cities, streets, {postalCode, city, town, streetName, townId, streetId, zipValid}) => {\n            const validCities = cities[cbsKey(postalCode)];\n            const validStreets = filterStreetsByCbsKey(streets, {postalCode, city, town, townId});\n\n            const hasValidCities = !!validCities && validCities.length > 0;\n            const postalCodeValidation = isValidPostalCode(postalCode) && (hasValidCities || zipValid);\n            const cityValidation = !!city && !!validCities && validCities.indexOf(city.toUpperCase()) > -1;\n            const townValidation = (!!town && !!validCities && validCities.indexOf(town.toUpperCase()) > -1) || !!townId;\n            const mainFieldNotValid = !postalCodeValidation || !(cityValidation ^ townValidation);\n            const streetValidation = mainFieldNotValid || (!!validStreets && (validStreets.length === 0 || validStreets.indexOf(streetName.toUpperCase()) > -1)) || (!!streetId && !!townId);\n\n            return {\n                postalCode: postalCodeValidation,\n                city: cityValidation,\n                town: townValidation,\n                streetName: postalCodeValidation && (cityValidation || townValidation) && streetValidation\n            };\n        }\n    );\n"],
    "file": "selectors.js"
}