{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/cbs/actions/cbs.js"],
    "names": ["fetchCbsCitiesStart", "postalCode", "type", "ACTIONS", "FETCH_CBS_CITIES_START", "fetchCbsCitiesDone", "cities", "FETCH_CBS_CITIES_DONE", "fetchCbsCitiesError", "error", "FETCH_CBS_CITIES_ERROR", "clearCbsCities", "CLEAR_CBS_CITIES", "fetchCbsStreetsStart", "city", "FETCH_CBS_STREETS_START", "removeStreet", "streets", "REMOVE_STREET", "fetchCbsStreetsDone", "FETCH_CBS_STREETS_DONE", "fetchCbsStreetsError", "FETCH_CBS_STREETS_ERROR", "clearCbsStreets", "CLEAR_CBS_STREETS", "setCountries", "countries", "SET_COUNTRIES", "getCbsCitiesAndStreets", "cityId", "mainAddress", "toDispatchAfterDone", "toDispatchAfterDoneParams", "dispatch", "getState", "allCitySuggestions", "RemoteApi", "getCbsCitiesForPostCode", "then", "getCbsStreets", "catch", "citySuggestions", "emptyCitySuggestions", "length", "streetSuggestionsForPostalCode", "streetsFetchedForPostalCode", "getCbsStreetsForPostCodeAndCity", "getCbsStreetsForCityId", "response", "streetsForId", "map", "s", "streetName", "name", "toUpperCase", "streetId", "id", "getCbsData", "address", "town", "townId", "getCbsDataThenDispatch"],
    "mappings": "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",
    "sourcesContent": ["import * as ACTIONS from \"../actionTypes\";\nimport {getAllCitySuggestions, getAllStreetSuggestions} from \"../selectors\";\nimport RemoteApi from \"../remoteApi\";\nimport {cbsKey, isValidPostalCode} from \"../utils\";\n\nexport const fetchCbsCitiesStart = (postalCode) => ({type: ACTIONS.FETCH_CBS_CITIES_START, postalCode});\nexport const fetchCbsCitiesDone = (postalCode, cities) => ({type: ACTIONS.FETCH_CBS_CITIES_DONE, postalCode, cities});\nexport const fetchCbsCitiesError = (postalCode, error) => ({type: ACTIONS.FETCH_CBS_CITIES_ERROR, postalCode, error});\nexport const clearCbsCities = (postalCode) => ({type: ACTIONS.CLEAR_CBS_CITIES, postalCode});\n\nexport const fetchCbsStreetsStart = (postalCode, city) => ({type: ACTIONS.FETCH_CBS_STREETS_START, postalCode, city});\nexport const removeStreet = (streets) => ({type: ACTIONS.REMOVE_STREET, streets});\nexport const fetchCbsStreetsDone = (postalCode, city, streets) => ({type: ACTIONS.FETCH_CBS_STREETS_DONE, postalCode, city, streets});\nexport const fetchCbsStreetsError = (postalCode, city, error) => ({type: ACTIONS.FETCH_CBS_STREETS_ERROR, postalCode, city, error});\nexport const clearCbsStreets = (postalCode) => ({type: ACTIONS.CLEAR_CBS_STREETS, postalCode});\n\nexport const setCountries = countries => ({type: ACTIONS.SET_COUNTRIES, countries});\n\nexport function getCbsCitiesAndStreets(postalCode, city = \"\", cityId, mainAddress,toDispatchAfterDone=null,toDispatchAfterDoneParams=null) {\n    return (dispatch, getState) => {\n        const allCitySuggestions = getAllCitySuggestions(getState())[cbsKey(postalCode)];\n        if (isValidPostalCode(postalCode) && !allCitySuggestions) {\n            dispatch(fetchCbsCitiesStart(postalCode));\n            RemoteApi.getCbsCitiesForPostCode(postalCode)\n                .then((cities) => dispatch(fetchCbsCitiesDone(postalCode, cities)))\n                .then(() => {\n                    if (city) {\n                        dispatch(getCbsStreets(postalCode, city, cityId, mainAddress,toDispatchAfterDone,toDispatchAfterDoneParams));\n                    }\n                })\n                .catch((error) => {\n                    dispatch(fetchCbsCitiesError(postalCode, error));\n                    if(toDispatchAfterDone!=null) {\n                        dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                    }\n                });\n        } else if (isValidPostalCode(postalCode) && city) {\n            dispatch(getCbsStreets(postalCode, city, cityId, mainAddress,toDispatchAfterDone,toDispatchAfterDoneParams));\n        }\n    };\n}\n\nexport function getCbsStreets(postalCode, city = \"\", cityId, mainAddress,toDispatchAfterDone=null,toDispatchAfterDoneParams=null) {\n    return (dispatch, getState) => {\n        const citySuggestions = getAllCitySuggestions(getState())[cbsKey(postalCode)];\n        const emptyCitySuggestions = citySuggestions && citySuggestions.length === 0;\n        const streetSuggestionsForPostalCode = getAllStreetSuggestions(getState())[cbsKey(postalCode, city)];\n        const streetsFetchedForPostalCode = streetSuggestionsForPostalCode && streetSuggestionsForPostalCode.length;\n        if (isValidPostalCode(postalCode) && !streetsFetchedForPostalCode && !emptyCitySuggestions) {\n            dispatch(fetchCbsStreetsStart(postalCode, city));\n            RemoteApi.getCbsStreetsForPostCodeAndCity(postalCode, city)\n                .then((streets) => {\n                    dispatch(fetchCbsStreetsDone(postalCode, city, streets));\n                    if(toDispatchAfterDone!=null) {\n                        dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                    }\n                    return streets;\n                })\n                .then((streets) => {\n                    if (streets.length === 0 && !!cityId) {\n                        dispatch(fetchCbsStreetsStart('id', cityId));\n                        return RemoteApi.getCbsStreetsForCityId(cityId)\n                            .then((response) => {\n                                const streetsForId = response && response.map(s => ({\n                                    streetName: s.name && s.name.toUpperCase(),\n                                    streetId: s.id\n                                })) || [];\n                                dispatch(fetchCbsStreetsDone('id', cityId, streetsForId));\n                                if (mainAddress && streetsForId.length === 0) {\n                                    dispatch(removeStreet(streets));\n                                }\n                                if(toDispatchAfterDone!=null) {\n                                    dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                                }\n\n                                return streetsForId;\n                            })\n                            .catch((error) => {\n                                dispatch(fetchCbsStreetsError('id', cityId, error));\n                                if(toDispatchAfterDone!=null) {\n                                    dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                                }\n\n                            });\n                    }\n                })\n                .catch((error) => dispatch(fetchCbsStreetsError(postalCode, city, error)));\n        } else if (isValidPostalCode(postalCode) && !!cityId && !streetsFetchedForPostalCode && !getAllStreetSuggestions(getState())[cbsKey('id', cityId)]){\n            dispatch(fetchCbsStreetsStart('id', cityId));\n            return RemoteApi.getCbsStreetsForCityId(cityId)\n                .then((response) => {\n                    const streetsForId = response && response.map(s => ({\n                        streetName: s.name && s.name.toUpperCase(),\n                        streetId: s.id\n                    })) || [];\n                    dispatch(fetchCbsStreetsDone('id', cityId, streetsForId));\n                    if(toDispatchAfterDone!=null) {\n                        dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                    }\n\n                    if (mainAddress && streetsForId.length === 0) {\n                        dispatch(removeStreet(streets));\n                    }\n                    return streetsForId;\n                })\n                .catch((error) =>{\n                    dispatch(fetchCbsStreetsError('id', cityId, error))\n                    if(toDispatchAfterDone!=null) {\n                        dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n                    }\n\n                });\n        }\n    };\n}\n\nexport function getCbsData(address, mainAddress = false) {\n    return (dispatch) => {\n        var postalCode = address.postalCode;\n        var city = address.city || address.town;\n        if (postalCode)\n            dispatch(getCbsCitiesAndStreets(postalCode, city, address.townId && ('' + address.townId), mainAddress));\n    };\n}\n\n\nexport function getCbsDataThenDispatch(address, mainAddress,toDispatchAfterDone,toDispatchAfterDoneParams) {\n    return (dispatch) => {\n        var postalCode = address.postalCode;\n        var city = address.city || address.town;\n        if (postalCode)\n            dispatch(getCbsCitiesAndStreets(postalCode, city, address.townId && ('' + address.townId), mainAddress,toDispatchAfterDone,toDispatchAfterDoneParams));\n        else if(toDispatchAfterDone!=null) {\n            dispatch(toDispatchAfterDone(toDispatchAfterDoneParams));\n        }\n    };\n}"],
    "file": "cbs.js"
}