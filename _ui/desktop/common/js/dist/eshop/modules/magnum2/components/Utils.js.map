{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/magnum2/components/Utils.jsx"],
    "names": ["getIntegerAndFractionPart", "number", "createResult", "integer", "fraction", "numberString", "toString", "RegExp", "test", "splitRegExp", "integerAndFraction", "split", "console", "log", "isPriceZero", "price", "parseInt", "gross", "areMonthlyPricesZero", "monthlyPrices", "length", "extractMainTvPackages", "tv", "filter", "tvItem", "addonType", "code", "partner", "map", "createTvPackage", "extractExtendingTvPackages", "extractExtraTvPackages", "features", "feature", "featureValues", "value", "monthlyPayments", "convertPayments", "oraPaymentsData", "id", "img", "monthlyPayment", "monthFrom", "currency", "description"],
    "mappings": "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",
    "sourcesContent": ["/**\n* Methods takes number in format \"\\\\d.\\\\d\" (example: 1.3) and divides it into integer (1) and fractional (3) parts\n* If given number is not valid, default value is returned { integer: null, fractional: null }\n*/\nfunction getIntegerAndFractionPart(number) {\n    function createResult(integer, fraction) {\n        return {\n            integer: integer,\n            fraction: fraction\n        };\n    }\n\n    const numberString = number.toString();\n    if ((new RegExp(\"\\\\d[.|,]\\\\d\")).test(numberString)) {\n        const splitRegExp = new RegExp(\"[.|,]\");\n        const integerAndFraction = numberString.split(splitRegExp);\n        return createResult(integerAndFraction[0], integerAndFraction[1]);\n    } else if ((new RegExp(\"\\\\d\")).test(numberString)) {\n        return createResult(numberString, \"00\");\n    } else {\n        console.log(\"Number: \" + number + \" is not valid decimal number. Returning default value\");\n        return createResult(null, null);\n    }\n}\n\nexport function integer(number) {\n    return getIntegerAndFractionPart(number).integer;\n}\n\nexport function fraction(number) {\n    return getIntegerAndFractionPart(number).fraction;\n}\n\nexport function isPriceZero(price) {\n    return parseInt(integer(price.gross)) === 0 && parseInt(fraction(price.gross)) === 0;\n}\n\nexport function areMonthlyPricesZero(monthlyPrices) {\n    return monthlyPrices.length === 1 && isPriceZero(monthlyPrices[0]);\n}\n\nexport function extractMainTvPackages(tv){\n    return tv.filter((tvItem) => tvItem.addonType.code === \"TVPCK_MAIN\" && tvItem.partner === \"\")\n            .map((tvItem) => createTvPackage(tvItem));\n}\n\nexport function extractExtendingTvPackages(tv){\n    return tv.filter((tvItem) => tvItem.addonType.code === \"TVPCK_MAIN\" && tvItem.partner === \"OPTV\")\n            .map((tvItem) => createTvPackage(tvItem));\n}\n\nexport function extractExtraTvPackages(tv){\n    return tv.filter((tvItem) => tvItem.addonType.code === \"TVPCK_OPTIONAL\" || (tvItem.addonType.code === \"TVPCK_MAIN\" && tvItem.partner !== \"\" && tvItem.partner !== \"OPTV\"))\n            .map((tvItem) => createTvPackage(tvItem));\n}\n\nfunction createTvPackage(tvItem){\n    const features = tvItem.features ? tvItem.features.map((feature) => feature.featureValues[0].value) : [];\n    const monthlyPayments = convertPayments(tvItem.price.oraPaymentsData.monthlyPayments);\n    return {\n            id: tvItem.code,\n            features: features,\n            monthlyPayments: monthlyPayments,\n            img:tvItem.img\n    }\n}\n\nfunction convertPayments(monthlyPayments){\n    return monthlyPayments.map((monthlyPayment) => {\n        return {\n            \"monthFrom\": monthlyPayment.monthFrom,\n            \"price\": monthlyPayment.price,\n            \"currency\": monthlyPayment.currency,\n            \"description\": monthlyPayment.description\n        }\n    });\n}"],
    "file": "Utils.js"
}