{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/simfree/actions/comparator.js"],
    "names": ["fetchComparatorConfig", "device", "uid", "actionType", "dispatch", "RemoteApi", "getComparatorConfig", "then", "response", "type", "ACTIONS", "FETCH_COMPARATOR_CONFIG", "payload", "deviceListResult", "executeDataLayer", "comparatorDevices", "UPDATE_COMPARATOR_DEVICES", "catch", "error", "console", "log", "ActionType", "VISIT_PAGE", "DataLayerUtils", "pushVisitComparatorPage", "ADD_DEVICE", "pushAddDeviceToCompare", "REMOVE_DEVICE", "pushRemoveDeviceFromList", "fetchProducers", "FETCH_PRODUCERS", "fetchModelsForProducer", "producer", "fetchModelsForProducers", "FETCH_MODELS_FOR_BRAND", "setSelectedProducer", "selectedProducer", "GET_SELECTED_PRODUCER", "setSelectedModel", "selectedModel", "GET_SELECTED_MODEL", "updateComparatorDevicesList", "SET_COMPARATOR_ERROR_CODE", "value", "errorCode", "updateComparatorDevicesListByUid", "deviceUid", "clearDevicesList", "redirectToComparator", "comparatorUrl", "location", "href", "fetchComparatorDevicesList", "storeIsComparatorCategory", "isComparatorCategory", "SET_IS_COMPARATOR_CATEGORY", "clearErrorCode", "clearModelsForBrand", "CLEAR_MODELS_FOR_BRAND"],
    "mappings": "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",
    "sourcesContent": ["import * as ACTIONS from \"../actionTypes\";\nimport ActionType from \"eshop/modules/simfree/fetchComparatorConfigActionType\";\nimport RemoteApi from \"../remoteApi\";\nimport DataLayerUtils from \"eshop/utils/DataLayerUtils\";\nimport {getComparatorDevices} from \"eshop/modules/simfree/selectors\";\nexport function fetchComparatorConfig(device, uid, actionType) {\n    return (dispatch) => {\n        RemoteApi.getComparatorConfig(device, uid)\n            .then((response) => {\n                    dispatch({\n                        type: ACTIONS.FETCH_COMPARATOR_CONFIG,\n                        payload: response\n                    });\n                if (response.deviceListResult != null)  {\n                    executeDataLayer(device, response.deviceListResult.comparatorDevices, actionType);\n                    dispatch({\n                        type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n                        payload: response.deviceListResult.comparatorDevices\n                    })\n                } else {\n                    dispatch({\n                        type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n                        payload: []\n                    })\n                }\n                }\n            ).catch(error => console.log(\"Error fetchComparatorConfig \", error));\n    }\n};\n\nfunction executeDataLayer(device, comparatorDevices, actionType) {\n    if (ActionType.VISIT_PAGE === actionType) {\n        DataLayerUtils.pushVisitComparatorPage(comparatorDevices);\n    } else if(ActionType.ADD_DEVICE === actionType) {\n        DataLayerUtils.pushAddDeviceToCompare(device, comparatorDevices);\n    } else if(ActionType.REMOVE_DEVICE === actionType) {\n        DataLayerUtils.pushRemoveDeviceFromList(comparatorDevices);\n    }\n}\n\nexport function fetchProducers() {\n    return (dispatch) => {\n        RemoteApi.fetchProducers()\n            .then((response) => dispatch({\n                type: ACTIONS.FETCH_PRODUCERS,\n                payload: response\n            }))\n    }\n};\n\nexport function fetchModelsForProducer(producer) {\n    return (dispatch) => {\n        RemoteApi.fetchModelsForProducers(producer)\n            .then((response) => dispatch({\n                type: ACTIONS.FETCH_MODELS_FOR_BRAND,\n                payload: response\n            }))\n    }\n};\n\nexport function setSelectedProducer(selectedProducer) {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.GET_SELECTED_PRODUCER,\n            payload: selectedProducer\n        });\n        if(selectedProducer != \"\") {\n            RemoteApi.fetchModelsForProducers(selectedProducer)\n                .then((response) => dispatch({\n                    type: ACTIONS.FETCH_MODELS_FOR_BRAND,\n                    payload: response\n                }))\n        }\n    }\n};\n\nexport function setSelectedModel(selectedModel) {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.GET_SELECTED_MODEL,\n            payload: selectedModel\n        })\n    }\n};\n\nexport function updateComparatorDevicesList(device) {\n    return (dispatch) => {\n        RemoteApi.updateComparatorDevicesList(device).then((response) => {\n            dispatch({\n                type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n                payload: response.comparatorDevices\n            });\n            dispatch({\n                type: ACTIONS.SET_COMPARATOR_ERROR_CODE,\n                value: response.errorCode\n            });\n        }).catch(error => console.log(\"Error updateComparatorDevicesList \", error));\n    }\n}\n\nexport function updateComparatorDevicesListByUid(deviceUid) {\n    return (dispatch) => {\n        RemoteApi.updateComparatorDevicesListByUid(deviceUid).then(response => {\n            dispatch({\n                type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n                payload: response.comparatorDevices\n            });\n            dispatch({\n                type: ACTIONS.SET_COMPARATOR_ERROR_CODE,\n                value: response.errorCode\n            });\n        }).catch(error => console.log(\"Error updateComparatorDevicesListByUid \", error));\n    }\n}\n\nexport function clearDevicesList() {\n    return (dispatch) => {\n        RemoteApi.clearDevicesList().then(response => {\n            dispatch({\n                type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n                payload: response.comparatorDevices\n            });\n            dispatch({\n                type: ACTIONS.SET_COMPARATOR_ERROR_CODE,\n                value: response.errorCode\n            });\n        }).catch(error => console.log(\"Error clearDevicesList \", error));\n    }\n}\n\nexport function redirectToComparator(comparatorUrl) {\n    location.href = comparatorUrl;\n}\n\nexport function fetchComparatorDevicesList() {\n    return dispatch => {\n        RemoteApi.fetchComparatorDevicesList().then(response => dispatch({\n            type: ACTIONS.UPDATE_COMPARATOR_DEVICES,\n            payload: response,\n        }),\n            error => console.error(\"Error fetchComparatorDevicesList \", error));\n    }\n}\nexport function storeIsComparatorCategory(isComparatorCategory) {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.SET_IS_COMPARATOR_CATEGORY,\n            value: isComparatorCategory\n        })\n    }\n}\nexport function clearErrorCode() {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.SET_COMPARATOR_ERROR_CODE,\n            value: 0\n        })\n    }\n}\nexport function clearModelsForBrand() {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.CLEAR_MODELS_FOR_BRAND\n        })\n    }\n}\n"],
    "file": "comparator.js"
}