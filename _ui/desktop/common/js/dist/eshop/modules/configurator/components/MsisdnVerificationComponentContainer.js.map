{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/configurator/components/MsisdnVerificationComponentContainer.jsx"],
    "names": ["MsisdnVerificationComponentContainerBase", "props", "handleMsisdnChange", "bind", "validate", "reset", "resetNegative", "handleKeyPress", "document", "getElementById", "addEventListener", "removeEventListener", "queryParams", "setState", "msisdn", "changeMsisdnInput", "msisdnVerificationNeeded", "event", "target", "value", "msisdnInput", "valid", "key", "validMsisdnPatternRE", "RegExp", "descriptions", "regexpForNumberValidation", "msisdnWithoutSpace", "replace", "test", "checkMsisdnAndGetOffers", "processType", "TransactionProcessType", "ASSIGNMENT", "ASSIGNMENT_DEATH", "clearCheckMsisdn", "processTypes", "MNP", "RETENTION", "MIGRATION_PRE_POST", "MNP_TWOSTEP", "MIGRATION_ZETAFON_POST", "MIGRATION_NJU_POST_TO_POST", "MIGRATION_NJU_PRE_TO_POST", "ASSIGNMENT_B2C_B2B", "ASSIGNMENT_B2C_JDG", "MNP_APPLICATION", "conditions", "isB2B", "isPropositionListCountSetMode", "propositionListCount", "indexOf", "selectedLoyaltyLengthValue", "result", "selectedMobileTransaction", "process", "_", "isEmpty", "checkMsisdnResult", "isMatchingFilters", "inputFieldDesc", "invalidNumberDesc", "isMsisdnChecking", "isCustomerSelected", "isMsisdnVerificationRequired", "isPositive", "description", "cartToRemove", "removeCartByOmni", "Component", "MsisdnVerificationComponentDescriptionsType", "PropTypes", "string", "negativeVerificationDesc", "positiveVerificationDesc", "unknownOperatorDesc", "propTypes", "shape", "bool", "isRequired", "func", "mapStateToProps", "state", "mapDispatchToProps", "dispatch", "omni", "MsisdnVerificationComponentContainer"],
    "mappings": "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",
    "sourcesContent": ["import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {PropTypes} from \"prop-types\";\nimport _ from \"lodash\";\n\nimport MsisdnVerificationComponent from \"./MsisdnVerificationComponent\";\nimport MsisdnPositiveVerificationComponent from \"./MsisdnPositiveVerificationComponent\";\nimport MsisdnNegativeVerificationComponent from \"./MsisdnNegativeVerificationComponent\";\n\nimport {\n    getSelectedProcessTypeValue,\n    getSelectedLoyaltyLengthValue,\n    getCheckMsisdnResult,\n    getIsMsisdnChecking,\n    getMsisdnInput,\n    getPropositionListCountSetMode,\n    getPropositionListCount,\n} from \"../selectors/filters\";\n\nimport {isMsisdnVerificationRequired,isCustomerSelected} from \"../selectors/metaData\";\nimport {clearCheckMsisdn, checkMsisdnAndGetOffers, msisdnVerificationNeeded, changeMsisdnInput, isMatchingFilters} from \"../actions/filters\";\nimport TransactionProcessType from \"../../core/constants/TransactionProcessTypeEnum\";\nimport { getMarketContext } from \"../selectors/filters\"\nimport {getSelectedMobileTransaction} from \"../../magnum2/selectors\";\nimport {removeCartByOmniCode} from \"eshop/modules/cart/actions/cart\"\nexport class MsisdnVerificationComponentContainerBase extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleMsisdnChange = this.handleMsisdnChange.bind(this);\n        this.validate = this.validate.bind(this);\n        this.reset = this.reset.bind(this);\n        this.resetNegative = this.resetNegative.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n\n    }\n\n\n    componentDidMount() {\n        if (document.getElementById(\"searchButton\")){\n        document.getElementById(\"searchButton\").addEventListener('click',this.reset)\n        }\n    }\n\n    componentWillUnmount() {\n        if (document.getElementById(\"searchButton\")){\n        document.getElementById(\"searchButton\").removeEventListener('click',this.reset)\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.queryParams) {\n            this.setState({msisdn: this.props.queryParams.msisdn});\n            this.props.changeMsisdnInput(this.props.queryParams.msisdn, true);\n        }\n        // add flag to session storage\n        this.props.msisdnVerificationNeeded();\n    }\n\n    handleMsisdnChange(event) {\n        this.setState({msisdn: event.target.value});\n        this.props.changeMsisdnInput(event.target.value, this.props.msisdnInput.valid);\n    }\n\n    handleKeyPress(target) {\n        if(target.key === 'Enter'){\n           this.validate();\n        }\n    }\n\n    validate() {\n        if(this.props.msisdnInput.msisdn == \"undefined\" || !this.props.msisdnInput.msisdn) {\n           this.props.changeMsisdnInput(this.props.msisdnInput.msisdn, false);\n           return;\n        }\n        const validMsisdnPatternRE = new RegExp(this.props.descriptions.regexpForNumberValidation);\n        const msisdnWithoutSpace = this.props.msisdnInput.msisdn.replace(/\\s/g, \"\");\n\n        if(validMsisdnPatternRE.test(msisdnWithoutSpace)) {\n            this.props.changeMsisdnInput(this.props.msisdnInput.msisdn, true);\n           this.props.checkMsisdnAndGetOffers(msisdnWithoutSpace);\n        } else {\n            this.props.changeMsisdnInput(this.props.msisdnInput.msisdn, false);\n        }\n    }\n\n    reset() {\n        if(this.props.processType !== TransactionProcessType.ASSIGNMENT && this.props.processType !== TransactionProcessType.ASSIGNMENT_DEATH) {\n            this.props.changeMsisdnInput(\"\", true);\n            this.props.clearCheckMsisdn();\n        }\n    }\n\n    resetNegative() {\n        this.props.changeMsisdnInput(\"\", true);\n        this.props.clearCheckMsisdn();\n    }\n\n    render() {\n        const processTypes = [\n            TransactionProcessType.MNP,\n            TransactionProcessType.RETENTION,\n            TransactionProcessType.MIGRATION_PRE_POST,\n            TransactionProcessType.MNP_TWOSTEP,\n            TransactionProcessType.MIGRATION_ZETAFON_POST,\n            TransactionProcessType.MIGRATION_NJU_POST_TO_POST,\n            TransactionProcessType.MIGRATION_NJU_PRE_TO_POST,\n            TransactionProcessType.ASSIGNMENT,\n            TransactionProcessType.ASSIGNMENT_DEATH,\n            TransactionProcessType.ASSIGNMENT_B2C_B2B,\n            TransactionProcessType.ASSIGNMENT_B2C_JDG,\n            TransactionProcessType.MNP_APPLICATION\n        ];\n\n        let conditions;\n        if (this.props.isB2B) {\n            conditions = !this.props.isPropositionListCountSetMode  && this.props.propositionListCount>0 && processTypes.indexOf(this.props.processType) !== -1 && (this.props.selectedLoyaltyLengthValue == 0 || !!this.props.selectedLoyaltyLengthValue);\n        } else {\n            conditions = processTypes.indexOf(this.props.processType) !== -1;\n        }\n\n        let result;\n        if (this.props.selectedMobileTransaction && this.props.selectedMobileTransaction.process) {\n            result = _.isEmpty(this.props.checkMsisdnResult);\n        } else {\n            result = !this.props.isMatchingFilters() || _.isEmpty(this.props.checkMsisdnResult);\n        }\n\n        if (conditions){\n            return (\n                <div id=\"msisdn-verification-container-row\" className={\"l-full-row  u-padding-m \" + ( \"g-gray1-bg\" )}>\n                    <div className=\"l-page-row\">\n                        <div className={\" l-col l-col-small-12 l-col-medium-12 l-col-12 \" + (this.props.isB2B ? \"u-padding-l u-padding-top-l g-white1-bg\" : \"u-spacing-top-l\")}>\n                               {result ?\n                                   <MsisdnVerificationComponent\n                                       inputFieldDesc={this.props.descriptions.inputFieldDesc}\n                                       invalidNumberDesc={this.props.descriptions.invalidNumberDesc}\n                                       msisdn={this.props.msisdnInput.msisdn}\n                                       handleMsisdnChange={this.handleMsisdnChange}\n                                       valid={this.props.msisdnInput.valid}\n                                       handleKeyPress={this.handleKeyPress}\n                                       validate={this.validate}\n                                       isMsisdnChecking={this.props.isMsisdnChecking}\n                                       isCustomerSelected={this.props.isCustomerSelected}\n                                       showMsisdnVerificationWarning={this.props.isMsisdnVerificationRequired}\n                                       processType={this.props.processType}\n                                       />\n                                   : \"\"\n                               }\n\n                               {(!result && this.props.checkMsisdnResult.isPositive === true) ?\n                                   <MsisdnPositiveVerificationComponent\n                                       description={this.props.checkMsisdnResult.description}\n                                       reset={this.resetNegative}\n                                       />\n                                   : \"\"\n                               }\n\n                               {(!result && this.props.checkMsisdnResult.isPositive === false) ?\n                                   <MsisdnNegativeVerificationComponent\n                                       description={this.props.checkMsisdnResult.description}\n                                       reset={this.resetNegative}\n                                       msisdn={this.props.msisdnInput.msisdn}\n                                       cartToRemove={this.props.checkMsisdnResult.cartToRemove}\n                                       msisdn={this.props.checkMsisdnResult.msisdn}\n                                       removeCartByOmni={this.props.removeCartByOmni}\n                                       />\n                                   : \"\"\n                               }\n                        </div>\n                    </div>\n                </div>\n            );\n\n        } else {\n            return null;\n        }\n\n    }\n}\n\nexport const MsisdnVerificationComponentDescriptionsType = {\n    regexpForNumberValidation: PropTypes.string,\n    description: PropTypes.string,\n    inputFieldDesc: PropTypes.string,\n    invalidNumberDesc: PropTypes.string,\n    negativeVerificationDesc: PropTypes.string,\n    positiveVerificationDesc: PropTypes.string,\n    unknownOperatorDesc: PropTypes.string,\n    processType: PropTypes.string\n\n};\n\nMsisdnVerificationComponentContainerBase.propTypes = {\n    descriptions: PropTypes.shape(MsisdnVerificationComponentDescriptionsType),\n    checkMsisdnResult: PropTypes.shape({\n        isPositive: PropTypes.bool,\n        description: PropTypes.string\n    }),\n    processType: PropTypes.string,\n    isMsisdnChecking: PropTypes.bool,\n    msisdnInput: PropTypes.shape({\n        msisdn: PropTypes.string,\n        valid: PropTypes.bool\n    }).isRequired,\n    msisdnVerificationNeeded: PropTypes.func,\n    checkMsisdnAndGetOffers: PropTypes.func,\n    clearCheckMsisdn: PropTypes.func,\n    changeMsisdnInput: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n    isPropositionListCountSetMode:getPropositionListCountSetMode(state),\n    propositionListCount:getPropositionListCount(state),\n    processType:  getSelectedProcessTypeValue(state),\n    selectedLoyaltyLengthValue: getSelectedLoyaltyLengthValue(state),\n    checkMsisdnResult: getCheckMsisdnResult(state),\n    isMsisdnChecking: getIsMsisdnChecking(state),\n    msisdnInput: getMsisdnInput(state),\n    isMsisdnVerificationRequired: isMsisdnVerificationRequired(state),\n    isB2B: getMarketContext(state) === 'B2B',\n    isCustomerSelected:isCustomerSelected(state),\n    selectedMobileTransaction: getSelectedMobileTransaction(state)\n});\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    clearCheckMsisdn: () => dispatch(clearCheckMsisdn()),\n    checkMsisdnAndGetOffers: (msisdn) => dispatch(checkMsisdnAndGetOffers(msisdn)),\n    msisdnVerificationNeeded: () => dispatch(msisdnVerificationNeeded),\n    changeMsisdnInput: (msisdn,valid) => dispatch(changeMsisdnInput(msisdn,valid)),\n    isMatchingFilters: () => dispatch(isMatchingFilters()),\n    removeCartByOmni:(omni) => dispatch(removeCartByOmniCode(omni))\n});\n\nclass MsisdnVerificationComponentContainer extends MsisdnVerificationComponentContainerBase {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MsisdnVerificationComponentContainer);"],
    "file": "MsisdnVerificationComponentContainer.js"
}