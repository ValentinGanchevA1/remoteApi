{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/configurator/actions/filters.js"],
    "names": ["setClientContext", "isEnabled", "dispatch", "getState", "type", "ACTIONS", "CLIENT_CONTEXT_ENABLED", "CLIENT_CONTEXT_DISABLED", "handlers", "forEach", "e", "DataLayerUtils", "pushSIMOImpressionEvent", "offers", "subscribeToClientContextChange", "action", "CLIENT_CONTEXT_CHANGE_SUBSCRIPTION", "handler", "setCurrentProposition", "offerArray", "console", "log", "CAROUSEL_READY", "selectedRatePlanId", "newPropositionId", "find", "offer", "rateplanBaseProductId", "id", "setPropositionListSoftBundleGroup", "PROPOSITION_LIST_SOFT_BUNDLE_GROUP", "softBundleGroup", "clearPropositionListOfferType", "PROPOSITION_LIST_OFFER_TYPE", "offerType", "clearPropositionListSoftBundleGroup", "getOffersAction", "availableProductsKey", "FETCH_OFFERS_START", "deviceCode", "selectedFilters", "RemoteApi", "getOffers", "then", "response", "FETCH_OFFERS", "payload", "useDefaultProcess", "useDefaultLoyalty", "useDefaultOffer", "getDocumentsAction", "error", "getProductListOffersAction", "isInitialFetch", "trySetDefaultProposition", "catch", "getProductDetailsOffersWithoutOfferSelectorAction", "getOffersWithoutOfferSelector", "pushProductDetailsView", "warn", "getProductDetailsConvergentOffersAction", "magnumStore", "magnum", "propositionIds", "durationList", "propositions", "map", "proposition", "mobileVoiceBundleTemplateCode", "processType", "selectedProposition", "voice", "includes", "code", "possibleTransactions", "salesChannel", "selectedMobileTransaction", "process", "selectedFixBroadbandTransaction", "getConvergentOffers", "filterOffersContainingDevice", "offersData", "availableOfferIds", "filter", "indexOf", "remote", "fetchPropositionListActions", "success", "ratePlanIds", "getRatePlanIds", "getDocuments", "SELECT_DOCUMENTS", "TransactionProcessType", "SALE_OF_GOODS", "productIds", "SimfreeUtils", "CPO", "fetchOfferFilters", "getOfferFilters", "FETCH_OFFER_FILTERS", "urlParametersUsed", "OnlineUtils", "saveInSessionStorageAndUrlParameterDisabledOnCheckout", "Feedback", "showHideFeedback", "checkMsisdnAndGetOffers", "msisdn", "CHECK_MSISDN", "marketContext", "checkAndGetOffers", "CHECK_MSISDN_RESULT", "market", "isPositive", "setProcessForMsisdn", "CHECK_MSISDN_ERROR", "message", "responseText", "checkMsisdnAndGetOffersB2B", "index", "CHECK_MSISDN_RESULT_B2B_START", "CHECK_MSISDN_RESULT_B2B", "status", "description", "verifiedMsisdn", "manageChackMsisdnAndGetOffersProductList", "checkMsisdnAndGetOffersProductList", "setMaxSimCount", "maxSimCount", "SET_MAX_SIM_COUNT", "clearCheckMsisdn", "CLEAR_CHECK_MSISDN", "clearCheckMsisdnB2B", "CLEAR_CHECK_MSISDN_B2B", "propositionListCountIncrement", "PROPOSITION_LIST_COUNT_INCREMENT", "defaultFilters", "propositionListCountDecrement", "PROPOSITION_LIST_COUNT_DECREMENT", "propositionListCountSet", "count", "PROPOSITION_LIST_COUNT_SET", "propositionListCountSetMode", "on", "PROPOSITION_LIST_COUNT_SET_MODE", "msisdnVerificationNeeded", "MSISDN_VERIFICATION_NEEDED", "changeMsisdnInput", "valid", "MSISDN_INPUT_CHANGED", "requiredMsisdnVerificationOn", "MSISDN_VERIFICATION_REQUIRED_ON", "requiredMsisdnVerificationOff", "MSISDN_VERIFICATION_REQUIRED_OFF", "URL_PARAMETERS_USED", "urlOfferParametersUsed", "URL_OFFER_PARAMETERS_USED", "clearOfferType", "SELECT_OFFER_TYPE", "clearProcessType", "SELECT_PROCESS_TYPE", "clearLoyaltyLength", "CLEAR_LOYALTY_LENGTH", "selectLoyaltyLength", "loyaltyLength", "selectLoyaltyLengthMetaAction", "selectProductListLoyaltyLength", "selectProductDetailsLoyaltyLength", "selectLoyaltyLengthB2B", "selectProcessType", "selectProcessTypeMetaAction", "selectProductListProcessType", "selectProductDetailsProcessType", "selectProcessTypeB2B", "getOffersActionB2B", "setMarketContext", "priceIsNet", "undefined", "CART_ACTIONS", "SET_PRICE_VIEW_NET", "SET_MARKET_CONTEXT", "verifyMsisdnB2B", "getOffersActionMetaAction", "actualLoyaltyLength", "SELECT_LOYALTY_LENGTH", "selectProductListLoyaltyLengthMetaAction", "selectProductDetailsLoyaltyLengthMetaAction", "selectLoyaltyLengthB2BMetaAction", "SELECT_LOYALTY_LENGTH_B2B", "SELECT_OFFER_B2B", "propositionId", "actualProcessType", "availableLoyalties", "selectProductListProcessTypeMetaAction", "selectProductDetailsProcessTypeMetaAction", "selectProcessTypeB2BMetaAction", "SELECT_PROCESS_TYPE_B2B", "defProposition", "urlServicePlan", "getParameterValueFromUrl", "propositionsForRatePlan", "propositionForRatePlan", "pickProposition", "loadFromSessionStorage", "genericProcess", "concreteProcess", "PROCESS_FOR_MSISDN", "selectedPropositionId", "p", "isMatchingFilters", "filters"],
    "mappings": "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",
    "sourcesContent": ["import * as ACTIONS from \"../actionTypes\";\nimport * as CART_ACTIONS from \"../../cart/actionTypes\";\nimport {SELECT_OFFER_TYPE} from \"eshop/modules/simfree/actionTypes\"\nimport RemoteApi from \"../remoteApi\";\nimport {\n    getCallOffersWithMsisdn,\n    getClientContext,\n    getClientContextChangeHandlers,\n    getDefaultFilters,\n    getSelectedFilters,\n    getSelectedFiltersByIndexB2B,\n    getSelectedFiltersProcessType, getSelectedLoyaltyLengthValue,\n    getSelectedOfferType,\n    getSelectedProcessTypeValue,\n    getUseDefaultLoyalty,\n    getUseDefaultOffer,\n    getUseDefaultProcess,\n    getVerifiedMsisdn,\n    getCheckMsisdnResult,\n} from \"../selectors/filters\";\nimport {\n    getCurrentSelectedAvailableProductsKey,\n    getDefaultProposition,\n    getDeliveryAndPaymentComponentUid,\n    getSelectedBaseDeviceCode,\n    getSelectedVariant,\n    isProductListPage\n} from \"eshop/modules/simfree/selectors\";\nimport {\n    checkOffersForCurrentIndexedFiltersB2B,\n    getDocumentsRequested,\n    getOffersDataInContext,\n    getOffersForCurrentFilters,\n    getRateplanIdsObj,\n    getSelectedBaseRatePlanId,\n    getSelectedDeviceId,\n    getSelectedOffer,\n} from \"../selectors/offers\";\nimport {\n    fetchContractRole,\n    setSelectedOffer,\n    tryAddToCartFromLink,\n} from \"eshop/modules/configurator/actions/offers\";\nimport {reloadProductList} from \"eshop/modules/simfree/actions/filter\";\nimport OnlineUtils from \"eshop/utils/OnlineUtils\";\nimport DataLayerUtils from \"eshop/utils/DataLayerUtils\";\nimport {getUrlOfferParametersUsed, getUrlParametersUsed} from \"eshop/modules/configurator/selectors/metaData\"\nimport * as remote from \"../../magnum2/actions/magnum\";\nimport {\n    fetchDeliveryAndPaymentHtml,\n    trySetDefaultOffer,\n    fetchIfActivePickupFromShelf,\n    matchPropositionIdToselectedRatePlan,\n} from \"../../simfree/actions/app\";\nimport {getFiltersData, getMarketContext} from \"../selectors/filters\";\nimport {getPriceIsNet} from \"../../cart/selectors\";\nimport {getSalesChannel} from \"../../auth/selectors/authorization\";\nimport {getAssistModeStateData} from \"../../checkout/selectors\";\nimport {getSelectedSoftBundleGroup} from \"eshop/modules/simfree/selectors\";\nimport {filtersMatching} from \"../utils\";\nimport _ from \"lodash\";\nimport {getFiltersState} from \"../selectors/root\";\nimport {requestLoggedCustomerData} from \"../../auth/actions/api\";\nimport TransactionProcessType from \"../../core/constants/TransactionProcessTypeEnum\";\nimport SimfreeUtils from \"../../../utils/SimfreeUtils\";\nimport {isAccessoryListPage} from \"../../simfree/selectors\";\n\nexport const setClientContext = isEnabled => (dispatch,getState) => {\n    dispatch({\n        type: isEnabled ? ACTIONS.CLIENT_CONTEXT_ENABLED : ACTIONS.CLIENT_CONTEXT_DISABLED\n    });\n\n    let handlers = getClientContextChangeHandlers(getState());\n    handlers.forEach(e => dispatch(e()));\n    DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,getSelectedFilters(getState()),getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n};\n\n\nexport const subscribeToClientContextChange = (action) => (dispatch,getState) => {\n    dispatch({\n        type: ACTIONS.CLIENT_CONTEXT_CHANGE_SUBSCRIPTION,\n        handler: action,\n    })\n};\n\n\nconst setCurrentProposition = (offerArray) => (dispatch,getState) => {\n\n    console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$ setCurrentProposition $$$$$$$$$$$$$$$$$$$$\");\n    offerArray = offerArray || getOffersForCurrentFilters(getState());\n    dispatch({type:ACTIONS.CAROUSEL_READY});\n    if(!getUseDefaultOffer(getState())){\n        dispatch(matchPropositionIdToselectedRatePlan());\n        return;\n    }\n    const selectedRatePlanId = getSelectedBaseRatePlanId(getState());\n    const newPropositionId = offerArray.find(offer => offer.rateplanBaseProductId === selectedRatePlanId);\n    dispatch(setSelectedOffer(newPropositionId && newPropositionId.id || offerArray[0] && offerArray[0].id))\n};\n\nexport const setPropositionListSoftBundleGroup = () => (dispatch,getState)=>{\n\n    console.log(\"ACTIONS.PROPOSITION_LIST_SOFT_BUNDLE_GROUP \",getSelectedSoftBundleGroup(getState()));\n\n    dispatch({\n        type: ACTIONS.PROPOSITION_LIST_SOFT_BUNDLE_GROUP,\n        softBundleGroup: getSelectedSoftBundleGroup(getState()),\n    })\n};\nexport const clearPropositionListOfferType = () => (dispatch,getState)=>{\n    dispatch({\n        type: ACTIONS.PROPOSITION_LIST_OFFER_TYPE,\n        offerType:null,\n    });\n    dispatch({\n        type: ACTIONS.PROPOSITION_LIST_SOFT_BUNDLE_GROUP,\n        softBundleGroup:null,\n    })\n};\nexport const clearPropositionListSoftBundleGroup = () => (dispatch,getState)=>{\n\n    dispatch({\n        type: ACTIONS.PROPOSITION_LIST_SOFT_BUNDLE_GROUP,\n        softBundleGroup:null,\n    })\n};\nexport const getOffersAction = (dispatch,getState,availableProductsKey = \"\") => {\n    dispatch({\n        type: ACTIONS.FETCH_OFFERS_START,\n    });\n    const deviceCode = getSelectedBaseDeviceCode(getState());\n    const selectedFilters = getSelectedFilters(getState());\n    return RemoteApi.getOffers(selectedFilters, availableProductsKey,deviceCode)\n        .then(response => {\n            dispatch({\n                type: ACTIONS.FETCH_OFFERS,\n                payload: response,\n                selectedFilters: selectedFilters,\n                useDefaultProcess: getUseDefaultProcess(getState()),\n                useDefaultLoyalty: getUseDefaultLoyalty(getState()),\n                useDefaultOffer: getUseDefaultOffer(getState()),\n            });\n            getDocumentsAction(dispatch,getState);\n\n            console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% getOffersAction\");\n            dispatch(trySetDefaultOffer());\n            fetchIfActivePickupFromShelf(dispatch, getState);\n            if (isProductListPage(getState()) || isAccessoryListPage(getState())) {\n                reloadProductList()(dispatch, getState);\n            }\n            DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,selectedFilters, getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n            dispatch(tryAddToCartFromLink());\n        },\n        error => console.error(\"Offers not fetched! getOffersAction getOffers error\", error))\n};\n\nexport const getProductListOffersAction = (dispatch, getState, availableProductsKey = \"\", isInitialFetch = false) => {\n    dispatch({\n        type: ACTIONS.FETCH_OFFERS_START,\n    });\n\n    const deviceCode = getSelectedDeviceId(getState());\n    const selectedFilters = getSelectedFilters(getState());\n    RemoteApi.getOffers(selectedFilters, availableProductsKey, deviceCode, isInitialFetch)\n        .then(response => {\n            dispatch({\n                type: ACTIONS.FETCH_OFFERS,\n                payload: response,\n                selectedFilters: selectedFilters,\n            });\n            console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% getProductListOffersAction\");\n\n            dispatch(trySetDefaultProposition());\n            dispatch(trySetDefaultOffer());\n            getDocumentsAction(dispatch, getState);\n            reloadProductList()(dispatch, getState);\n            dispatch(tryAddToCartFromLink());\n        })\n        .catch(error => {\n            console.error(\"offers not fetched\", error);\n        })\n};\n\nexport const getProductDetailsOffersWithoutOfferSelectorAction = (dispatch, getState, availableProductsKey = \"\", isInitialFetch = false) => {\n    dispatch({\n        type: ACTIONS.FETCH_OFFERS_START,\n    });\n\n    const deviceCode = getSelectedBaseDeviceCode(getState());\n    const selectedFilters = getSelectedFilters(getState());\n    RemoteApi.getOffersWithoutOfferSelector(selectedFilters, availableProductsKey, deviceCode, isInitialFetch)\n        .then(response => {\n            dispatch({\n                type: ACTIONS.FETCH_OFFERS,\n                payload: response,\n                selectedFilters: selectedFilters,\n            });\n            getDocumentsAction(dispatch, getState);\n            fetchIfActivePickupFromShelf(dispatch, getState);\n            dispatch(trySetDefaultProposition());\n            dispatch(trySetDefaultOffer());\n            DataLayerUtils.pushProductDetailsView(getSelectedOffer(getState()), getSelectedOfferType(getState()), getClientContext(getState()), getSelectedVariant(getState()), getMarketContext(getState()), getSalesChannel(getState()), getAssistModeStateData(getState()));\n            dispatch(tryAddToCartFromLink());\n        },\n        error => {\n            console.warn(\"getProductDetailsOffersAction offers not fetched\", error)\n        })\n        .catch(error => {\n            console.error(\"getProductDetailsOffersAction failed\", error);\n        });\n};\n\nexport const getProductDetailsConvergentOffersAction = (dispatch, getState) => {\n    dispatch({\n        type: ACTIONS.FETCH_OFFERS_START,\n    });\n    const magnumStore = getState().magnum;\n    const deviceCode = getSelectedBaseDeviceCode(getState());\n    const propositionIds = magnumStore.durationList.propositions.map(proposition => proposition.mobileVoiceBundleTemplateCode);\n    let processType = null;\n\n    if (magnumStore.selectedProposition && magnumStore.selectedProposition.voice &&\n        magnumStore.selectedProposition.mobileVoiceBundleTemplateCode &&\n        magnumStore.selectedProposition.mobileVoiceBundleTemplateCode.includes(magnumStore.selectedProposition.voice.code)) {\n        if (\"POS\" === magnumStore.possibleTransactions.salesChannel && \"MNP\" === magnumStore.selectedMobileTransaction.process) {\n            processType = \"MNP_TWOSTEP\";\n        } else {\n            processType = magnumStore.selectedMobileTransaction.process;\n        }\n    } else {\n        processType = magnumStore.selectedFixBroadbandTransaction.process;\n    }\n\n    RemoteApi.getConvergentOffers(processType,deviceCode,propositionIds)\n        .then(response => {\n            dispatch({\n                type: ACTIONS.FETCH_OFFERS,\n                payload: response,\n                selectedFilters: getSelectedFilters(getState()),\n            });\n            filterOffersContainingDevice(dispatch, magnumStore, response);\n        });\n};\n\nfunction filterOffersContainingDevice(dispatch, magnumStore, offersData) {\n    const availableOfferIds = offersData.map(offer => offer.id);\n    const propositions = magnumStore.durationList.propositions;\n    magnumStore.durationList.propositions = propositions.filter(proposition => availableOfferIds.indexOf(proposition.mobileVoiceBundleTemplateCode) !== -1);\n    dispatch(remote.fetchPropositionListActions.success(magnumStore.durationList));\n}\n\nexport const getDocumentsAction = (dispatch, getState) => {\n    const process = getSelectedFiltersProcessType(getState());\n    const ratePlanIds = getRatePlanIds(process)(getState);\n    RemoteApi.getDocuments(ratePlanIds, process).then(response => {\n        dispatch({\n            type: ACTIONS.SELECT_DOCUMENTS,\n            payload: response,\n        })\n    });\n};\n\nconst getRatePlanIds = process => getState => {\n    if (process && TransactionProcessType.SALE_OF_GOODS === process.processType) {\n        return {productIds: [SimfreeUtils.CPO]};\n    }\n    return getRateplanIdsObj(getState());\n};\n\nexport const fetchOfferFilters = () => (dispatch,getState) => {\n    RemoteApi.getOfferFilters().then(response => {\n        dispatch({\n            type: ACTIONS.FETCH_OFFER_FILTERS,\n            payload: response,\n            urlParametersUsed: getUrlParametersUsed(getState()),\n            useDefaultProcess: getUseDefaultProcess(getState()),\n            useDefaultLoyalty: getUseDefaultLoyalty(getState()),\n        });\n        OnlineUtils.saveInSessionStorageAndUrlParameterDisabledOnCheckout(\"processType\", getSelectedProcessTypeValue(getState()));\n\n        if(typeof Feedback !== \"undefined\") {\n            Feedback.showHideFeedback();\n        }\n        dispatch(fetchContractRole());\n        console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% fechOfferFilters\");\n        getOffersAction(dispatch,getState)\n    }).catch(error=> {console.error(\"Cannot get filters\", error);})\n};\n\nexport const checkMsisdnAndGetOffers = msisdn => (dispatch,getState) => {\n    console.log(\"checkMsisdnAndGetOffers\",msisdn);\n    dispatch({type: ACTIONS.CHECK_MSISDN});\n    const deviceCode = getSelectedDeviceId(getState());\n    const selectedFilters = getSelectedFilters(getState());\n    const marketContext = getMarketContext(getState());\n    const availableProductsKey = getCurrentSelectedAvailableProductsKey(getState());\n    RemoteApi.checkAndGetOffers(msisdn, selectedFilters, availableProductsKey, deviceCode)\n        .then(response => {\n            dispatch({\n                type: ACTIONS.CHECK_MSISDN_RESULT,\n                payload: {\n                    response: response,\n                    process: selectedFilters.processType,\n                    offer: selectedFilters.offerType,\n                    market: marketContext,\n                },\n            });\n            if(response.isPositive){\n                dispatch(fetchContractRole());\n                dispatch({\n                    type: ACTIONS.FETCH_OFFERS,\n                    payload: response.offers,\n                    selectedFilters: getSelectedFilters(getState()),\n                });\n\n                dispatch(requestLoggedCustomerData());\n                getDocumentsAction(dispatch,getState);\n                dispatch(setProcessForMsisdn(msisdn, selectedFilters.processType, response.process));\n\n                DataLayerUtils.pushSIMOImpressionEvent(\n                    getOffersDataInContext(getState()).offers,\n                    selectedFilters,\n                    getMarketContext(getState()),\n                    getSalesChannel(getState()),\n                    getAssistModeStateData(getState())\n                );\n            }\n        }).catch(response => {\n            console.error(\"checkMsisdnAndGetOffers \");\n            dispatch({\n                type: ACTIONS.CHECK_MSISDN_ERROR,\n                message: response.responseText,\n                payload: {\n                    response: {\n                        msisdn: msisdn\n                    },\n                    process: selectedFilters.processType,\n                    offer: selectedFilters.offerType,\n                    market: marketContext\n                }\n            });\n        });\n};\nexport const checkMsisdnAndGetOffersB2B = (msisdn,index) => (dispatch,getState) => {\n    const selectedFilters = getSelectedFiltersByIndexB2B(index)(getState());\n    dispatch({type: ACTIONS.CHECK_MSISDN_RESULT_B2B_START, index});\n    RemoteApi.checkAndGetOffers(msisdn, selectedFilters)\n        .then(response => {\n            if(response.isPositive){\n                dispatch({\n                    type: ACTIONS.CHECK_MSISDN_RESULT_B2B,\n                    status: \"OK\",\n                    description: response.description,\n                    msisdn,\n                    index,\n                });\n                selectedFilters.verifiedMsisdn = msisdn;\n                dispatch({\n                    type: ACTIONS.FETCH_OFFERS,\n                    payload: response.offers,\n                    selectedFilters: selectedFilters,\n                    useDefaultProcess: getUseDefaultProcess(getState()),\n                    useDefaultLoyalty: getUseDefaultLoyalty(getState()),\n                    useDefaultOffer: getUseDefaultOffer(getState()),\n                })\n            } else {\n                dispatch({\n                    type: ACTIONS.CHECK_MSISDN_RESULT_B2B,\n                    status: \"NOK\",\n                    description: response.description,\n                    msisdn:null,\n                    index,\n                });\n            }\n        }).catch(error => {\n            console.error(\"Error checking MSISDN\", error);\n            dispatch({\n                type: ACTIONS.CHECK_MSISDN_RESULT_B2B,\n                status: \"NOK\",\n                msisdn:null,\n                index,\n            });\n        });\n};\n\n\n\nconst manageChackMsisdnAndGetOffersProductList = (response, selectedFilters) => (dispatch,getState) => {\n    console.log(\"checkMsisdnAndGetOffersProductList response\",response);\n    const marketContext = getMarketContext(getState());\n    dispatch({\n        type: ACTIONS.CHECK_MSISDN_RESULT,\n        payload: {\n            response: response,\n            process: selectedFilters.processType,\n            offer: selectedFilters.offerType,\n            market: marketContext,\n        },\n    });\n    dispatch(fetchContractRole());\n    dispatch({\n        type: ACTIONS.FETCH_OFFERS,\n        payload: response.offers,\n        selectedFilters: getSelectedFilters(getState()),\n    });\n    dispatch(trySetDefaultOffer(response));\n    console.log(\"after trySetDefaultOffer\");\n    dispatch(trySetDefaultProposition());\n    getDocumentsAction(dispatch,getState);\n    DataLayerUtils.pushSIMOImpressionEvent(\n        getOffersDataInContext(getState()).offers,\n        selectedFilters,\n        getMarketContext(getState()),\n        getSalesChannel(getState()),\n        getAssistModeStateData(getState())\n    );\n    console.log(\"after pushSIMOImpressionEvent\");\n    reloadProductList()(dispatch,getState);\n    console.log(\"WSZYSTKO GRA\");\n\n};\n\nexport const checkMsisdnAndGetOffersProductList = msisdn => (dispatch,getState) => {\n    console.log(\"checkMsisdnAndGetOffersProductList (\",msisdn);\n    dispatch({type: ACTIONS.CHECK_MSISDN});\n    const deviceCode = getSelectedDeviceId(getState()) || getSelectedBaseDeviceCode(getState());\n    const selectedFilters = getSelectedFilters(getState());\n    const availableProductsKey= getCurrentSelectedAvailableProductsKey(getState());\n\n    if(getCheckMsisdnResult(getState())){\n        dispatch(manageChackMsisdnAndGetOffersProductList(getCheckMsisdnResult(getState()), selectedFilters));\n    }\n    else\n        RemoteApi.checkAndGetOffers(msisdn, selectedFilters, availableProductsKey, deviceCode).then(response => {\n            dispatch(manageChackMsisdnAndGetOffersProductList(response, selectedFilters));\n        }).catch(response => {\n            console.error(\"checkMsisdnAndGetOffersProductList \");\n            const marketContext = getMarketContext(getState());\n            dispatch({\n                type: ACTIONS.CHECK_MSISDN_ERROR,\n                message: response.responseText,\n                payload: {\n                    response: {\n                        msisdn: msisdn\n                    },\n                    process: selectedFilters.processType,\n                    offer: selectedFilters.offerType,\n                    market: marketContext\n                }\n            });\n        }\n    );\n};\n\nexport const setMaxSimCount = maxSimCount => ({type: ACTIONS.SET_MAX_SIM_COUNT, maxSimCount});\nexport const clearCheckMsisdn = () => ({type: ACTIONS.CLEAR_CHECK_MSISDN, payload: []});\nexport const clearCheckMsisdnB2B = index => ({type: ACTIONS.CLEAR_CHECK_MSISDN_B2B, index});\nexport const propositionListCountIncrement = () => (dispatch,getState) => (dispatch({type: ACTIONS.PROPOSITION_LIST_COUNT_INCREMENT,defaultFilters:getDefaultFilters(getState())}));\nexport const propositionListCountDecrement = () => ({type: ACTIONS.PROPOSITION_LIST_COUNT_DECREMENT});\nexport const propositionListCountSet = count => ({type:ACTIONS.PROPOSITION_LIST_COUNT_SET,count:count});\nexport const propositionListCountSetMode = on => ({type:ACTIONS.PROPOSITION_LIST_COUNT_SET_MODE,on:on});\nexport const msisdnVerificationNeeded = {type: ACTIONS.MSISDN_VERIFICATION_NEEDED};\nexport const changeMsisdnInput = (msisdn,valid) =>({type: ACTIONS.MSISDN_INPUT_CHANGED, payload:{msisdn:msisdn, valid:valid}});\nexport const requiredMsisdnVerificationOn = () => dispatch => {dispatch({type: ACTIONS.MSISDN_VERIFICATION_REQUIRED_ON});};\nexport const requiredMsisdnVerificationOff = () => dispatch => {dispatch({type: ACTIONS.MSISDN_VERIFICATION_REQUIRED_OFF});};\n\nexport const urlParametersUsed =  {type: ACTIONS.URL_PARAMETERS_USED};\nexport const urlOfferParametersUsed =  {type: ACTIONS.URL_OFFER_PARAMETERS_USED};\n\nexport const clearOfferType = () => ({type: SELECT_OFFER_TYPE,offerType:\"\"});\nexport const clearProcessType = () => ({type: ACTIONS.SELECT_PROCESS_TYPE,processType:\"\"});\nexport const clearLoyaltyLength = () => ({type: ACTIONS.CLEAR_LOYALTY_LENGTH});\n\nexport const selectLoyaltyLength = loyaltyLength => selectLoyaltyLengthMetaAction(loyaltyLength,getOffersAction);\nexport const selectProductListLoyaltyLength = loyaltyLength => selectLoyaltyLengthMetaAction(loyaltyLength,getProductListOffersAction);\nexport const selectProductDetailsLoyaltyLength = loyaltyLength => selectLoyaltyLengthMetaAction(loyaltyLength,getProductDetailsOffersWithoutOfferSelectorAction);\nexport const selectLoyaltyLengthB2B = loyaltyLength => selectLoyaltyLengthMetaAction(loyaltyLength,getOffersAction);\n\nexport const selectProcessType = processType => selectProcessTypeMetaAction(processType,getOffersAction);\nexport const selectProductListProcessType = processType => selectProcessTypeMetaAction(processType,getProductListOffersAction);\nexport const selectProductDetailsProcessType = processType => selectProcessTypeMetaAction(processType,getProductDetailsOffersWithoutOfferSelectorAction);\nexport const selectProcessTypeB2B = (processType,index) => selectProcessTypeMetaAction(processType,index,getOffersActionB2B);\n\nexport const setMarketContext = market => (dispatch, getState) => {\n    const marketContext = getMarketContext(getState());\n    const priceIsNet = getPriceIsNet(getState());\n    console.warn(\"setMarketContext\");\n    if (marketContext !== market || priceIsNet === null || priceIsNet === undefined) {\n        dispatch({\n            type: CART_ACTIONS.SET_PRICE_VIEW_NET,\n            market,\n        })\n    }\n    dispatch({\n        type: ACTIONS.SET_MARKET_CONTEXT,\n        market,\n    })\n};\n\nexport const verifyMsisdnB2B = (msisdn,index) => (dispatch) => {\n    dispatch({\n        type: ACTIONS.CHECK_MSISDN_RESULT_B2B,\n        msisdn,\n        index,\n    });\n};\n\nconst selectLoyaltyLengthMetaAction = (loyaltyLength,getOffersActionMetaAction) => (dispatch,getState) => {\n    const actualLoyaltyLength=getSelectedLoyaltyLengthValue(getState());\n    if(actualLoyaltyLength===loyaltyLength){\n        return;\n    }\n    dispatch({loyaltyLength,type: ACTIONS.SELECT_LOYALTY_LENGTH,processType:getSelectedProcessTypeValue(getState())});\n    if( getCallOffersWithMsisdn(getState())){\n        checkMsisdnAndGetOffers(getVerifiedMsisdn(getState()))(dispatch,getState);\n\n    } else if(!getOffersForCurrentFilters(getState())) {\n        getOffersActionMetaAction(dispatch, getState, getCurrentSelectedAvailableProductsKey(getState()))\n            .then(() => dispatch(setCurrentProposition()));\n    } else {\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(\n            getOffersDataInContext(getState()).offers,\n            getSelectedFilters(getState()),\n            getMarketContext(getState()),\n            getSalesChannel(getState()),\n            getAssistModeStateData(getState())\n        );\n    }\n};\nconst selectProductListLoyaltyLengthMetaAction = (loyaltyLength,getOffersActionMetaAction) => (dispatch,getState) => {\n    dispatch({loyaltyLength,type: ACTIONS.SELECT_LOYALTY_LENGTH,processType:getSelectedProcessTypeValue(getState())});\n    if(getCallOffersWithMsisdn(getState())){\n        checkMsisdnAndGetOffersProductList(getVerifiedMsisdn(getState()))(dispatch,getState);\n\n    } else if (!getOffersForCurrentFilters(getState())){\n        getOffersActionMetaAction(dispatch, getState, getCurrentSelectedAvailableProductsKey(getState()))\n\n    } else {\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,getSelectedFilters(getState()), getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n        dispatch(reloadProductList())\n    }\n};\nconst selectProductDetailsLoyaltyLengthMetaAction = (loyaltyLength,getOffersActionMetaAction) => (dispatch,getState) => {\n    console.log(\"selectProductDetailsLoyaltyLengthMetaAction\",loyaltyLength);\n\n    dispatch({loyaltyLength,type: ACTIONS.SELECT_LOYALTY_LENGTH,processType:getSelectedProcessTypeValue(getState())});\n    if(getCallOffersWithMsisdn(getState())){\n        checkMsisdnAndGetOffersProductList(getVerifiedMsisdn(getState()))(dispatch,getState);\n\n    } else if(!getOffersForCurrentFilters(getState())){\n        getOffersActionMetaAction(dispatch,getState,getCurrentSelectedAvailableProductsKey(getState()))\n    } else {\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,getSelectedFilters(getState()), getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n    }\n};\n\nconst selectLoyaltyLengthB2BMetaAction = (loyaltyLength,index,getOffersActionMetaAction) => (dispatch,getState) => {\n    console.log(\"selectLoyaltyLengthB2BMetaAction\",loyaltyLength);\n    dispatch({loyaltyLength,index,type:ACTIONS.SELECT_LOYALTY_LENGTH_B2B});\n    dispatch({type: ACTIONS.SELECT_OFFER_B2B, propositionId: null, index});\n    if(!checkOffersForCurrentIndexedFiltersB2B(index)(getState())){\n        getOffersActionMetaAction(dispatch,getState,index)\n    }\n};\n\n\n\n\nconst selectProcessTypeMetaAction = (processType,getOffersActionMetaAction) => (dispatch,getState) => {\n    console.log(\"&&&&&&&&&&&&&&&&&&&&&&&&   selectProcessTypeMetaAction   &&&&&&&&&&\");\n    console.log(processType);\n    let actualProcessType=getSelectedProcessTypeValue(getState());\n    if(actualProcessType==processType){\n        return;\n    }\n    dispatch({processType,type: ACTIONS.SELECT_PROCESS_TYPE,availableLoyalties:getFiltersData(getState())})\n\n\n    console.log(getOffersForCurrentFilters(getState()));\n    if(!getOffersForCurrentFilters(getState())){\n        console.log(\"if(!getOffersForCurrentFilters(getState()))  TRUE\");\n        getOffersActionMetaAction(dispatch,getState,getCurrentSelectedAvailableProductsKey(getState()))\n    }\n    else {\n        console.log(\"if(!getOffersForCurrentFilters(getState()))  else\");\n\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers, getSelectedFilters(getState()), getMarketContext(getState()), getSalesChannel(getState()), getAssistModeStateData(getState()));\n        if (isProductListPage(getState()) || isAccessoryListPage(getState())) {\n            reloadProductList()(dispatch, getState);\n        }\n        getDocumentsAction(dispatch,getState)\n    }\n    if(getDeliveryAndPaymentComponentUid(getState())) {\n        fetchDeliveryAndPaymentHtml()(dispatch, getState)\n    }\n};\nconst selectProductListProcessTypeMetaAction = (processType,getOffersActionMetaAction) => (dispatch,getState) => {\n    dispatch({processType,type: ACTIONS.SELECT_PROCESS_TYPE});\n    if(!getOffersForCurrentFilters(getState())){\n        getOffersActionMetaAction(dispatch,getState,getCurrentSelectedAvailableProductsKey(getState()))\n    }\n    else {\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,getSelectedFilters(getState()), getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n        dispatch(reloadProductList())\n    }\n};\nconst selectProductDetailsProcessTypeMetaAction = (processType,getOffersActionMetaAction) => (dispatch,getState) => {\n    dispatch({processType,type: ACTIONS.SELECT_PROCESS_TYPE});\n    if(!getOffersForCurrentFilters(getState())){\n        getOffersActionMetaAction(dispatch,getState,getCurrentSelectedAvailableProductsKey(getState()))\n    }\n    else {\n        dispatch(setCurrentProposition(getOffersForCurrentFilters(getState())));\n        DataLayerUtils.pushSIMOImpressionEvent(getOffersDataInContext(getState()).offers,getSelectedFilters(getState()), getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n    }\n};\n\nconst selectProcessTypeB2BMetaAction = (processType,index,getOffersActionMetaAction) => (dispatch,getState) => {\n    dispatch({processType,index,type:ACTIONS.SELECT_PROCESS_TYPE_B2B});\n    dispatch({type: ACTIONS.SELECT_OFFER_B2B, propositionId: null, index});\n    if(!checkOffersForCurrentIndexedFiltersB2B(index)(getState())){\n        getOffersActionMetaAction(dispatch,getState,index)\n    }\n};\n\nconst trySetDefaultProposition = () => (dispatch, getState) => {\n    const propositions = getOffersDataInContext(getState()).offers || [];\n    const defProposition = getDefaultProposition(getState());\n    const urlServicePlan = OnlineUtils.getParameterValueFromUrl(\"serviceplan\");\n    if (!getUrlOfferParametersUsed(getState()) && urlServicePlan) {\n        const propositionsForRatePlan = propositions.filter(offer => offer.rateplanBaseProductId === urlServicePlan);\n        const propositionForRatePlan = pickProposition(propositionsForRatePlan) || propositionsForRatePlan[0];\n\n        dispatch(setSelectedOffer(propositionForRatePlan && propositionForRatePlan.id));\n    } else if (OnlineUtils.loadFromSessionStorage(\"selectedPropositionId\")) {\n        dispatch(setCurrentProposition(propositions));\n    } else if (defProposition) {\n        if (propositions.find(offer => offer.id === defProposition)) {\n            dispatch(setSelectedOffer(defProposition));\n        } else {\n            console.error(\"Wrong default proposition: \" + defProposition);\n            dispatch(setCurrentProposition(propositions));\n        }\n    }\n    dispatch(urlOfferParametersUsed);\n};\n\nexport const setProcessForMsisdn = (msisdn, genericProcess, concreteProcess) => (dispatch,getState) => {\n    dispatch({msisdn, genericProcess, concreteProcess, type: ACTIONS.PROCESS_FOR_MSISDN})\n};\n\nconst pickProposition = (propositionsForRatePlan) => {\n    const selectedPropositionId = OnlineUtils.getParameterValueFromUrl(\"selectedPropositionId\") || OnlineUtils.loadFromSessionStorage(\"selectedPropositionId\");\n    return propositionsForRatePlan.find(p => selectedPropositionId == p.id);\n};\n\nexport const isMatchingFilters = () => (dispatch, getState) => {\n    const filters = getFiltersState(getState());\n    return filtersMatching(filters);\n};\n"],
    "file": "filters.js"
}