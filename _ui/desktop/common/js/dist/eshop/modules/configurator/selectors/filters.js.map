{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/configurator/selectors/filters.js"],
    "names": ["msisdnVeirficationProcessTypes", "TransactionProcessType", "MNP", "RETENTION", "MIGRATION_PRE_POST", "MNP_TWOSTEP", "MIGRATION_ZETAFON_POST", "MIGRATION_NJU_POST_TO_POST", "MIGRATION_NJU_PRE_TO_POST", "MNP_APPLICATION", "getClientContext", "getFiltersState", "filters", "clientContext", "getMarketContext", "marketContext", "isB2B", "market", "MarketSegment", "getClientContextChangeHandlers", "clientContextChangeHandlers", "getMaxSimCount", "maxSimCount", "getCheckMsisdnResult", "checkMsisdnResult", "getIsMsisdnChecking", "isMsisdnChecking", "getMsisdnVerificationNeeded", "msisdnVerificationNeeded", "getMsisdnInput", "msisdnInput", "getSimCountSelected", "simCountSelected", "getPropositionListCount", "propositionListCount", "getPropositionListCountSetMode", "propositionListCountSetMode", "getPropositionListOfferType", "propositionListOfferType", "getPropositionListSoftBundleGroup", "propositionListSoftBundleGroup", "getFiltersData", "data", "getSelectedFilters", "selected", "getSelectedFiltersB2B", "selectedB2B", "getSelectedFiltersByIndexB2B", "index", "getSelectedFiltersB2BFiltered", "map", "singleFilter", "loyaltyLength", "processType", "getDefaultFilters", "defaultFilters", "getVerifiedMsisdnB2B", "verifiedMsisdnB2B", "getSelectedProcessTypeValue", "getSelectedOfferType", "getSelectedOfferType_", "selectedOfferType", "offerType", "OnlineUtils", "loadFromSessionStorage", "getSelectedProcessTypeObject", "find", "process", "value", "getSelectedProcessTypesObjectsB2B", "sel", "d", "getAvailableLoyaltiesLengthsB2B", "processTypes", "processTypeObject", "loyalties", "getLoyaltyLengthFiltersForSelectB2B", "loyData", "mapObjectArrayToSelect", "getAvailableLoyaltiesLengths", "getUseDefaultOfferType", "useDefaultOfferType", "getUseDefaultProcess", "useDefaultProcess", "getUseDefaultLoyalty", "useDefaultLoyalty", "getUseDefaultOffer", "useDefaultOffer", "getProcessTypeFiltersData", "getLoyaltyLengthFiltersData", "getProcessTypeFiltersForSelect", "getLoyaltyLengthFiltersForSelect", "getSortedLoyaltyLengthFiltersWithIndefinitePeriodForSelect", "sort", "a", "b", "getSelectedFiltersProcessType", "getSelectedLoyaltyLengthValue", "getDisableAddToCart", "getCallOffersWithMsisdn", "getVerifiedMsisdn", "getSelectedBaseRatePlanId", "getOffers", "offers", "selectedRateplanBaseProductId", "getFiltersUrl", "createFiltersUrl", "loyalty", "servicePlanId", "isMsisdndVerificationRequired", "selectedProcessType", "indexOf", "getOfferTypeCmsConf", "offerFilter", "cmsConf", "getExtProcessSelectConfig", "extProcessSelectConfig", "getClientContextRole", "cms", "clientContextRole", "getExtProcessSelectConfigFiltered", "filterAvailableProcessOptions", "getOfferFiltersLoading", "offerFiltersLoading", "getOfferTypeFiltersCached", "offerTypeFiltersCached", "getProcessForMsisdn", "processForMsisdn", "getSelectedProcess", "selectedProcess", "verifiedMsisdn", "existProcess", "getOfferTypeCmsConfMarket", "Object", "values", "conf", "Boolean"],
    "mappings": "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",
    "sourcesContent": ["import {createSelector} from \"Reselect\";\nimport {getFiltersState, getOffers} from \"./root\";\n\nimport {\n    filterAvailableProcessOptions,\n    getVerifiedMsisdnFromFilters,\n    hashProcessType,\n    mapObjectArrayToSelect,\n    mapStringToJsonObject,\n    shouldCallOffersWithMsisdn,\n    shouldDisableAddToCart\n} from \"../utils\";\nimport OnlineUtils from \"eshop/utils/OnlineUtils\";\nimport TransactionProcessType from \"../../core/constants/TransactionProcessTypeEnum\";\nimport MarketSegment from \"eshop/modules/core/enum/MarketSegment\";\n\nconst msisdnVeirficationProcessTypes = [\n    TransactionProcessType.MNP,\n    TransactionProcessType.RETENTION,\n    TransactionProcessType.MIGRATION_PRE_POST,\n    TransactionProcessType.MNP_TWOSTEP,\n    TransactionProcessType.MIGRATION_ZETAFON_POST,\n    TransactionProcessType.MIGRATION_NJU_POST_TO_POST,\n    TransactionProcessType.MIGRATION_NJU_PRE_TO_POST,\n    TransactionProcessType.MNP_APPLICATION\n];\n\n\nexport const getClientContext = createSelector(getFiltersState, filters => filters.clientContext)\nexport const getMarketContext = createSelector(getFiltersState, filters => filters.marketContext)\nexport const isB2B = createSelector(getMarketContext, market => MarketSegment.isB2B(market));\n\nexport const getClientContextChangeHandlers = createSelector(getFiltersState, filters => filters.clientContextChangeHandlers)\nexport const getMaxSimCount = createSelector(getFiltersState, filters => filters.maxSimCount)\n\nexport const getCheckMsisdnResult = createSelector(getFiltersState, filters => filters.checkMsisdnResult);\nexport const getIsMsisdnChecking = createSelector(getFiltersState, filters => filters.isMsisdnChecking)\nexport const getMsisdnVerificationNeeded = createSelector(getFiltersState, filters => filters.msisdnVerificationNeeded)\nexport const getMsisdnInput = createSelector(getFiltersState, filters => filters.msisdnInput)\n\nexport const getSimCountSelected = createSelector(getFiltersState, filters => filters.simCountSelected)\nexport const getPropositionListCount = createSelector(getFiltersState, filters => filters.propositionListCount)\nexport const getPropositionListCountSetMode = createSelector(getFiltersState, filters => filters.propositionListCountSetMode)\nexport const getPropositionListOfferType = createSelector(getFiltersState, filters => filters.propositionListOfferType)\nexport const getPropositionListSoftBundleGroup = createSelector(getFiltersState, filters => filters.propositionListSoftBundleGroup)\n\nexport const getFiltersData = createSelector(getFiltersState, filters => filters.data)\nexport const getSelectedFilters = createSelector(getFiltersState, filters => filters.selected)\nexport const getSelectedFiltersB2B = createSelector(getFiltersState, filters => filters.selectedB2B)\nexport const getSelectedFiltersByIndexB2B = (index) => createSelector(getSelectedFiltersB2B, selected => selected[index])\nexport const getSelectedFiltersB2BFiltered = createSelector(getSelectedFiltersB2B, selected => selected.map(singleFilter => ({...singleFilter,loyaltyLength: singleFilter.loyaltyLength[singleFilter.processType]})))/* ({...selected , loyaltyLength: selected.loyaltyLength[selected.processType]}))*/\nexport const getDefaultFilters = createSelector(getFiltersState, filters => filters.defaultFilters)\nexport const getVerifiedMsisdnB2B = createSelector(getFiltersState, filters => filters.verifiedMsisdnB2B);\n\nexport const getSelectedProcessTypeValue = createSelector(getSelectedFilters, selected => selected.processType)\nexport const getSelectedOfferType = createSelector(getSelectedFilters,getSelectedOfferType_)\n\nfunction getSelectedOfferType_(selected){\n    var selectedOfferType=selected.offerType?selected.offerType:OnlineUtils.loadFromSessionStorage(\"selectedOfferType\");\n\n    return selectedOfferType;\n}\n\n\nexport const getSelectedProcessTypeObject = createSelector([getFiltersData,getSelectedProcessTypeValue],(data,selected) => data.find(process => process.value == selected))\n\nexport const getSelectedProcessTypesObjectsB2B = createSelector([getFiltersData,getSelectedFiltersB2B],(data,selected) => selected.map(sel => data.find(d => d.value === sel.processType)))\n\nexport const getAvailableLoyaltiesLengthsB2B = createSelector(getSelectedProcessTypesObjectsB2B, processTypes => processTypes.map(processTypeObject => processTypeObject.loyalties))\n\nexport const getLoyaltyLengthFiltersForSelectB2B = createSelector(getAvailableLoyaltiesLengthsB2B, data => data && data.map(loyData => loyData && loyData.map(mapObjectArrayToSelect) || []))\n\n\nexport const getAvailableLoyaltiesLengths = createSelector(getSelectedProcessTypeObject, processType => processType && processType.loyalties)\n\nexport const getUseDefaultOfferType = createSelector(getFiltersState,data =>data.useDefaultOfferType);\nexport const getUseDefaultProcess = createSelector(getFiltersState,data =>data.useDefaultProcess);\nexport const getUseDefaultLoyalty = createSelector(getFiltersState,data =>data.useDefaultLoyalty);\nexport const getUseDefaultOffer = createSelector(getFiltersState,data =>data.useDefaultOffer);\n\nexport const getProcessTypeFiltersData = createSelector(getFiltersData, data => data.processType)\nexport const getLoyaltyLengthFiltersData = createSelector(getFiltersData, data => data.loyaltyLength);\n\nexport const getProcessTypeFiltersForSelect = createSelector(getFiltersData, data => data && data.map(mapObjectArrayToSelect) || [])\nexport const getLoyaltyLengthFiltersForSelect = createSelector(getAvailableLoyaltiesLengths, data => data && data.map(mapObjectArrayToSelect) || []);\n\nexport const getSortedLoyaltyLengthFiltersWithIndefinitePeriodForSelect = createSelector(getLoyaltyLengthFiltersForSelect,\n    data => data.sort((a, b) => {\n        if (a.value === 0)\n            return 1;\n        if (b.value === 0)\n            return -1;\n        if (a.value < b.value)\n            return -1;\n        if (a.value > b.value)\n            return 1;\n        return 0;\n    }));\n\nexport const getSelectedFiltersProcessType = createSelector(getSelectedFilters, selected => selected&&mapStringToJsonObject(hashProcessType(selected)))\n\nexport const getSelectedLoyaltyLengthValue = createSelector([getSelectedFilters,getSelectedProcessTypeValue], (selected,processType) => selected&&processType&&selected.loyaltyLength&&selected.loyaltyLength[processType])\n\nexport const getDisableAddToCart = createSelector([getCheckMsisdnResult,getSelectedProcessTypeValue,getMsisdnVerificationNeeded], (checkMsisdnResult, processType, msisdnVerificationNeeded) => shouldDisableAddToCart(checkMsisdnResult, processType, msisdnVerificationNeeded));\n\nexport const getCallOffersWithMsisdn = createSelector(\n    [getCheckMsisdnResult, getSelectedProcessTypeValue, getMsisdnVerificationNeeded, getFiltersState],\n    (checkMsisdnResult, processType, msisdnVerificationNeeded, filters) =>\n        getVerifiedMsisdnFromFilters(filters) && shouldCallOffersWithMsisdn(checkMsisdnResult, processType, msisdnVerificationNeeded)\n);\n\nexport const getVerifiedMsisdn = createSelector(getFiltersState, filters => getVerifiedMsisdnFromFilters(filters));\n\n const getSelectedBaseRatePlanId = createSelector(getOffers, offers => offers.selectedRateplanBaseProductId)\n\nexport const getFiltersUrl  = createSelector([getSelectedOfferType,getSelectedProcessTypeValue,getSelectedLoyaltyLengthValue,getClientContext,getSelectedBaseRatePlanId],createFiltersUrl);\nfunction createFiltersUrl(offerType,processType,loyalty,clientContext,servicePlanId){\n    return 'offerType='+offerType+'&processType='+processType+'&loyalty='+loyalty+(clientContext?'&convergence=true':'')+'&serviceplan='+servicePlanId;\n\n\n}\n\nexport const isMsisdndVerificationRequired = createSelector(getSelectedProcessTypeValue, selectedProcessType => msisdnVeirficationProcessTypes.indexOf(selectedProcessType) !== -1);\n\nexport const getOfferTypeCmsConf = createSelector(getFiltersState, offerFilter => offerFilter.cmsConf);\nexport const getExtProcessSelectConfig = createSelector([getOfferTypeCmsConf, getSelectedOfferType], (cmsConf, offerType) => cmsConf && cmsConf[offerType] && cmsConf[offerType].extProcessSelectConfig);\nexport const getClientContextRole = createSelector([getOfferTypeCmsConf,getSelectedOfferType], (cms,offerType) => (cms && cms[offerType] && cms[offerType].clientContextRole) || \"SOFT_BUNDLE_COV\");\nexport const getExtProcessSelectConfigFiltered = createSelector([getExtProcessSelectConfig, getProcessTypeFiltersForSelect],\n    filterAvailableProcessOptions);\nexport const getOfferFiltersLoading = createSelector(getFiltersState, filters => filters.offerFiltersLoading);\nexport const getOfferTypeFiltersCached = createSelector(getFiltersState, filters => filters.offerTypeFiltersCached);\nexport const getProcessForMsisdn = createSelector(getFiltersState, filters => filters.processForMsisdn);\n\nexport const getSelectedProcess = createSelector([getSelectedProcessTypeValue, getVerifiedMsisdn, getProcessForMsisdn], (selectedProcess, verifiedMsisdn, processForMsisdn) => {\n    if (verifiedMsisdn && processForMsisdn) {\n        const existProcess = processForMsisdn[verifiedMsisdn];\n        return existProcess || selectedProcess\n    }\n    return selectedProcess;\n});\n\nexport const getOfferTypeCmsConfMarket = createSelector(getOfferTypeCmsConf, cmsConf =>\n    Object.values(typeof cmsConf !== \"undefined\" && !!cmsConf && cmsConf)\n    .map(conf => conf.market).find(Boolean));\n"],
    "file": "filters.js"
}