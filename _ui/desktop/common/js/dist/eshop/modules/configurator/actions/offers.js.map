{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/configurator/actions/offers.js"],
    "names": ["selectOfferMetaAction", "propositionId", "position", "deviceId", "rateplanBaseProductId", "dispatch", "getState", "avaliableInstalmentCount", "setAvailableInstalment", "console", "log", "type", "ACTIONS", "SELECT_OFFER", "urlParametersUsed", "selectOffer", "warn", "DataLayerUtils", "pushAddToCartProductClickOfferEvent", "pushAddToCartOfferEvent", "process", "includes", "carouselPreparing", "CAROUSEL_PREPARING", "carouselReady", "CAROUSEL_READY", "tryAddToCartFromLink", "OnlineUtils", "getParameterValueFromUrl", "serviceplan", "data", "setCartConfigurationFromUrl", "ADD_FROM_LINK", "preSelectOffer", "selectedOffer", "pushProductDetailsView", "setSelectedOffer", "setSelectedOfferForProductList", "state", "currentInstalmentCountValue", "indexOf", "parseInt", "defaultInstallmentNumber", "deviceInstallmentsCount", "length", "SELECT_DEVICE_INSTALMENTS_COUNT", "deviceInstalmentsCount", "setSelectedDeviceInstalmentsCountForProductList", "setDeviceInstallmentsInSessionForMagnum", "SET_DEVICE_INSTALMENTS_COUNT_IN_SESSION_STORAGE", "pickDevice", "url", "clearDeviceInstalmentsCountFromSessionStorage", "pushProductClickEvent", "pageRedirect", "clearPropositionId", "CLEAR_OFFER", "setDeviceInstalmentsConfiguration", "deviceInstalmentsConfiguration", "SET_DEVICE_INSTALMENTS_CONFIGURATION", "pickDeviceB2B", "CLEAR_DEVICE_INSTALMENTS_COUNT_FROM_SESSION_STORAGE", "fetchContractRole", "availableProductsKey", "marketContext", "GET_CONTRACT_ROLE_START", "RemoteApi", "getContractRole", "then", "response", "roles", "GET_CONTRACT_ROLE_RESPONSE", "GET_CONTRACT_ROLE_ERROR", "catch", "fetchFirstOffer", "GET_FIRST_OFFER_START", "getFirstOffer", "GET_FIRST_OFFER_RESPONSE", "GET_FIRST_OFFER_ERROR", "unselectVas", "vasId", "rateplanName", "UNSELECT_VAS", "selectVas", "SELECT_VAS", "clearSelectedVases", "CLEAR_SELECTED_VASES"],
    "mappings": ";;;;;;;;AAAA;AAeA;AAoBA;AAOA;;AAHA;AACA;AACA;AAQA,MAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,aAAD;AAAA,QAAgBC,QAAhB,uEAA2B,CAAC,CAA5B;AAAA,QAA+BC,QAA/B,uEAA0C,EAA1C;AAAA,QACCC,qBADD;AAAA,WAC2B,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7E,UAAMF,qBAAqB,GAAGA,qBAAqB,IAAI,8CAAiCH,aAAjC,EAAgDK,QAAQ,EAAxD,CAAvD;AACA,UAAMC,wBAAwB,GAAG,2DAA8CN,aAA9C,EAA6DK,QAAQ,EAArE,CAAjC;AACAE,MAAAA,sBAAsB,CAACP,aAAD,CAAtB,CAAsCI,QAAtC,EAAgDC,QAAQ,EAAxD;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,aAAhC,EAA+CG,qBAA/C,EAAsED,QAAtE;;AACA,UAAGC,qBAAH,EAA0B;AACtBC,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEC,OAAO,CAACC,YADT;AAELT,UAAAA,qBAAqB,EAArBA,qBAFK;AAGLH,UAAAA,aAAa,EAAbA,aAHK;AAILE,UAAAA,QAAQ,EAARA,QAJK;AAKLD,UAAAA,QAAQ,EAARA,QALK;AAMLY,UAAAA,iBAAiB,EAAE,oCAAqBR,QAAQ,EAA7B;AANd,SAAD,CAAR;AAQH;;AACD,6CAA6BD,QAA7B,EAAuCC,QAAvC;AACH,KAjB6B;AAAA,GAA9B;;AAkBO,MAAMS,WAAW,GAAG,SAAdA,WAAc,CAACd,aAAD,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,qBAApC;AAAA,WAA8D,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7GG,MAAAA,OAAO,CAACO,IAAR,CAAa,2BAAb,EAA0C,+BAAiBV,QAAQ,EAAzB,CAA1C;;AACAW,8BAAeC,mCAAf,CAAmD,mDAAsCjB,aAAtC,EAAqDK,QAAQ,EAA7D,CAAnD,EAAqH,iCAAmBA,QAAQ,EAA3B,CAArH,EAAqJ,4CAA2BH,QAA3B,EAAqCG,QAAQ,EAA7C,CAArJ,EAAuMH,QAAvM,EAAiND,QAAjN,EAA2N,+BAAiBI,QAAQ,EAAzB,CAA3N,EAAyP,qCAAgBA,QAAQ,EAAxB,CAAzP,EAAqR,wCAAuBA,QAAQ,EAA/B,CAArR;;AACAW,8BAAeE,uBAAf,CAAuC,mDAAsClB,aAAtC,EAAqDK,QAAQ,EAA7D,CAAvC,EAAyG,iCAAmBA,QAAQ,EAA3B,CAAzG,EAAyI,4CAA2BH,QAA3B,EAAqCG,QAAQ,EAA7C,CAAzI,EAA2LH,QAA3L,EAAqMD,QAArM,EAA+M,+BAAiBI,QAAQ,EAAzB,CAA/M,EAA6O,qCAAgBA,QAAQ,EAAxB,CAA7O,EAA0Q,wCAAuBA,QAAQ,EAA/B,CAA1Q;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BT,aAA3B,EAA0CE,QAA1C;AACAE,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,qBAApC,CAAtB,CAAR;;AAEA,UAAG,UAAU,qCAAgBE,QAAQ,EAAxB,CAAb,EAAyC;AACrC,YAAI,gCAAkBA,QAAQ,EAA1B,CAAJ,EAAmC;AAAC;AAChCD,UAAAA,QAAQ,CAAC,8CAAD,CAAR;AACH,SAFD,MAEO;AACHA,UAAAA,QAAQ,CAAC,wCAAD,CAAR;AACH;AACJ,OAND,MAMO;AACH,YAAIe,OAAO,GAAG,0CAA4Bd,QAAQ,EAApC,CAAd;;AACA,YAAK,0CAA4BA,QAAQ,EAApC,KAA2C,gCAAkBA,QAAQ,EAA1B,CAA5C,IACG,CAAC,YAAD,EAAe,eAAf,EAAgC,8BAAhC,EAAgEe,QAAhE,CAAyED,OAAzE,CADP,EAC0F;AACtFf,UAAAA,QAAQ,CAAC,sBAAD,CAAR;AACH,SAHD,MAGO,IAAI,gCAAgCe,OAApC,EAA6C;AAChDf,UAAAA,QAAQ,CAAC,6CAAD,CAAR;AACH,SAFM,MAEA;AACHA,UAAAA,QAAQ,CAAC,sCAAD,CAAR;AACH;AACJ;AACJ,KAxB0B;AAAA,GAApB;;;;AA0BA,MAAMiB,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,WAAM,UAACjB,QAAD,EAAWC,QAAX,EAAwB;AAC3DD,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAAEC,OAAO,CAACW;AAAf,OAAD,CAAR;AACH,KAFgC;AAAA,GAA1B;;;;AAGA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAM,UAACnB,QAAD,EAAWC,QAAX,EAAwB;AACvDD,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAAEC,OAAO,CAACa;AAAf,OAAD,CAAR;AACH,KAF4B;AAAA,GAAtB;;;;AAGA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,WAAM,UAACrB,QAAD,EAAWC,QAAX,EAAwB;AAC9D,UAAI,8BAAeA,QAAQ,EAAvB,CAAJ,EAAgC;AAC5B,YAAIL,aAAa,GAAG0B,qBAAYC,wBAAZ,CAAqC,eAArC,CAApB;;AACA,YAAIC,WAAW,GAAGF,qBAAYC,wBAAZ,CAAqC,aAArC,CAAlB;;AACA,YAAIzB,QAAQ,GAAGwB,qBAAYC,wBAAZ,CAAqC,cAArC,CAAf;;AACA,YAAI3B,aAAJ,EAAmB;AACf4B,UAAAA,WAAW,GAAG,8CAAiC5B,aAAjC,EAAgDK,QAAQ,EAAxD,CAAd;AACH,SAFD,MAEO,IAAIuB,WAAJ,EAAiB;AACpB,cAAIC,IAAI,GAAG,wCAA2BxB,QAAQ,EAAnC,CAAX;AACAL,UAAAA,aAAa,GAAG,0CAA6B4B,WAA7B,EAA0CC,IAA1C,CAAhB;AACH;;AACDrB,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYmB,WAAZ;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAE,QAAAA,QAAQ,CAACU,WAAW,CAACd,aAAD,EAAgB,CAAC,CAAjB,EAAoBE,QAApB,EAA8B0B,WAA9B,CAAZ,CAAR;AACH;AACJ,KAjBmC;AAAA,GAA7B;;;;AAoBA,MAAME,2BAA2B,GAAG,SAA9BA,2BAA8B;AAAA,WAAM,UAAC1B,QAAD,EAAWC,QAAX,EAAwB;AAErE,UAAIqB,qBAAYC,wBAAZ,CAAqC,SAArC,CAAJ,EAAqD;AACjD,YAAMC,WAAW,GAAGF,qBAAYC,wBAAZ,CAAqC,aAArC,CAApB;;AACA,YAAM3B,aAAa,GAAG0B,qBAAYC,wBAAZ,CAAqC,eAArC,CAAtB;;AACA,YAAMzB,QAAQ,GAAGwB,qBAAYC,wBAAZ,CAAqC,cAArC,CAAjB;;AACAvB,QAAAA,QAAQ,CAAC;AACDM,UAAAA,IAAI,EAAEC,OAAO,CAACoB,aADb;AAEDH,UAAAA,WAAW,EAAXA,WAFC;AAGD1B,UAAAA,QAAQ,EAARA,QAHC;AAIDF,UAAAA,aAAa,EAAbA;AAJC,SAAD,CAAR;AAOH;AACJ,KAd0C;AAAA,GAApC;;;;AAeA,MAAMgC,cAAc,GAAG,SAAjBA,cAAiB,CAAChC,aAAD,EAAgBC,QAAhB,EAA0BC,QAA1B;AAAA,WAAuC,UAACE,QAAD,EAAWC,QAAX,EAAwB;AACzFG,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDT,aAAvD;AAEAI,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,QAA1B,CAAtB,CAAR;AACA,UAAM+B,aAAa,GAAG,+BAAiB5B,QAAQ,EAAzB,CAAtB;;AACA,UAAI4B,aAAJ,EAAmB;AACf,YAAI,sCAAqB5B,QAAQ,EAA7B,CAAJ,EAAsC;AAElCW,kCAAekB,sBAAf,CAAsCD,aAAtC,EAAqD,mCAAqB5B,QAAQ,EAA7B,CAArD,EAAuF,+BAAiBA,QAAQ,EAAzB,CAAvF,EAAqH,oCAAmBA,QAAQ,EAA3B,CAArH,EAAqJ,+BAAiBA,QAAQ,EAAzB,CAArJ,EAAmL,qCAAgBA,QAAQ,EAAxB,CAAnL,EAAgN,wCAAuBA,QAAQ,EAA/B,CAAhN;AACH,SAHD,MAGO,CACH;AAEH;AACJ;AACJ,KAd6B;AAAA,GAAvB;;;;AAeA,MAAM8B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACnC,aAAD;AAAA,WAAmB,UAACI,QAAD;AAAA,aAAcA,QAAQ,CAACL,qBAAqB,CAACC,aAAD,CAAtB,CAAtB;AAAA,KAAnB;AAAA,GAAzB;;;;AAEA,MAAMoC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACpC,aAAD;AAAA,WAAmB,UAACI,QAAD,EAAc;AAC3EI,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CT,aAA9C;AACAI,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,aAAD,CAAtB,CAAR;AACAI,MAAAA,QAAQ,CAAC,gCAAD,CAAR;AACH,KAJ6C;AAAA,GAAvC;;;;AAKP,MAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACP,aAAD;AAAA,WAAmB,UAACI,QAAD,EAAWiC,KAAX,EAAqB;AACnE,UAAM/B,wBAAwB,GAAG,2DAA8CN,aAA9C,EAA6DqC,KAA7D,CAAjC;AACA,UAAIC,2BAA2B,GAAG,mDAAsCD,KAAtC,CAAlC;;AACA,UAAI/B,wBAAwB,CAACiC,OAAzB,CAAiCC,QAAQ,CAACF,2BAAD,CAAzC,IAA0E,CAAC,CAA/E,EAAkF;AAC9E9B,QAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA,YAAIgC,wBAAwB,GAAG,wDAA2CJ,KAA3C,KAAqD,wDAA2CA,KAA3C,EAAkD,SAAlD,CAApF;AACA,YAAIK,uBAAuB,GAAIpC,wBAAwB,IAAIA,wBAAwB,CAACqC,MAAzB,GAAkC,CAA9D,IAAmErC,wBAAwB,CAACc,QAAzB,CAAkCqB,wBAAlC,CAApE,GAAmIA,wBAAnI,GAA8J,IAA5L;AACArC,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEC,OAAO,CAACiC,+BADT;AAELC,UAAAA,sBAAsB,EAAEH;AAFnB,SAAD,CAAR;AAIH;AACJ,KAd8B;AAAA,GAA/B;;AAeO,MAAMI,+CAA+C,GAAG,SAAlDA,+CAAkD,CAACD,sBAAD;AAAA,WAA4B,UAACzC,QAAD,EAAc;AACrGA,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEC,OAAO,CAACiC,+BADT;AAELC,QAAAA,sBAAsB,EAAtBA;AAFK,OAAD,CAAR;AAKAzC,MAAAA,QAAQ,CAAC,gCAAD,CAAR;AACH,KAP8D;AAAA,GAAxD;;;;AAUA,WAAS2C,uCAAT,CAAiDF,sBAAjD,EAAyE;AAC5E,WAAO,UAACzC,QAAD,EAAc;AACjBA,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEC,OAAO,CAACqC,+CADT;AAELH,QAAAA,sBAAsB,EAAEA;AAFnB,OAAD,CAAR;AAIH,KALD;AAMH;;AAGM,MAAMI,UAAU,GAAG,SAAbA,UAAa,CAACjD,aAAD,EAAgBkD,GAAhB,EAAqBjD,QAArB;AAAA,WAAkC,UAACG,QAAD,EAAWC,QAAX,EAAwB;AAChFD,MAAAA,QAAQ,CAAC,uDAAD,CAAR;AACAA,MAAAA,QAAQ,CAAC+C,6CAA6C,EAA9C,CAAR;AACA/C,MAAAA,QAAQ,CAACS,2BAAD,CAAR;AACAT,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,aAAD,CAAtB,CAAR;;AACAgB,8BAAeoC,qBAAf,CAAqC,mDAAsCpD,aAAtC,EAAqDK,QAAQ,EAA7D,CAArC,EAAuG,iCAAmBA,QAAQ,EAA3B,CAAvG,EAAuIJ,QAAvI,EAAgJ,IAAhJ,EAAsJ,+BAAiBI,QAAQ,EAAzB,CAAtJ,EAAoL,qCAAgBA,QAAQ,EAAxB,CAApL,EAAiN,wCAAuBA,QAAQ,EAA/B,CAAjN;;AACAqB,2BAAY2B,YAAZ,CAAyBH,GAAzB;AACH,KAPyB;AAAA,GAAnB;;;;AASA,MAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,WAAO;AACrC5C,MAAAA,IAAI,EAAEC,OAAO,CAAC4C;AADuB,KAAP;AAAA,GAA3B;;;;AAIA,MAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,8BAAD;AAAA,WAAqC;AAClF/C,MAAAA,IAAI,EAAEC,OAAO,CAAC+C,oCADoE;AAElFD,MAAAA,8BAA8B,EAA9BA;AAFkF,KAArC;AAAA,GAA1C;;;;AAOA,MAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACT,GAAD;AAAA,WAAS,UAAC9C,QAAD,EAAWC,QAAX,EAAwB;AAE1D;AACA;AACA;AACA;AACAqB,2BAAY2B,YAAZ,CAAyBH,GAAzB;AACH,KAP4B;AAAA,GAAtB;;;;AAQA,MAAMC,6CAA6C,GAAG,SAAhDA,6CAAgD;AAAA,WAAO;AAChEzC,MAAAA,IAAI,EAAEC,OAAO,CAACiD;AADkD,KAAP;AAAA,GAAtD;;;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,oBAAD;AAAA,WAA0B,UAAC1D,QAAD,EAAWC,QAAX,EAAwB;AAC/E,UAAI0D,aAAa,GAAG,+BAAiB1D,QAAQ,EAAzB,CAApB;;AACA,UAAG,CAAC,KAAD,EAAQ,KAAR,EAAekC,OAAf,CAAuBwB,aAAvB,MAA0C,CAAC,CAA9C,EAAgD;AAC7CvD,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAA8BsD,aAA9B,GAA4C,qCAAxD;AACA;AACF;;AAEDD,MAAAA,oBAAoB,GAAGA,oBAAoB,IAAI,wDAAuCzD,QAAQ,EAA/C,CAAxB,IAA8E,8CAA6BA,QAAQ,EAArC,CAArG;;AACA,UAAI,CAACyD,oBAAL,EAA2B;AACvBtD,QAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA;AACH;;AAEDL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEC,OAAO,CAACqD;AADT,OAAD,CAAR;;AAGAC,yBAAUC,eAAV,CAA0B;AAACJ,QAAAA,oBAAoB,EAApBA;AAAD,OAA1B,EACKK,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,YAAIA,QAAQ,CAACC,KAAb,EAAoB;AAChBjE,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEC,OAAO,CAAC2D,0BADT;AAELzC,YAAAA,IAAI,EAAEuC;AAFD,WAAD,CAAR;AAIH,SALD,MAKO;AACHhE,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEC,OAAO,CAAC4D;AADT,WAAD,CAAR;AAGH;AACJ,OAZL,EAYOC,KAZP,CAYa,UAAA3C,IAAI,EAAI;AACjBzB,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEC,OAAO,CAAC4D;AADT,SAAD,CAAR;AAGH,OAhBD;AAiBH,KAjCgC;AAAA,GAA1B;;;;AAmCA,MAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACX,oBAAD;AAAA,WAA0B,UAAC1D,QAAD,EAAWC,QAAX,EAAwB;AAC7E,UAAI,CAACyD,oBAAL,EAA2B;AACvBtD,QAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACAqD,QAAAA,oBAAoB,GAAG,8CAA6BzD,QAAQ,EAArC,CAAvB;AACH;;AACDD,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEC,OAAO,CAAC+D;AADT,OAAD,CAAR;;AAGAT,yBAAUU,aAAV,CAAwB;AAACb,QAAAA,oBAAoB,EAApBA;AAAD,OAAxB,EACKK,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,YAAIA,QAAJ,EAAc;AACVhE,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEC,OAAO,CAACiE,wBADT;AAEL/C,YAAAA,IAAI,EAAEuC;AAFD,WAAD,CAAR;AAIH,SALD,MAKO;AACHhE,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEC,OAAO,CAACkE;AADT,WAAD,CAAR;AAGH;AACJ,OAZL,EAYOL,KAZP,CAYa,UAAA3C,IAAI,EAAI;AACjBzB,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEC,OAAO,CAACkE;AADT,SAAD,CAAR;AAGH,OAhBD;AAiBH,KAzB8B;AAAA,GAAxB;;;;AA2BA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAC9E,aAAD,EAAe+E,KAAf,EAAsBC,YAAtB;AAAA,WAAsC,UAAC5E,QAAD,EAAUC,QAAV,EAAsB;AACnFG,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BT,aAA5B,EAA2C+E,KAA3C,EAAkDC,YAAlD;AACA5E,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAACC,OAAO,CAACsE,YAAd;AAA2BjF,QAAAA,aAAa,EAAbA,aAA3B;AAA0C+E,QAAAA,KAAK,EAALA,KAA1C;AAAiDC,QAAAA,YAAY,EAAZA;AAAjD,OAAD,CAAR;AACH,KAH0B;AAAA,GAApB;;;;AAKA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAAClF,aAAD,EAAe+E,KAAf,EAAsBC,YAAtB;AAAA,WAAsC,UAAC5E,QAAD,EAAUC,QAAV,EAAsB;AACjFG,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BT,aAA1B,EAAwC+E,KAAxC,EAA+CC,YAA/C;AACA5E,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAACC,OAAO,CAACwE,UAAd;AAAyBnF,QAAAA,aAAa,EAAbA,aAAzB;AAAuC+E,QAAAA,KAAK,EAALA,KAAvC;AAA8CC,QAAAA,YAAY,EAAZA;AAA9C,OAAD,CAAR;AACH,KAHwB;AAAA,GAAlB;;;;AAIA,MAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,WAAK,UAAChF,QAAD,EAAUC,QAAV,EAAsB;AACzDD,MAAAA,QAAQ,CAAC;AAACM,QAAAA,IAAI,EAACC,OAAO,CAAC0E;AAAd,OAAD,CAAR;AACH,KAFiC;AAAA,GAA3B",
    "sourcesContent": ["import * as ACTIONS from \"../actionTypes\";\nimport {addToCart, addInstallmentSalesOfGoodsToCart} from './cart';\nimport {clearAddTerminalToOfferFromSessionStorage} from \"eshop/modules/cart/actions/cart\";\nimport {\n    getCheckMsisdnResult,\n    getClientContext,\n    getMsisdnVerificationNeeded,\n    getSelectedFilters,\n    getSelectedOfferType,\n    getSelectedProcessTypeValue,\n    getMarketContext,\n    getVerifiedMsisdn\n} from \"../selectors/filters\";\nimport {getAddTerminalToOfferBundleNo} from \"eshop/modules/cart/selectors\";\nimport {doSmsAuthorization, doSmsAccountVerification, showError} from \"eshop/modules/auth/actions/authorization\";\nimport OnlineUtils from \"eshop/utils/OnlineUtils\";\nimport {doOpenVerificationModal, reloadProductList, checkMsisdnAndGetOffersAndAddToCart} from \"eshop/modules/simfree/actions/filter\";\nimport {\n    getCurrentSelectedAvailableProductsKey,\n    getFirstAvailableProductsKey,\n    getProductDataForVariantId,\n    getSelectedVariant,\n    getVerificationNeeded,\n    isProductDetailsPage,\n    isProductListPage\n} from \"eshop/modules/simfree/selectors\";\nimport {\n    getBaseRatePlanIdByPropositionId,\n    getCurrentDeviceInstalmentsCountValue,\n    getDeviceInstalmentsConfigurationInContext,\n    getDeviceInstalmentsCountValueByPropositionId,\n    getOfferDataInContextForPropositionId,\n    getPropositionIdByRatePlanId,\n    getOffersForCurrentFilters\n} from \"../selectors/offers\";\nimport DataLayerUtils from \"eshop/utils/DataLayerUtils\";\nimport {getAddFromLink, getUrlParametersUsed} from \"eshop/modules/configurator/selectors/metaData\";\nimport {urlParametersUsed} from \"./filters\";\nimport {getSelectedOffer,getSelectedDeviceId} from \"eshop/modules/configurator/selectors/offers\";\n//Prosze nie dispatchowac zadnych akcji na krzywy ryj, glownie chodzi o to zeby rownie rateplanBaseProductId bylo wysylane ta akcja.\n//W przeciwnym razie zrobi sie w storze jebnik z rateplanBaseProductId i zle rzeczy sie zadzieja\n//Ewentualnie dorzucac tez rateplanBaseProductId do tej akcji to bedzie git\nimport RemoteApi from \"../remoteApi\";\nimport {getAssistModeStateData} from \"../../checkout/selectors\";\nimport {fetchIfActivePickupFromShelf} from \"../../simfree/actions/app\";\nimport {getSalesChannel} from \"../../auth/selectors/authorization\";\nimport {bodyLoaderEvent, gotoCartSummary} from \"eshop/modules/checkout/actions/app\";\nimport {doCloseVerificationModal} from \"../../simfree/actions/filter\";\n\nconst selectOfferMetaAction = (propositionId, position = -1, deviceId = \"\",\n                               rateplanBaseProductId) => (dispatch, getState) => {\n    const rateplanBaseProductId = rateplanBaseProductId || getBaseRatePlanIdByPropositionId(propositionId)(getState());\n    const avaliableInstalmentCount = getDeviceInstalmentsCountValueByPropositionId(propositionId)(getState());\n    setAvailableInstalment(propositionId)(dispatch, getState());\n    console.log(\"OFFERSELECTEDDD \", propositionId, rateplanBaseProductId, deviceId);\n    if(rateplanBaseProductId) {\n        dispatch({\n            type: ACTIONS.SELECT_OFFER,\n            rateplanBaseProductId,\n            propositionId,\n            deviceId,\n            position,\n            urlParametersUsed: getUrlParametersUsed(getState())\n        });\n    }\n    fetchIfActivePickupFromShelf(dispatch, getState)\n};\nexport const selectOffer = (propositionId, position, deviceId, rateplanBaseProductId) => (dispatch, getState) => {\n    console.warn(\"selectOffer marketContext\", getMarketContext(getState()));\n    DataLayerUtils.pushAddToCartProductClickOfferEvent(getOfferDataInContextForPropositionId(propositionId)(getState()), getSelectedFilters(getState()), getProductDataForVariantId(deviceId)(getState()), deviceId, position, getMarketContext(getState()), getSalesChannel(getState()),getAssistModeStateData(getState()));\n    DataLayerUtils.pushAddToCartOfferEvent(getOfferDataInContextForPropositionId(propositionId)(getState()), getSelectedFilters(getState()), getProductDataForVariantId(deviceId)(getState()), deviceId, position, getMarketContext(getState()), getSalesChannel(getState()), getAssistModeStateData(getState()));\n    console.log(\"selectOffer\", propositionId, deviceId);\n    dispatch(selectOfferMetaAction(propositionId, position, deviceId, rateplanBaseProductId));\n\n    if(\"WWW\" === getSalesChannel(getState())){\n        if (getVerifiedMsisdn(getState())) {//verifiedMsisdn set in sessionStorage by PWA\n            dispatch(doSmsAccountVerification());\n        } else {\n            dispatch(doSmsAuthorization());\n        }\n    } else {\n        let process = getSelectedProcessTypeValue(getState());\n        if ((getMsisdnVerificationNeeded(getState()) && getVerifiedMsisdn(getState()))\n            || ['ACTIVATION', 'SALE_OF_GOODS', 'INSTALMENT_SALES_OF_GOODS_NC'].includes(process)) {\n            dispatch(addToCart());\n        } else if ('INSTALMENT_SALES_OF_GOODS' === process) {\n            dispatch(addInstallmentSalesOfGoodsToCart());\n        } else {\n            dispatch(doOpenVerificationModal());\n        }\n    }\n};\n\nexport const carouselPreparing = () => (dispatch, getState) => {\n    dispatch({type: ACTIONS.CAROUSEL_PREPARING});\n}\nexport const carouselReady = () => (dispatch, getState) => {\n    dispatch({type: ACTIONS.CAROUSEL_READY});\n}\nexport const tryAddToCartFromLink = () => (dispatch, getState) => {\n    if (getAddFromLink(getState())) {\n        let propositionId = OnlineUtils.getParameterValueFromUrl('propositionId');\n        let serviceplan = OnlineUtils.getParameterValueFromUrl('serviceplan');\n        let deviceId = OnlineUtils.getParameterValueFromUrl('chosenDevice');\n        if (propositionId) {\n            serviceplan = getBaseRatePlanIdByPropositionId(propositionId)(getState());\n        } else if (serviceplan) {\n            let data = getOffersForCurrentFilters(getState())\n            propositionId = getPropositionIdByRatePlanId(serviceplan, data);\n        }\n        console.log(\"Try to auto add ***************************************************\");\n        console.log(propositionId);\n        console.log(serviceplan);\n        console.log(deviceId);\n        dispatch(selectOffer(propositionId, -1, deviceId, serviceplan));\n    }\n};\n\n\nexport const setCartConfigurationFromUrl = () => (dispatch, getState) => {\n\n    if (OnlineUtils.getParameterValueFromUrl('autoadd')) {\n        const serviceplan = OnlineUtils.getParameterValueFromUrl('serviceplan');\n        const propositionId = OnlineUtils.getParameterValueFromUrl('propositionId');\n        const deviceId = OnlineUtils.getParameterValueFromUrl('chosenDevice');\n        dispatch({\n                type: ACTIONS.ADD_FROM_LINK,\n                serviceplan,\n                deviceId,\n                propositionId\n            }\n        );\n    }\n};\nexport const preSelectOffer = (propositionId, position, deviceId) => (dispatch, getState) => {\n    console.log(\"PRESELECT OFFER **********************,\", propositionId);\n\n    dispatch(selectOfferMetaAction(propositionId, position, deviceId));\n    const selectedOffer = getSelectedOffer(getState());\n    if (selectedOffer) {\n        if (isProductDetailsPage(getState())) {\n\n            DataLayerUtils.pushProductDetailsView(selectedOffer, getSelectedOfferType(getState()), getClientContext(getState()), getSelectedVariant(getState()), getMarketContext(getState()), getSalesChannel(getState()), getAssistModeStateData(getState()));\n        } else {\n            //other datalayer\n\n        }\n    }\n};\nexport const setSelectedOffer = (propositionId) => (dispatch) => dispatch(selectOfferMetaAction(propositionId));\n\nexport const setSelectedOfferForProductList = (propositionId) => (dispatch) => {\n    console.log(\"setSelectedOfferForProductList\", propositionId);\n    dispatch(selectOfferMetaAction(propositionId));\n    dispatch(reloadProductList());\n};\nconst setAvailableInstalment = (propositionId) => (dispatch, state) => {\n    const avaliableInstalmentCount = getDeviceInstalmentsCountValueByPropositionId(propositionId)(state);\n    let currentInstalmentCountValue = getCurrentDeviceInstalmentsCountValue(state);\n    if (avaliableInstalmentCount.indexOf(parseInt(currentInstalmentCountValue)) > -1) {\n        console.log(\"currently set instalmentCountValue accurate: DO NOTHING\");\n    } else {\n        console.log(\"currently set instalmentCountValue not available: CHANGE \");\n        let defaultInstallmentNumber = getDeviceInstalmentsConfigurationInContext(state) && getDeviceInstalmentsConfigurationInContext(state)['default'];\n        let deviceInstallmentsCount = (avaliableInstalmentCount && avaliableInstalmentCount.length > 0 && avaliableInstalmentCount.includes(defaultInstallmentNumber)) ? defaultInstallmentNumber : null;\n        dispatch({\n            type: ACTIONS.SELECT_DEVICE_INSTALMENTS_COUNT,\n            deviceInstalmentsCount: deviceInstallmentsCount\n        });\n    }\n};\nexport const setSelectedDeviceInstalmentsCountForProductList = (deviceInstalmentsCount) => (dispatch) => {\n    dispatch({\n        type: ACTIONS.SELECT_DEVICE_INSTALMENTS_COUNT,\n        deviceInstalmentsCount\n    });\n\n    dispatch(reloadProductList());\n};\n\n\nexport function setDeviceInstallmentsInSessionForMagnum(deviceInstalmentsCount) {\n    return (dispatch) => {\n        dispatch({\n            type: ACTIONS.SET_DEVICE_INSTALMENTS_COUNT_IN_SESSION_STORAGE,\n            deviceInstalmentsCount: deviceInstalmentsCount\n        })\n    }\n}\n\n\nexport const pickDevice = (propositionId, url, position) => (dispatch, getState) => {\n    dispatch(clearAddTerminalToOfferFromSessionStorage());\n    dispatch(clearDeviceInstalmentsCountFromSessionStorage());\n    dispatch(urlParametersUsed);\n    dispatch(selectOfferMetaAction(propositionId));\n    DataLayerUtils.pushProductClickEvent(getOfferDataInContextForPropositionId(propositionId)(getState()), getSelectedFilters(getState()), position,null, getMarketContext(getState()), getSalesChannel(getState()), getAssistModeStateData(getState()));\n    OnlineUtils.pageRedirect(url);\n};\n\nexport const clearPropositionId = () => ({\n    type: ACTIONS.CLEAR_OFFER\n});\n\nexport const setDeviceInstalmentsConfiguration = (deviceInstalmentsConfiguration) => ({\n    type: ACTIONS.SET_DEVICE_INSTALMENTS_CONFIGURATION,\n    deviceInstalmentsConfiguration\n});\n\n\n\nexport const pickDeviceB2B = (url) => (dispatch, getState) => {\n\n    /*Temporary*/\n    //let first = parameters[0]\n    //dispatch({processType: first.processType, type: ACTIONS.SELECT_PROCESS_TYPE})\n    //dispatch(pickDevice(first.offer.id, url))\n    OnlineUtils.pageRedirect(url);\n}\nexport const clearDeviceInstalmentsCountFromSessionStorage = () => ({\n    type: ACTIONS.CLEAR_DEVICE_INSTALMENTS_COUNT_FROM_SESSION_STORAGE\n})\n\nexport const fetchContractRole = (availableProductsKey) => (dispatch, getState) => {\n    let marketContext = getMarketContext(getState())\n    if([\"B2B\", \"B2C\"].indexOf(marketContext) === -1){\n       console.log(\"market context is not B2B (\"+marketContext+\"). fetchContractRole action skipped\")\n       return\n    }\n\n    availableProductsKey = availableProductsKey || getCurrentSelectedAvailableProductsKey(getState()) || getFirstAvailableProductsKey(getState());\n    if (!availableProductsKey) {\n        console.log(\"no availableProductsKey. fetchContractRole action skipped\")\n        return\n    }\n\n    dispatch({\n        type: ACTIONS.GET_CONTRACT_ROLE_START\n    })\n    RemoteApi.getContractRole({availableProductsKey})\n        .then(response => {\n            if (response.roles) {\n                dispatch({\n                    type: ACTIONS.GET_CONTRACT_ROLE_RESPONSE,\n                    data: response,\n                })\n            } else {\n                dispatch({\n                    type: ACTIONS.GET_CONTRACT_ROLE_ERROR\n                })\n            }\n        }).catch(data => {\n        dispatch({\n            type: ACTIONS.GET_CONTRACT_ROLE_ERROR\n        })\n    })\n}\n\nexport const fetchFirstOffer = (availableProductsKey) => (dispatch, getState) => {\n    if (!availableProductsKey) {\n        console.log(\"no availableProductsKey. fetchFirstOffer action skipped\")\n        availableProductsKey = getFirstAvailableProductsKey(getState());\n    }\n    dispatch({\n        type: ACTIONS.GET_FIRST_OFFER_START\n    })\n    RemoteApi.getFirstOffer({availableProductsKey})\n        .then(response => {\n            if (response) {\n                dispatch({\n                    type: ACTIONS.GET_FIRST_OFFER_RESPONSE,\n                    data: response,\n                })\n            } else {\n                dispatch({\n                    type: ACTIONS.GET_FIRST_OFFER_ERROR\n                })\n            }\n        }).catch(data => {\n        dispatch({\n            type: ACTIONS.GET_FIRST_OFFER_ERROR\n        })\n    })\n}\n\nexport const unselectVas = (propositionId,vasId, rateplanName) =>(dispatch,getState) =>{\n    console.log(\"UNSELECT VAS \",propositionId, vasId, rateplanName);\n    dispatch({type:ACTIONS.UNSELECT_VAS,propositionId, vasId, rateplanName});\n};\n\nexport const selectVas = (propositionId,vasId, rateplanName) =>(dispatch,getState) =>{\n    console.log(\"SELECT VAS \",propositionId,vasId, rateplanName);\n    dispatch({type:ACTIONS.SELECT_VAS,propositionId,vasId, rateplanName});\n};\nexport const clearSelectedVases = () =>(dispatch,getState) =>{\n    dispatch({type:ACTIONS.CLEAR_SELECTED_VASES});\n};\n\n"],
    "file": "offers.js"
}