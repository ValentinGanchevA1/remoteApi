{
    "version": 3,
    "sources": ["../../../../../../../es6/eshop/modules/core/components/ui/ExpanderFromHtml.jsx"],
    "names": ["EXPANDER_PLACEHOLDER", "EXPANDER_SECTION_CONTENT_ID_PREFIX", "ExpanderFromHtml", "props", "html", "indexOf", "value", "hasExpander", "replace", "OnlineUtils", "generateUniqeHtmlId", "htmlWithExpanderId", "window", "DOMParser", "xmlDoc", "parseFromString", "err", "getElementsByTagName", "length", "children", "parsedXml", "parseXml", "sectionHeader", "labelShow", "labelHide", "expanderClassName", "className", "join", "Array", "from", "map", "element", "outerHtmlForValue", "__html", "outerHTML", "id", "innerHtmlForValue", "PureComponent", "propTypes", "PropTypes", "string", "defaultProps"],
    "mappings": "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",
    "sourcesContent": ["import React, {PureComponent} from \"react\";\nimport OnlineUtils from \"eshop/utils/OnlineUtils\";\nimport PropTypes from \"prop-types\";\nimport {Expander, Section, Trigger} from \"./Expander\";\n\nconst EXPANDER_PLACEHOLDER = \"EXPANDER-ID-PLACEHOLDER\";\nconst EXPANDER_SECTION_CONTENT_ID_PREFIX = \"expanderSectionContent_\";\n\nclass ExpanderFromHtml extends PureComponent {\n\n    hasExpander() {\n        return this.props.html && this.props.html.indexOf(EXPANDER_PLACEHOLDER) >= 0;\n    }\n\n    htmlWithExpanderId(value) {\n        if (this.hasExpander()) {\n            value = value.replace(EXPANDER_PLACEHOLDER, OnlineUtils.generateUniqeHtmlId(EXPANDER_SECTION_CONTENT_ID_PREFIX));\n        }\n        return value;\n    }\n\n    parseXml() {\n        let value = this.htmlWithExpanderId(this.props.html);\n        if (window.DOMParser) {\n            let xmlDoc;\n            try {\n                xmlDoc = new DOMParser().parseFromString(value, \"text/xml\");\n            } catch (err) {\n                return null;\n            }\n            if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n                return null;\n            }\n            if (xmlDoc.children && xmlDoc.children[0]) {\n                return xmlDoc.children[0];\n            }\n            return null;\n        }\n        return null;\n    }\n\n    render() {\n        const parsedXml = this.hasExpander() && this.parseXml();\n        if (parsedXml) {\n\n            const sectionHeader = <Trigger>\n                <span className=\"js-expander__trigger--hide\">{this.props.labelShow}</span>\n                <span className=\"js-expander__trigger--show\">{this.props.labelHide}</span>\n            </Trigger>;\n\n            const expanderClassName = [\n                this.props.className,\n                parsedXml.className\n            ].join(' ');\n\n            return (\n                <Expander scrollToSelected={false} className={expanderClassName}>\n                    {Array.from(parsedXml.children).map(element => {\n                        let outerHtmlForValue = {__html: element.outerHTML};\n\n                        if (element.id.indexOf(EXPANDER_SECTION_CONTENT_ID_PREFIX) >= 0)\n                            return (\n                                <Section headerBelow={true} header={sectionHeader}>\n                                    <div dangerouslySetInnerHTML={outerHtmlForValue}/>\n                                </Section>\n                            );\n                        return <div dangerouslySetInnerHTML={outerHtmlForValue}/>;\n                    })}\n                </Expander>\n            );\n        } else {\n            let innerHtmlForValue = {__html: this.props.html};\n            return <div className={this.props.className} dangerouslySetInnerHTML={innerHtmlForValue}/>;\n        }\n    }\n}\n\nExpanderFromHtml.propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n    html: PropTypes.string,\n    labelHide: PropTypes.string,\n    labelShow: PropTypes.string\n};\nExpanderFromHtml.defaultProps = {\n    labelHide: \"[czytaj mniej]\",\n    labelShow: \"[czytaj wiÄ™cej]\"\n};\n\nexport default ExpanderFromHtml;"],
    "file": "ExpanderFromHtml.js"
}