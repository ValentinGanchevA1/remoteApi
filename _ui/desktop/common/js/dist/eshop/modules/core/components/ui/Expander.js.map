{
    "version": 3,
    "sources": ["../../../../../../../es6/eshop/modules/core/components/ui/Expander.jsx"],
    "names": ["getTriggerClassName", "expanderId", "getContentClassName", "getParentClassName", "getTriggerId", "sectionId", "getContentId", "window", "undefined", "VARIANT_BASIC", "VARIANT_SECTION", "VARIANT_SECTION_EXPANDER", "VARIANT_CONSOLE", "VARIANT_ARROW", "PropTypeExpanderVariant", "PropTypes", "oneOf", "SECTION_CLASS_FOR_VARIANT", "TOGGLE_CLASS_FOR_VARIANT", "TRIGGER_CLASS_FOR_VARIANT", "CONTENT_CLASS_FOR_VARIANT", "Expander", "props", "id", "triggerSelector", "contentSelector", "parentClass", "newSections", "newSectionCallback", "bind", "OPL", "UI", "fire", "EVENTS", "modules", "expander", "reinit", "loadExpander", "options", "expanderPromise", "path", "ref", "className", "children", "then", "open", "Component", "propTypes", "string", "variant", "sectionClassName", "toggleClassName", "headerClassName", "contentClassName", "hideOtherElements", "bool", "scrollToSelected", "scrollToHash", "duration", "number", "easing", "defaultProps", "childContextTypes", "summaryClassName", "func", "Toggle", "context", "join", "header", "triggerClassName", "contextTypes", "Trigger", "triggerId", "expanded", "onClick", "ConsentTrigger", "expanderSectionClick", "event", "onExpand", "listNo", "sectionRenderCount", "Section", "contentId", "console", "error", "setState", "styleObject", "nextProps", "display", "$", "css", "triggerHeader", "toggle", "appendAria", "renderHeader", "summary", "parseInt", "defaultHeader", "state", "headerBelow", "node", "object"],
    "mappings": "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",
    "sourcesContent": ["import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {styleVariant, loadModule, pickProps} from \"eshop/modules/core/utils/ui\";\n\n/**\n * Expander component.\n * Usage:\n * <Expander>\n *   <Section toggle=\"Section description\">\n *     Section content\n *   </Section>\n *   <Section header={<div>Custom header <Toggle>with clickable Toggle element</Toggle></div>}>\n *     Another section\n *   </Section>\n * </Expander>\n *\n * The Expander element can contain any number of any React elements (components or html tags) along with any number of Section elements,\n * so the following structure is valid:\n * <Expander>\n *   <div>Header</div>\n *   <Section toggle=\"Section 1\">Section content</Section>\n *   <div className=\"separator\"/>\n *   <Section toggle=\"Section 2\">Section content</Section>\n *   <div>Footer</div>\n * </Expander>\n *\n * Section elements will not work properly when used outside of an Expander element.\n *\n * A section needs to have either 'toggle' or 'header' prop specified:\n *  toggle - a React element or string that will be put in a section header as a section toggle\n *  header - a React element that will be used as a custom header; should contain a Toggle or Trigger element,\n *           which will be the only clickable element of the header\n *\n * The following structure is created using this component, corresponding to structure in UI examples:\n * <Expander>\n *   <Section>\n *     <Header>\n *       <Toggle|Trigger/>\n *     </Header>\n *     <Content/>\n *   <Section>\n * </Expander>\n *\n * Class names can be provided for different levels of the expander structure:\n *  Expander (container):\n *    <Expander className=\"...\">\n *  Section:\n *    <Section className=\"...\">\n *    <Expander sectionClassName=\"...\">\n *  Header:\n *    <Section headerClassName=\"...\">\n *    <Expander headerClassName=\"...\">\n *  Toggle:\n *    <Toggle className=\"...\">\n *    <Section toggleClassName=\"...\">\n *    <Expander toggleClassName=\"...\">\n *  Content:\n *    <Section contentClassName=\"...\">\n *    <Expander contentClassName=\"...\">\n *\n * Class name definitions on higher up elements are treated as defaults for its scope and can be overriden on the elements.\n * For example, sectionClassName on Expander element will be used for every section that doesn't have its own className.\n *\n * Expander\n *\n * Additional options: see opl-expander module, all options are passed from props\n * TODO:\n * - switch triggers\n * - radio label\n * - fix stopping and starting all modules inside (needs fixing in styleguide js API)\n **/\n\n\n// Dynamic expander classes enable nested expanders\nconst getTriggerClassName = expanderId => expanderId + \"__expander-trigger\";\nconst getContentClassName = expanderId => expanderId + \"__content\";\nconst getParentClassName = expanderId => expanderId + \"--togglable\";\nconst getTriggerId = (expanderId, sectionId) => expanderId + \"-section-\" + sectionId + \"-trigger\";\nconst getContentId = (expanderId, sectionId) => expanderId + \"-section-\" + sectionId + \"-content\";\n\n// static id counters - manually declaring ids for react components is usually unnecessary\n\n\n\nwindow.expanderId = ((window.expanderId!= undefined)?window.expanderId + 1 : 1);\nwindow.sectionId = ((window.sectionId!= undefined)?window.sectionId + 1 : 1);\n\n\n\nconst VARIANT_BASIC = \"\";\nconst VARIANT_SECTION = \"section\";\nconst VARIANT_SECTION_EXPANDER = \"section_expander\";\nconst VARIANT_CONSOLE = \"console\";\nconst VARIANT_ARROW = \"arrow\"\nconst PropTypeExpanderVariant = PropTypes.oneOf([VARIANT_BASIC, VARIANT_SECTION, VARIANT_CONSOLE, VARIANT_SECTION_EXPANDER]);\n\n// expander variant base CSS class configuration\nconst SECTION_CLASS_FOR_VARIANT = {\n    [VARIANT_BASIC]: \"\",\n    [VARIANT_SECTION]: \"opl-section opl-section--togglable\",\n    [VARIANT_SECTION_EXPANDER]: \"opl-section opl-section--expander\",\n    [VARIANT_CONSOLE]: \"opl-console--togglable\"\n};\n\nconst TOGGLE_CLASS_FOR_VARIANT = {\n    [VARIANT_BASIC]: \"\",\n    [VARIANT_SECTION]: \"opl-section__heading\",\n    [VARIANT_SECTION_EXPANDER]: \"opl-section__heading\",\n    [VARIANT_CONSOLE]: \"opl-console__heading\",\n    [VARIANT_ARROW]: \"\"\n};\n\nconst TRIGGER_CLASS_FOR_VARIANT = {\n    [VARIANT_BASIC]: \"\",\n    [VARIANT_SECTION]: \"opl-section__expander-trigger\",\n    [VARIANT_SECTION_EXPANDER]: \"opl-section__expander-trigger\",\n    [VARIANT_CONSOLE]: \"opl-console__trigger\"\n};\n\nconst CONTENT_CLASS_FOR_VARIANT = {\n    [VARIANT_BASIC]: \"u-hide--soft\",\n    [VARIANT_SECTION]: \"opl-section__content\",\n    [VARIANT_SECTION_EXPANDER]: \"opl-section__content\",\n    [VARIANT_CONSOLE]: \"opl-console__content\"\n}\n\nexport class Expander extends Component {\n    constructor(props) {\n        super(props);\n        this.id = props.id || \"react-expander-\" + window.expanderId++;\n        this.triggerSelector = \".\" + getTriggerClassName(this.id);\n        this.contentSelector = \".\" + getContentClassName(this.id);\n        this.parentClass = getParentClassName(this.id);\n        this.newSections = 0;\n    }\n\n    newSectionCallback() {\n        this.newSections += 1;\n    }\n\n    getChildContext() {\n        return {\n            expanderId: this.id,\n            newSectionCallback: this.newSectionCallback.bind(this),\n            ...pickProps(this.props, [\"toggleClassName\", \"headerClassName\", \"summaryClassName\", \"sectionClassName\", \"contentClassName\", \"variant\"])\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.newSections > 0) {\n            OPL.UI.fire(OPL.UI.EVENTS.modules.expander.reinit, null, this.id);\n            this.newSections = 0;\n        }\n    }\n\n    componentDidMount() {\n        this.loadExpander();\n    }\n\n    loadExpander() {\n        let options = {\n                triggerSelector: this.triggerSelector,\n                contentSelector: this.contentSelector,\n                parentClass: this.parentClass,\n                ...pickProps(this.props, [\"hideOtherElements\", \"scrollToSelected\", \"scrollToHash\", \"duration\", \"easing\", \"switchTrigger\", \"switchTriggerVal\"])\n            };\n        this.expanderPromise = loadModule(this.expander, {\n            path: \"common/modules/opl-expander\",\n            options\n        });\n    }\n\n    render() {\n        return (\n            <div ref={ref => this.expander = ref} className={this.props.className+ \" is-expanded\"} id={this.id}>\n                {this.props.children}\n            </div>\n        );\n    }\n\n    // This is created as a workaround\n    // TODO introduce a way to create \"controlled\" expanders that would enable passing 'open' flag and open/close/toggle handlers\n    open(sectionId) {\n        this.expanderPromise.then(() => {\n            OPL.UI.fire(OPL.UI.EVENTS.modules.expander.open, getTriggerId(this.id, sectionId), this.id);\n        });\n    }\n}\n\nExpander.propTypes = {\n    id: PropTypes.string,\n    variant: PropTypeExpanderVariant,\n    className: PropTypes.string,\n    sectionClassName: PropTypes.string,\n    toggleClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    contentClassName: PropTypes.string,\n    hideOtherElements: PropTypes.bool,\n    scrollToSelected: PropTypes.bool,\n    scrollToHash: PropTypes.bool,\n    duration: PropTypes.number,\n    easing: PropTypes.string\n}\n\nExpander.defaultProps = {\n    variant: VARIANT_BASIC\n};\n\nExpander.childContextTypes = {\n    // used to wire triggers and sections\n    expanderId: PropTypes.string,\n    // default values for sections\n    sectionClassName: PropTypes.string,\n    toggleClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    summaryClassName: PropTypes.string,\n    contentClassName: PropTypes.string,\n    // workaround to reset handlers for dynamically loaded sections\n    newSectionCallback: PropTypes.func,\n    variant: PropTypeExpanderVariant\n};\n\nexport class Toggle extends Component {\n    render() {\n        let toggleClassName = [\n                TOGGLE_CLASS_FOR_VARIANT[this.props.variant || this.context.variant],\n                (this.props.className || this.context.toggleClassName || \"\")\n            ].join(\" \");\n        return (\n            <div className={\"l-col-small-11 \" + toggleClassName}>\n                {(this.props.variant === \"arrow\" ) && this.props.header}\n                <Trigger className={this.props.triggerClassName} {...this.props}>\n                    {this.props.children}\n                </Trigger>\n            </div>\n        );\n    }\n}\n\nToggle.contextTypes = {\n    toggleClassName: PropTypes.string,\n    triggerClassName: PropTypes.string,\n    variant: PropTypeExpanderVariant\n};\n\nexport class Trigger extends Component {\n    render() {\n        let triggerId = getTriggerId(this.context.expanderId, this.context.sectionId);\n        let triggerClassName = [\n                TRIGGER_CLASS_FOR_VARIANT[this.context.variant],\n                getTriggerClassName(this.context.expanderId),\n                this.props.className || \"\"\n            ].join(\" \");\n        return (\n            <a href=\"#\" id={triggerId} className={triggerClassName+\" \"+!!this.props.expanded } onClick={this.props.onClick} aria-expanded={!!this.props.expanded}>\n                {this.props.children}\n            </a>\n        );\n    }\n}\n\nTrigger.contextTypes = {\n    expanderId: PropTypes.string,\n    sectionId: PropTypes.string,\n    variant: PropTypeExpanderVariant\n};\n\nexport class ConsentTrigger extends Component {\n    render() {\n        let triggerId = getTriggerId(this.context.expanderId, this.context.sectionId);\n        let triggerClassName = [\n                TRIGGER_CLASS_FOR_VARIANT[this.context.variant],\n                getTriggerClassName(this.context.expanderId),\n                this.props.className || \"\"\n            ].join(\" \");\n\n        return (\n            <a href=\"#\" id={triggerId} o className={triggerClassName+\" \"+!!this.props.expanded } aria-expanded={!!this.props.expanded}\n                onClick={this.expanderSectionClick.bind(this)}>\n                {this.props.children}\n            </a>\n        );\n    }\n\n    expanderSectionClick(event) {\n        this.props.onClick(event);\n        this.props.onExpand(this.props.listNo);\n    }\n};\n\nConsentTrigger.contextTypes = {\n    expanderId: PropTypes.string,\n    sectionId: PropTypes.string,\n    variant: PropTypeExpanderVariant,\n    onExpand: PropTypes.func,\n    listNo: PropTypes.listNo\n};\n\nConsentTrigger.defaultProps = {\n    onExpand: function(){}\n};\n\n//Section render initially not expanded. If you want to make it initially expanded pass BOTH \"styleObject\" and \"expanded\" params.\nvar sectionRenderCount=[];\nexport class Section extends Component {\n    constructor(props, context) {\n        super(props, context);\n        let id =window.sectionId++;\n        this.id = props.id || \"react--section-\" + id;\n        this.contentId = getContentId(context.expanderId, id);\n\n    }\n    componentDidCatch(){\n        console.error(\"SECTION \"+this.id+\" error\");\n    }\n    getChildContext() {\n        return {\n            sectionId: this.id,\n            variant: this.props.variant || this.context.variant\n        };\n    }\n    componentWillMount(){\n        this.setState({expanded:false});\n    }\n    componentDidMount() {\n        this.context.newSectionCallback();\n        sectionRenderCount[this.id]=0;\n        this.setState({styleObject:{}})\n    }\n\n    componentWillUpdate(nextProps){\n        if(nextProps.expanded!=this.props.expanded){\n            if(nextProps.expanded){\n                this.setState({expanded:true,styleObject:{display:\"block\"}});\n            }else{\n                this.setState({expanded:false});\n\n            }\n        }\n    }\n    componentDidUpdate(){\n        if(this.props.expanded){\n            $(\"#\"+this.contentId).css(\"display\",\"block\");\n        }\n    }\n    renderHeader() {\n        let variant = this.props.variant === \"section_expander\" ? \"section\" : this.props.variant;\n        let headerClassName = [\n                styleVariant(\"opl-\", variant || this.context.variant, \"__header\"),\n                this.props.headerClassName || this.context.headerClassName || \"\",\n                this.props.triggerHeader && getTriggerClassName(this.context.expanderId)\n            ].join(\" \");\n\n        if (this.props.header) {\n            return (\n                <div className={headerClassName}>\n                    {this.props.header}\n                </div>\n            )\n        } else {\n            return  (\n                <div className={headerClassName}>\n                    <Toggle contentId={this.contentId} className={this.props.toggleClassName} {...this.props}>\n                        {this.props.toggle}\n                    </Toggle>\n                </div>\n            );\n        }\n    }\n\n    defaultHeader(appendAria) {\n        if(appendAria) {\n            return(\n                <div className={this.props.summaryClassName || this.context.summaryClassName || \"\"} aria-expanded=\"true\">\n                    {this.renderHeader()}\n                    {this.props.summary}\n                </div>\n            );\n        } else {\n            return(\n                <div className={this.props.summaryClassName || this.context.summaryClassName || \"\"}>\n                    {this.renderHeader()}\n                    {this.props.summary}\n                </div>\n            );\n        }\n    }\n\n    render() {\n        sectionRenderCount[this.id]=parseInt(sectionRenderCount[this.id])+1;\n\n        let variant = this.props.variant || this.context.variant;\n        let sectionClassName = [\n                SECTION_CLASS_FOR_VARIANT[variant],\n                getParentClassName(this.context.expanderId),\n                ( this.props.expanded) ? \" is-expanded \" : \"  \",\n                this.props.className || this.context.sectionClassName || \"\"\n            ].join(\" \");\n\n        let contentClassName = [\n                CONTENT_CLASS_FOR_VARIANT[variant],\n                getContentClassName(this.context.expanderId),\n                this.props.contentClassName || this.context.contentClassName || \"\"\n            ].join(\" \");\n\n        let header = !this.props.summary ? this.renderHeader() : this.defaultHeader(this.state.expanded);\n        return (\n            <div className={sectionClassName}>\n\n                {!this.props.headerBelow && header}\n                <div id={this.contentId} className={contentClassName } style={this.props.styleObject}>\n                    {this.props.children}\n                </div>\n                {this.props.headerBelow && header}\n            </div>\n        );\n\n    }\n}\n\nSection.propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n    toggle: PropTypes.node,\n    toggleClassName: PropTypes.string,\n    header: PropTypes.node,\n    headerClassName: PropTypes.string,\n    summary: PropTypes.node,\n    contentClassName: PropTypes.string,\n    variant: PropTypeExpanderVariant,\n    triggerHeader: PropTypes.bool,\n    headerBelow: PropTypes.bool,\n    expanded: PropTypes.bool,\n    styleObject: PropTypes.object\n}\nSection.defaultProps = {\n    headerBelow: false,\n    expanded: false,\n    styleObject: {}\n}\n\nSection.childContextTypes = {\n    sectionId: PropTypes.string,\n    variant: PropTypeExpanderVariant\n}\n\nSection.contextTypes = {\n    expanderId: PropTypes.string,\n    sectionClassName: PropTypes.string,\n    toggleClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    summaryClassName: PropTypes.string,\n    contentClassName: PropTypes.string,\n    newSectionCallback: PropTypes.func,\n    variant: PropTypeExpanderVariant\n};\n"],
    "file": "Expander.js"
}