{
    "version": 3,
    "sources": ["../../../../../../../es6/eshop/modules/core/components/ui/TooltipFromHtml.jsx"],
    "names": ["tooltipPlaceholder", "TooltipFromHtml", "element", "OPL", "UI", "loadModules", "path", "options", "props", "width", "stopModules", "hasTooltip", "loadModule", "document", "getElementById", "tooltipId", "tContainer", "tooltipContainerId", "stopModule", "html", "tooltipIdValue", "undefined", "OnlineUtils", "generateUniqeHtmlId", "value", "replace", "innerHtmlForValue", "__html", "htmlWithTooltipId", "className", "indexOf", "formatDescriptionValue", "Component"],
    "mappings": "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",
    "sourcesContent": ["import React, {Component} from \"react\";\nimport OnlineUtils from \"eshop/utils/OnlineUtils\";\n\nconst tooltipPlaceholder = \"TOOLTIP-ID-PLACEHOLDER\";\n\nclass TooltipFromHtml extends Component {\n    static hasTooltip(html) {\n        return html && html.indexOf(tooltipPlaceholder) >= 0;\n    }\n\n    static conditionalRender(value, width = 300) {\n        value = TooltipFromHtml.formatDescriptionValue(value);\n        if (TooltipFromHtml.hasTooltip(value)) {\n            return (\n                <TooltipFromHtml html={value} width={width}/>\n            );\n        } else {\n            const innerHtmlForValue = {__html: value};\n            return (\n                <p dangerouslySetInnerHTML={innerHtmlForValue}/>\n            );\n        }\n    }\n\n    static conditionalRenderWithClassName(value, className, width = 300) {\n        if (TooltipFromHtml.hasTooltip(value)) {\n            return (\n                <TooltipFromHtml className={className} html ={value} width={width}/>\n            );\n        } else {\n            const innerHtmlForValue = {__html: value};\n            return (\n                <p className={className} dangerouslySetInnerHTML={innerHtmlForValue} />\n            );\n        }\n    }\n\n    static formatDescriptionValue(value) {\n        if (typeof value === \"string\") {\n            return value.replace(/\\\\n/g, \"<br>\");\n        }\n        return value;\n    }\n\n    loadModule(element) {\n        OPL.UI.loadModules(element, [{\n            path: \"core/modules/tooltips\",\n            options: {\"mouseoverMinWidth\": 0, \"triggerEvent\": \"mouseover\", \"maxWidth\": this.props.width},\n        }]);\n    }\n\n    stopModule(element) {\n        OPL.UI.stopModules(element);\n    }\n\n    componentDidMount() {\n        if (this.hasTooltip()) {\n            this.loadModule(document.getElementById(this.tooltipId()));\n        }\n    }\n\n    componentWillUpdate() {\n        if (this.hasTooltip()) {\n            const tContainer = document.getElementById(this.tooltipContainerId());\n            this.stopModule(tContainer);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.hasTooltip()) {\n            this.loadModule(document.getElementById(this.tooltipId()));\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.hasTooltip()) {\n            const tContainer = document.getElementById(this.tooltipContainerId());\n            OPL.UI.stopModules(tContainer);\n        }\n    }\n\n    hasTooltip() {\n        return TooltipFromHtml.hasTooltip(this.props.html);\n    }\n\n    tooltipId() {\n        if (this.tooltipIdValue === undefined)\n            this.tooltipIdValue = OnlineUtils.generateUniqeHtmlId(\"tooltipFromHtml_\");\n        return this.tooltipIdValue;\n    }\n\n    tooltipContainerId() {\n        return this.tooltipId() + \"-container\";\n    }\n\n    htmlWithTooltipId() {\n        let value = this.props.html;\n        if (this.hasTooltip()) {\n            value = value.replace(tooltipPlaceholder, this.tooltipId());\n        }\n\n        return value;\n    }\n\n    render() {\n        if (this.hasTooltip()) {\n            const innerHtmlForValue = {__html: this.htmlWithTooltipId()};\n            return (\n                <div className={this.props.className} id={this.tooltipContainerId()} dangerouslySetInnerHTML={innerHtmlForValue} />\n            );\n        } else {\n            const innerHtmlForValue = {__html: this.props.html};\n            return (\n                <p className={this.props.className} dangerouslySetInnerHTML={innerHtmlForValue} />\n            );\n        }\n    }\n}\n\nexport default TooltipFromHtml;\n"],
    "file": "TooltipFromHtml.js"
}