{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/checkout/reducers/addresses.js"],
    "names": ["replaceAddressNullValues", "data", "address", "emptyAddress", "firstName", "lastName", "companyName", "postalCode", "town", "streetName", "streetNumber", "appartmentNo", "wwtaddress", "foreigner", "townId", "streetId", "isAddressNull", "allowedField", "actionName", "main", "state", "action", "type", "CHANGE_CUSTOMER_MAINADDRESS_FORM_FIELD", "name", "value", "toUpperCase", "zipValid", "cbsId", "CHANGE_CUSTOMER_DATA_FORM_FIELD", "GET_CART_CUSTOMER_DONE", "mainAddress", "REMOVE_STREET", "GET_BPG_DATA_DONE", "correspondence", "CHANGE_CUSTOMER_CORRESPONDENCEADDRESS_FORM_FIELD", "correspondenceAddress", "delivery", "CHANGE_DELIVERY_ADDRESS_FORM_FIELD", "mappings", "CHANGE_ADDRESS", "mappedAddress", "pickedAddress", "notEmptyMainAddress", "notEmptyCorrAddress", "corrMappingVal", "addressesMatches", "a", "b", "aKeyCheck", "Object", "keys", "map", "keyA", "reduce", "v1", "v2", "bKeyCheck", "keyB", "key"],
    "mappings": "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",
    "sourcesContent": ["import {\n    CHANGE_ADDRESS, CHANGE_CUSTOMER_CORRESPONDENCEADDRESS_FORM_FIELD, CHANGE_CUSTOMER_DATA_FORM_FIELD,\n    CHANGE_CUSTOMER_MAINADDRESS_FORM_FIELD, CHANGE_DELIVERY_ADDRESS_FORM_FIELD, GET_CART_CUSTOMER_DONE,\n    GET_BPG_DATA_DONE, REMOVE_STREET\n} from \"../actionTypes\";\nimport {emptyAddress} from \"./helperObjects\";\n\nexport const replaceAddressNullValues = (data = {}, address = emptyAddress) => {\n    return ({\n        firstName: data.firstName || \"\",\n        lastName: data.lastName || \"\",\n        companyName: data.companyName || \"\",\n        postalCode: address.postalCode || \"\",\n        town: address.town || \"\",\n        streetName: address.streetName || \"\",\n        streetNumber: address.streetNumber || \"\",\n        appartmentNo: address.appartmentNo || \"\",\n        wwtaddress: data.wwtaddress || false,\n        foreigner: data.foreigner || false,\n        townId: address.townId || \"\",\n        streetId: address.streetId || \"\",\n    });\n};\n\nconst isAddressNull = (data = {}) => {\n    return data.postalCode==null\n        && data.town==null\n        && data.streetName==null\n        && data.streetNumber==null\n        && data.appartmentNo==null;\n};\n\nconst allowedField = (actionName = \"\") => {\n    return actionName === \"firstName\" || actionName === \"lastName\" || actionName === \"foreigner\" || actionName === \"companyName\";\n};\n\nexport const main = (state = emptyAddress, action) => {\n    switch(action.type) {\n        case CHANGE_CUSTOMER_MAINADDRESS_FORM_FIELD:\n            if (action.name === 'postalCode' && action.value.toUpperCase() !== state.postalCode.toUpperCase()) {\n                state.town = '';\n                state.townId = '';\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            } else if (action.name === 'town' && action.value.toUpperCase() !== state.town.toUpperCase()) {\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            }\n            const cbsId = {};\n            if (action.name === 'town') {\n                cbsId['townId'] = action.cbsId;\n            } else if (action.name === 'streetName') {\n                cbsId['streetId'] = action.cbsId;\n            }\n            return {...state, [action.name]: action.value, ...cbsId};\n        case CHANGE_CUSTOMER_DATA_FORM_FIELD:\n            if(allowedField(action.name))\n                return {...state, [action.name]: action.value};\n            return state;\n        case GET_CART_CUSTOMER_DONE:\n            if (!action.data)\n                return state;\n            return {...replaceAddressNullValues(action.data, action.data.mainAddress)};\n        case REMOVE_STREET:\n            return {...state,streetName:''};\n        case GET_BPG_DATA_DONE:\n            if (!!state.wwtaddress) {\n                return state;\n            }\n            return {...emptyAddress};\n        default:\n            return state;\n    }\n};\n\nexport const correspondence = (state = emptyAddress, action) => {\n    switch(action.type) {\n        case CHANGE_CUSTOMER_CORRESPONDENCEADDRESS_FORM_FIELD:\n            if (action.name === 'postalCode' && action.value.toUpperCase() !== state.postalCode.toUpperCase()) {\n                state.town = '';\n                state.townId = '';\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            } else if (action.name === 'town' && action.value.toUpperCase() !== state.town.toUpperCase()) {\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            }\n            const cbsId = {};\n            if (action.name === 'town') {\n                cbsId['townId'] = action.cbsId;\n            } else if (action.name === 'streetName') {\n                cbsId['streetId'] = action.cbsId;\n            }\n            return {...state, [action.name]: action.value, ...cbsId};\n        case CHANGE_CUSTOMER_DATA_FORM_FIELD:\n            if(allowedField(action.name))\n                return {...state, [action.name]: action.value};\n            return state;\n        case GET_CART_CUSTOMER_DONE:\n            if (!action.data)\n                return state;\n            return {...replaceAddressNullValues(action.data, action.data.correspondenceAddress)};\n        default:\n            return state;\n    }\n};\n\nexport const delivery = (state = emptyAddress, action) => {\n    switch (action.type) {\n        case CHANGE_DELIVERY_ADDRESS_FORM_FIELD:\n            if (action.name === 'postalCode' && action.value.toUpperCase() !== state.postalCode.toUpperCase()) {\n                state.town = '';\n                state.townId = '';\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            } else if (action.name === 'town' && action.value.toUpperCase() !== state.town.toUpperCase()) {\n                state.streetName = '';\n                state.streetId = '';\n                state.zipValid = true;\n            }\n            const cbsId = {};\n            if (action.name === 'town') {\n                cbsId['townId'] = action.cbsId;\n            } else if (action.name === 'streetName') {\n                cbsId['streetId'] = action.cbsId;\n            }\n            return {...state, [action.name]: action.value, ...cbsId};\n        case CHANGE_CUSTOMER_DATA_FORM_FIELD:\n            if(allowedField(action.name))\n                return {...state, [action.name]: action.value};\n            return state;\n        case GET_CART_CUSTOMER_DONE:\n            return {...replaceAddressNullValues(action.data)};\n        default:\n            return state;\n    }\n};\n\nexport const mappings = (state = {'correspondence': 'main', 'delivery': 'main'}, action) => {\n    switch (action.type) {\n        case CHANGE_ADDRESS:\n            return {...state, [action.mappedAddress]: action.pickedAddress};\n        case GET_CART_CUSTOMER_DONE:\n            let notEmptyMainAddress = replaceAddressNullValues(action.data, action.data.mainAddress);\n            let notEmptyCorrAddress = replaceAddressNullValues(action.data, action.data.correspondenceAddress);\n            let corrMappingVal = addressesMatches(notEmptyMainAddress, notEmptyCorrAddress) ? 'main' : 'correspondence';\n            corrMappingVal = isAddressNull(action.data.correspondenceAddress) ? 'main' : corrMappingVal;\n            corrMappingVal = action.data.wwtaddress ? 'main' : corrMappingVal;\n            return {...state, 'correspondence': corrMappingVal};\n        default:\n            return state;\n    }\n};\n\nconst addressesMatches = (a = emptyAddress, b = emptyAddress) => {\n    let aKeyCheck = Object.keys(a).map(keyA => (keyA in emptyAddress)).reduce((v1, v2) => v1 && v2);\n    let bKeyCheck = Object.keys(b).map(keyB => (keyB in emptyAddress)).reduce((v1, v2) => v1 && v2);\n    if(!(aKeyCheck && bKeyCheck)) {\n        return false;\n    }\n    return Object.keys(emptyAddress).map(key => (key in a) && (key in b) && (a[key] === b[key])).reduce((v1, v2) => v1 && v2);\n}\n"],
    "file": "addresses.js"
}