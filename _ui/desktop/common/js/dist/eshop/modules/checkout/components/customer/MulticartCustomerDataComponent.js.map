{
    "version": 3,
    "sources": ["../../../../../../../es6/eshop/modules/checkout/components/customer/MulticartCustomerDataComponent.jsx"],
    "names": ["dataComponentId", "MulticartCustomerDataView", "props", "requestCartCustomerData", "registerNextStepCondition", "componentId", "initialNationality", "setInitialNationality", "foreginerIsAvailable", "setForeignerAvailable", "nextProps", "nextState", "show", "shown", "isBusinessClient", "isSalesOfGoodsOnly", "descriptions", "businessTitle", "defaultBusinessTitle", "title", "foreignerEnabled", "foreigner", "changeCustomerDataFormFieldNoValidations", "name", "value", "noPesel", "requestRecalculateConsentsForForeigner", "defaultValue", "foreignerIdentificationMap", "find", "t", "getTitle", "bProps", "legalFormArray", "length", "undefined", "renderBusinessHeader", "renderPersonalHeader", "isB2B", "toggleForeigner", "bind", "existing", "isBzuOnlyAvailableOptionForFix", "channels", "sales", "SalesChannel", "TLS", "IDG", "__html", "Component", "propTypes", "firstName", "PropTypes", "string", "lastName", "readOnly", "bool", "companyName", "nip", "regon", "locked", "func", "changeCustomerDataFormField", "reloadSummaryOnCart", "switchForeignerMode", "oneOfType", "shape", "description", "arrayOf", "defaultProps", "MulticartCustomerDataComponent", "getCustomerDataForm"],
    "mappings": "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",
    "sourcesContent": ["import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {getCustomerDataForm} from \"../../selectors\";\nimport {changeCustomerDataFormField, changeCustomerDataFormFieldNoValidations, reloadSummaryOnCart} from \"../../actions/app\";\nimport {registerNextStepCondition, requestCartCustomerData, setInitialNationality, setForeignerAvailable} from \"../../actions/data\";\nimport MulticartCustomerBusinessDetailsDataComponent\n    from \"eshop/modules/checkout/components/customer/MulticartCustomerBusinessDetailsDataComponent\";\nimport MulticartCustomerPersonalDetailsDataComponent\n    from \"eshop/modules/checkout/components/customer/MulticartCustomerPersonalDetailsDataComponent\";\nimport {createIsAnxAndAgrDocumentsIncludedSelector}  from 'eshop/modules/documents/selectors';\nimport SalesChannel from \"../../../core/enum/SalesChannel\";\nimport {prepareForeignerIdentificationTypes} from \"../../utils/utils\";\n\nvar dataComponentId=0;\nexport class MulticartCustomerDataView extends Component {\n\n    componentDidMount() {\n        this.props.requestCartCustomerData();\n        this.props.registerNextStepCondition('customerData');\n        this.componentId=\"react-data-\"+dataComponentId++;\n        if (!!this.props.initialNationality){\n            this.props.setInitialNationality(this.props.initialNationality);\n        }\n        if (!!this.props.foreginerIsAvailable){\n            this.props.setForeignerAvailable(this.props.foreginerIsAvailable);\n        }\n    }\n\n    //Prevent re-construct subcomponent.\n    shouldComponentUpdate(nextProps, nextState) {\n        if(!this.props || this.props.show !== nextProps.shown || this.props.isBusinessClient !== nextProps.isBusinessClient || this.props.isSalesOfGoodsOnly !== nextProps.isSalesOfGoodsOnly) {\n            return true;\n        }\n        return false;\n    }\n\n    getTitle() {\n        if(this.props.isBusinessClient) {\n            return this.props.descriptions.businessTitle || this.props.defaultBusinessTitle || \"\";\n        } else {\n            return this.props.descriptions.title || \"\";\n        }\n    }\n\n    toggleForeigner() {\n            let foreignerEnabled = !this.props.foreigner;\n            this.props.changeCustomerDataFormFieldNoValidations({name: 'foreigner', value: foreignerEnabled});\n            if (this.props.noPesel) {\n                this.props.requestRecalculateConsentsForForeigner(foreignerEnabled);\n            }\n            //Temporary solution for NOR-174842\n            if (foreignerEnabled) {\n                let defaultValue = prepareForeignerIdentificationTypes(this.props.foreignerIdentificationMap).find(t=>\"RESIDENCE_CARD\" === t.value);\n                this.props.changeCustomerDataFormFieldNoValidations({name: 'identification', value: defaultValue.value});\n            }\n        }\n\n    render() {\n        let title = this.getTitle();\n        //TODO:remove when component controller logic is complete\n        let bProps = {...this.props};\n        if(this.props.legalFormArray && this.props.legalFormArray.length === 0) {\n            bProps.legalFormArray = undefined;\n        }\n        return this.props.show ?\n            <div className=\"opl-form l-table-row__wrapper\" id={this.componentId} key={ this.componentId}>\n                <div className=\"l-table-row__wrapper\">\n                    {\n                        this.props.isSalesOfGoodsOnly ? this.renderBusinessHeader(title) : this.renderPersonalHeader(title)\n                    }\n\n                    <div className=\"l-row u-no-margin-top u-spacing-top-xs u-spacing-l l-col l-col-12\" hidden={!this.props.foreginerIsAvailable || this.props.isBusinessClient || this.props.isB2B}>\n                            <label className=\"o-checkbox opl-checkbox\">\n                                <input type=\"checkbox\"\n                                    onChange={this.toggleForeigner.bind(this)}\n                                    disabled={(this.props.existing && this.props.initialNationality !== \"POL\") ||\n                                             (this.props.isBzuOnlyAvailableOptionForFix && (this.props.channels.sales === SalesChannel.TLS || this.props.channels.sales === SalesChannel.IDG))}\n                                    checked={this.props.foreigner}/>\n                                <span className=\"o-ci\"></span>\n                                <span className=\"o-ci-label\">{this.props.descriptions.foreigner}</span>\n                            </label>\n                    </div>\n\n                    {\n                        (this.props.isBusinessClient || this.props.isB2B) ?\n                            <MulticartCustomerBusinessDetailsDataComponent key=\"businessDataCmp\" {...bProps}/> :\n                            <MulticartCustomerPersonalDetailsDataComponent key=\"personalDataCmp\" {...this.props}/>\n                    }\n\n                </div>\n            </div> :\n            <div></div>\n    }\n\n    renderPersonalHeader(title){\n        return (\n            <div className=\"u-spacing-top-l u-large-spacing-xs u-medium-spacing-s u-small-spacing-s l-row l-table-row\">\n                <div key=\"personalHeader\" className=\"u-spacing-top-l l-col l-col-small-12 l-col-medium-12 l-col-12 u-no-padding\">\n                    <p className=\"h3\" dangerouslySetInnerHTML={{ __html: title }}/>\n                </div>\n            </div>\n        )\n    }\n\n    renderBusinessHeader(title){\n        return (\n            <div key=\"businessHeader\" className=\"l-row\">\n                <div className=\"l-col l-col-6 l-col-medium-6 l-col-small-12 u-margin-top\">\n                    <p className=\"h3\" dangerouslySetInnerHTML={{ __html: title }}/>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nMulticartCustomerDataView.propTypes = {\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    readOnly: PropTypes.bool,\n    companyName: PropTypes.string,\n    nip: PropTypes.string,\n    regon: PropTypes.string,\n    isBusinessClient: PropTypes.bool,\n    locked: PropTypes.bool,\n    requestCartCustomerData: PropTypes.func,\n    changeCustomerDataFormField: PropTypes.func,\n    reloadSummaryOnCart: PropTypes.func,\n    switchForeignerMode: PropTypes.func,\n    foreignerIdentificationMap: PropTypes.oneOfType([\n        PropTypes.shape({\n            value: PropTypes.string,\n            description: PropTypes.string\n        }),\n        PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.string,\n            description: PropTypes.string\n        }))\n    ])\n};\n\nMulticartCustomerDataView.defaultProps = {\n    defaultBusinessTitle: \"Dane firmy\"\n};\n\nconst MulticartCustomerDataComponent = connect(\n        getCustomerDataForm,\n        {changeCustomerDataFormField, changeCustomerDataFormFieldNoValidations, requestCartCustomerData, reloadSummaryOnCart, registerNextStepCondition, setInitialNationality, setForeignerAvailable}\n    )(MulticartCustomerDataView);\nexport default MulticartCustomerDataComponent;\n"],
    "file": "MulticartCustomerDataComponent.js"
}