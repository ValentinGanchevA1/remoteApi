{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/checkout/actions/validation.js"],
    "names": ["frontValidationErrors", "data", "type", "FRONT_VALIDATION", "validateCustomerDataFields", "dispatch", "getState", "contact", "customerData", "addressMain", "correspondenceAddressMapping", "customerContactFormValidators", "changeCustomerContactFormField", "isFieldDisabledForValidation", "addressFormValidators", "changeCustomerMainAddressFormField", "customerDataFormValidators", "changeCustomerDataFormField", "addressCorrespondence", "changeCorrespondenceAddressFormField", "validateMnpDataFields", "dataArray", "isB2B", "forEach", "OnlineUtils", "isMnpApplicationSecondStep", "processType", "mnpFormValidators", "changeCustomerMnpDataFormField", "name", "validateRepresentativeDataFields", "run", "selector", "updater", "item", "index", "Object", "keys", "value", "validate", "getRepresentativesData", "changeRepresentativeFormField", "getGrantorsData", "changeGrantorFormField", "validateData", "proceedWithCheckoutStep", "Promise", "resolve", "reject", "consentValidation", "consentDocumentsPrintState", "conditions", "customerDataValid", "representativeDataValid", "fixRepresentativeDataValid", "mnpDataValid", "mnpDataFilled", "retentionBonusesDataFilled", "invoiceDataValid", "consentsInAcknowledgmentState", "apuValidation", "checkAndFireModalValidations", "modalValidationFired", "length", "validationMsg", "push", "message", "startDate"],
    "mappings": "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",
    "sourcesContent": ["import {\n    allConsentsValid,\n    getIsCustomerDataStep,\n    getConsentDocumentsPrintState,\n    getRegisteredCheckoutConditions,\n    isCustomerDataValid,\n    isRepresentativeDataValid,\n    isMnpDataValid,\n    isMnpDataFilled,\n    isRetentionBonusesDataFilled,\n    getApuState,\n    getAddressCorrespondenceMapping,\n    getCustomerContactForm,\n    getCustomerDataToValidation,\n    getAddressMain,\n    getAddressCorrespondence,\n    getMnpData,\n    getRepresentativesData,\n    getGrantorsData,\n    getGrantingDate,\n    isRegisteredAgreementConfirmationComponent,\n    wasBigAndZonkAgreementConfirmationModalConfirmed,\n    areConsentsWithBonusesAccepted,\n    isFixRepresentativeDataValid,\n    areBigAndZonkConsentsAccepted,\n    wasBonusAgreementConfirmationModalConfirmed,\n    getBigAndZonkConsents,\n    isWWW,\n    getShouldSignDocuments,\n    getDocumentsConfirmationState,\n    invoiceIsPresentAndPaid,\n    isDocumentSelected,\n    isCVPhoneFilled,\n    isContactForCourierValid,\n    areDeliveryConditionsMet,\n    allComplexDocumentsAreAccepted,\n    debtRepaymentFilled,\n    shouldSelectInstallation,\n    getSelectedInstallationTimeSlot,\n    isContactForDAPValid,\n    isIdVerificationRequiredAndSucceed,\n    getIdVerificationSelectedBankId,\n    getAgreementType,\n    getSelectedDeliveryMethod,\n    getSelectedPaymentMethod,\n    simCardSerialNumberFilled,\n    isInvoiceDataValid,\n    isConsentsInAcknowledgmentState\n} from \"../selectors\";\nimport {getCartIsNet,getDeathCertificateConfirmed} from \"eshop/modules/cart/selectors\";\nimport {\n    doCheckoutStep,\n    changeCustomerDataFormField,\n    changeCustomerMainAddressFormField,\n    changeCustomerContactFormField,\n    changeCorrespondenceAddressFormField,\n    changeCustomerMnpDataFormField,\n    changeRepresentativeFormField,\n    changeGrantorFormField,\n    setGrantingDate,\n    setConsentStatesToNegative\n} from \"./app\";\nimport {FRONT_VALIDATION} from \"../actionTypes\";\nimport {\n    addressFormValidators,\n    customerContactFormValidators,\n    customerDataFormValidators,\n    mnpFormValidators\n} from \"../validators\";\nimport {isFieldDisabledForValidation, isMnpFieldInvisible, runValidator} from \"../utils/utils\";\nimport {openErrorModal} from \"eshop/modules/fix/actions/errors\";\nimport {openAgreementConfirmationModal} from \"eshop/modules/checkout/actions/errors\";\nimport OnlineUtils from \"../../../utils/OnlineUtils\";\nexport const frontValidationErrors =\n    (data) => ({\n        type: FRONT_VALIDATION,\n        data\n    });\n\nfunction validateCustomerDataFields(dispatch, getState) {\n    const contact = getCustomerContactForm(getState());\n    const customerData = getCustomerDataToValidation(getState());\n    const addressMain = getAddressMain(getState());\n    const correspondenceAddressMapping = getAddressCorrespondenceMapping(getState());\n\n    runValidator(contact, customerContactFormValidators, changeCustomerContactFormField, isFieldDisabledForValidation, dispatch);\n    runValidator(addressMain, addressFormValidators, changeCustomerMainAddressFormField, null, dispatch);\n    runValidator(customerData, customerDataFormValidators, changeCustomerDataFormField, isFieldDisabledForValidation, dispatch);\n\n    if(correspondenceAddressMapping === 'correspondence') {\n        const addressCorrespondence = getAddressCorrespondence(getState());\n        runValidator(addressCorrespondence, addressFormValidators, changeCorrespondenceAddressFormField,null, dispatch);\n    }\n}\n\nfunction validateMnpDataFields (dispatch, getState) {\n    const dataArray = getMnpData(getState());\n    const isB2B = getCartIsNet(getState());\n    dataArray.forEach(data => {\n        if(!OnlineUtils.isMnpApplicationSecondStep(data.processType)) {\n            runValidator(data, mnpFormValidators, changeCustomerMnpDataFormField, (data, name) => isMnpFieldInvisible(data, name, isB2B), dispatch);\n        }\n    });\n}\n\nconst validateRepresentativeDataFields = () => (dispatch, getState) => {\n    //update all representatives data with current values to execute validators\n\n    function run(selector, updater){\n        selector(getState()).forEach((item, index) =>{\n                Object.keys(item).forEach( (name) => {\n                    dispatch(updater({name, value:item[name], index, validate:true}));\n                });\n            });\n    }\n\n    run(getRepresentativesData, changeRepresentativeFormField);\n    run(getGrantorsData, changeGrantorFormField);\n    dispatch(setGrantingDate(getGrantingDate(getState())));\n};\n\nexport const validateData = (proceedWithCheckoutStep = true) => (dispatch, getState) => {\n    return new Promise((resolve, reject) => {\n    if(getIsCustomerDataStep(getState())){\n        dispatch(setConsentStatesToNegative());\n    }\n    const consentValidation = allConsentsValid(getState());\n    const consentDocumentsPrintState = getConsentDocumentsPrintState(getState());\n    const conditions = getRegisteredCheckoutConditions(getState());\n    const customerDataValid = isCustomerDataValid(getState());\n    const representativeDataValid = isRepresentativeDataValid(getState());\n    const fixRepresentativeDataValid = isFixRepresentativeDataValid(getState());\n    const mnpDataValid = isMnpDataValid(getState());\n    const mnpDataFilled = isMnpDataFilled(getState());\n    const retentionBonusesDataFilled = isRetentionBonusesDataFilled(getState());\n    const invoiceDataValid = isInvoiceDataValid(getState());\n    const consentsInAcknowledgmentState = isConsentsInAcknowledgmentState(getState());\n\n    const apuValidation = getApuState(getState());\n    function checkAndFireModalValidations() {\n        let modalValidationFired = false;\n\n        if (!modalValidationFired\n                && isRegisteredAgreementConfirmationComponent(getState())\n                && getBigAndZonkConsents(getState()).length > 0\n                && isWWW(getState())\n                && !areBigAndZonkConsentsAccepted(getState())\n                && !wasBigAndZonkAgreementConfirmationModalConfirmed(getState())) {\n            modalValidationFired = true;\n            dispatch(openAgreementConfirmationModal(\"BIGZONK\"));\n        }\n\n        if (!modalValidationFired\n                && isRegisteredAgreementConfirmationComponent(getState())\n                && !areConsentsWithBonusesAccepted(getState())\n                && !wasBonusAgreementConfirmationModalConfirmed(getState())) {\n            modalValidationFired = true;\n            dispatch(openAgreementConfirmationModal(\"BONUS\"));\n        }\n\n        return modalValidationFired;\n    }\n\n    const validationMsg = [];\n\n    if( !retentionBonusesDataFilled) {\n        validationMsg.push({\n            type: 'retentionBonuses',\n            message: 'Proszę wybrać bonus do przedłużanego numeru.'\n        });\n    }\n    if(conditions['customerData'] && !customerDataValid) {\n        validationMsg.push({\n            type: 'customerData',\n            message: 'Proszę uzupełnić dane osoby zamawiającej.'\n        });\n        validateCustomerDataFields(dispatch, getState);\n    }\n    if(conditions['mnpData'] && (!mnpDataValid || !mnpDataFilled)) {\n        validationMsg.push({\n            type: 'mnpData',\n            message: 'Proszę uzupełnić dane do przeniesienia numeru.'\n        });\n        validateMnpDataFields(dispatch, getState);\n    }\n    if(conditions['consents'] && !consentValidation) {\n        validationMsg.push({\n            type: 'consents',\n            message: 'Dokonaj wyboru aby przejść dalej.'\n        });\n    }\n    if(conditions['consentDocuments'] && !consentDocumentsPrintState) {\n        validationMsg.push({\n            type: 'consentDocuments',\n            message: 'Proszę wydrukować dokumenty dla zgód.'\n        });\n    }\n    if(conditions['consentsAcknowledgment'] && !consentsInAcknowledgmentState) {\n        validationMsg.push({\n            type: 'consentsAcknowledgment',\n            message: 'Proszę wysłać dokumenty do klienta albo przeczytać je w trakcie rozmowy aby przejść dalej.'\n        });\n    }\n    if(conditions['apuData'] && !apuValidation) {\n        validationMsg.push({\n            type: 'apuData',\n            message: 'Proszę zaznaczyć sposób przedłużenia umowy.'\n        });\n    }\n    if(conditions['representativeData'] && !representativeDataValid) {\n        validationMsg.push({\n            type: 'representativeData',\n            message: 'Proszę wypełnić dane reprezentanta.'\n        });\n\n        dispatch(validateRepresentativeDataFields());\n    }\n\n    if(conditions['fixRepresentativeData'] && !fixRepresentativeDataValid) {\n        validationMsg.push({\n            type: 'fixRepresentativeData',\n            message: 'Proszę wypełnić dane reprezentanta.'\n        });\n\n        dispatch(validateRepresentativeDataFields());\n    }\n\n    if(conditions['documentsConfirmation'] && getShouldSignDocuments(getState()) && !getDocumentsConfirmationState(getState()) && proceedWithCheckoutStep){\n      validationMsg.push({\n                type: 'signDocuments',\n                message: 'Musisz dokonać wyboru aby przejść dalej.'\n            });\n    }\n    if(conditions['invoicePaid'] && !invoiceIsPresentAndPaid(getState())){\n      validationMsg.push({\n                type: 'invoicePaid',\n                message: 'Musisz dokonać wyboru aby przejść dalej.'\n            });\n    }\n    if(conditions['additionalDocuments'] && !isDocumentSelected(getState())){\n          validationMsg.push({\n                    type: 'documentSelected',\n                    message: 'Musisz wybrać rodzaj dokumentu aby przejść dalej.'\n                });\n    }\n    if(conditions['additionalDocuments'] && isDocumentSelected(getState()) && !isCVPhoneFilled(getState())){\n              validationMsg.push({\n                        type: 'cvPhoneFilled',\n                        message: 'Musisz podać numer telefonu aby przejść dalej.'\n                    });\n        }\n\n    if(!isContactForCourierValid(getState())){\n            validationMsg.push({\n                      type: 'contactForCourier',\n                      message: 'Podaj numer kontaktowy.'\n                  });\n    }\n    if(conditions['delivery']){\n        if(!getSelectedDeliveryMethod(getState())){\n            validationMsg.push({\n                type: 'deliveryMethodNotSelected',\n                message: 'Wybierz metodę dostawy.'\n            });\n        } else if(!areDeliveryConditionsMet(getState())){\n            validationMsg.push({\n                type: 'deliveryCondition',\n                message: 'Podaj dane niezbędne do wysyłki.'\n            });\n        }\n    }\n    if(conditions['payment'] && !getSelectedPaymentMethod(getState())){\n        validationMsg.push({\n            type: 'paymentMethodNotSelected',\n            message: 'Wybierz metodę płatności.'\n        });\n    }\n    if(conditions['agreementIntroduction'] && !allComplexDocumentsAreAccepted(getState())){\n        validationMsg.push({\n                      type: 'agreementIntroduction',\n                      message: 'Dokonaj wyboru aby przejść dalej.'\n                  });\n    }\n    if (conditions['idVerification'] && !isIdVerificationRequiredAndSucceed(getState())) {\n        validationMsg.push({\n            type: 'idVerification',\n            message: 'Dokonaj wyboru aby przejść dalej.'\n        });\n    }\n    if(conditions['debtRepayment'] && !debtRepaymentFilled(getState())){\n      validationMsg.push({\n                          type: 'debtRepayment',\n                          message: 'Podaj dane niezbędne do złożenia zamówienia.'\n                      });\n    }\n    if(conditions['installationTimeSlot'] && shouldSelectInstallation(getState()) && !(getSelectedInstallationTimeSlot(getState()) && getSelectedInstallationTimeSlot(getState()).startDate)){\n     validationMsg.push({\n                              type: 'installationTimeSlot',\n                              message: 'Musisz dokonać wyboru aby przejść dalej.'\n                          });\n    }\n    if(!isContactForDAPValid(getState())){\n        validationMsg.push({\n                                  type: 'contactForDap',\n                                  message: 'Podaj numer kontaktowy.'\n                              });\n    }\n\n    if(conditions['agreementTypeData'] && !getAgreementType(getState())){\n        validationMsg.push({\n                          type: 'agreementTypeData',\n                          message: 'Dokonaj wyboru aby przejść dalej.'\n                      });\n    }\n\n    if(conditions['certificateDeathConfirm'] && !getDeathCertificateConfirmed(getState())){\n        validationMsg.push({\n                          type: 'certificateDeathConfirm',\n                          message: 'Musisz zaznaczyć aby przejść dalej.'\n                      });\n    }\n    if(conditions['invoiceData'] && !invoiceDataValid){\n        validationMsg.push({\n            type: 'customerData',\n            message: 'Podaj poprawny adres email do e-faktury.'\n        });\n    }\n    if(conditions[\"simCardSerialNumberFilled\"] && !simCardSerialNumberFilled(getState())) {\n        validationMsg.push({\n            type: \"simCardSerialNumberFilled\",\n            message: \"Wpisz numer karty SIM i kliknij zarezerwuj\",\n        });\n    }\n\n        if (validationMsg.length > 0) {\n            dispatch(frontValidationErrors(validationMsg));\n            resolve(false);\n        } else {\n            if (!checkAndFireModalValidations()) {\n                proceedWithCheckoutStep && dispatch(doCheckoutStep());\n                resolve(true);\n            } else {\n                resolve(false)\n            }\n        }\n    });\n};\n"],
    "file": "validation.js"
}