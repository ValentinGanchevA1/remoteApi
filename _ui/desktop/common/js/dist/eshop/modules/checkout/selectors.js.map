{
    "version": 3,
    "sources": ["../../../../../es6/eshop/modules/checkout/selectors.js"],
    "names": ["getCheckoutState", "state", "getCheckoutConditions", "checkout", "conditions", "getRegisteredCheckoutConditions", "registered", "checkoutConditionIsRegistered", "condition", "registeredConditions", "isDoingCheckoutStep", "navigation", "inProgress", "getSalesOfGoodsProcess", "getBundlesProcessType", "processType", "length", "_countEntriesForProcess", "getSalesOfAddonsProcess", "getCheckoutErrors", "errors", "getFbbServices", "fbbServices", "getSelectedDesignationNumber", "selectedDesignationNumber", "getSelectedServiceInstanceId", "selectedServiceInstanceId", "getFrontValidationMsg", "frontValidationMsg", "getAuthCheckoutErrors", "auth", "isAuthNeeded", "isCallbackNeeded", "callback", "getCvCheckoutErrors", "cv", "getCvMagnumCheckoutErrors", "cvMagnum", "getManualCvCheckoutErrors", "manual", "getCVWithDepositErrors", "cvWithDeposit", "getCheckoutErrorsArray", "backendValidation", "concat", "cim", "order", "data", "getOutOfStockCheckoutErrors", "stock", "getNeedSearchCheckoutErrors", "needsearch", "getCimConsistentCheckoutErrors", "cimconsenterror", "getMnpNoEmailCheckoutErrors", "noemailmnp", "getCheckoutReservationErrorsArray", "reservation", "getFixClientExistsCheckoutErrors", "fixCustomerExists", "getFixAppartmentNoValidation", "fixAppartmentNoValidation", "getCustomer", "customer", "getCustomerData", "isBusinessClient", "isForeignerAvailable", "foreignerAvailable", "getCustomerContact", "contact", "getCustomerNoEmail", "customerNoEmail", "getCustomerEmailAddress", "emailAddress", "isExistingCustomer", "existing", "hasFixAddress", "isCustomerModified", "modified", "isDisabledIdNumber", "disabledIdNumber", "getCustomerCompanyName", "companyName", "customerHasActiveContracts", "hasActiveContracts", "getLegalForm", "legalForm", "isForeignerCheckboxAvailable", "getInvestment", "investment", "getInvestmentData", "lead", "getInvestmentConsent", "consent", "getInvestmentOffers", "offers", "getBillingAccount", "billingAccount", "getBillingAccountFormData", "formData", "getBillingAccountsData", "getBillingAccountFormDataErrors", "formErrors", "getSelectedBillingAccountMobile", "selectedMobile", "getSelectedBillingAccountFix", "selectedFix", "isCreateBillingAccountEnabled", "create", "isBillingAccountFormVisible", "formVisible", "getBillingAccountCheckoutData", "isBillingComponentValid", "accountCode", "getSelectedAccountContracts", "accountContracts", "getShowContractButtonEnabled", "isShowContractButtonEnabled", "areBillingAccountContractsVisible", "accountContractsVisible", "getRepresentativeData", "representativeData", "getRepresentationMode", "representationMode", "getGrantingDate", "grantingDate", "getGrantingDateErrors", "grantingDateErrors", "isGrantingDateFilled", "date", "mode", "indexOf", "getRepresentatives", "representatives", "getRepresentativesData", "getRepresentativesErrors", "getRepresentativesFormData", "mergeDataAndErrors", "getRepresentativeFormData", "isRepresentativesFilled", "datas", "map", "_personalDataDataIsFilled", "every", "t", "isRepresentativesDataEmpty", "_personalDataDataIsEmpty", "isRepresentativesValid", "isEmpty", "isFilled", "_hasNoErrors", "getSapReservationNumber", "sapReservationNumber", "getGrantors", "grantors", "getGrantorsData", "getGrantorsErrors", "getGrantorsFormData", "isGrantorsDataEmpty", "isGrantorsDataFilled", "_nameInPersonalDataIsFilled", "isGrantorsValid", "isRepresentativeDataFilled", "isRepresentativeDataValid", "isFixRepresentativeDataValid", "getRepresentativeDataForBackend", "representationMethod", "customerData", "_isEmpty", "value", "firstName", "lastName", "pesel", "idNumber", "foreigner", "identificationEndDate", "identificationRegisterDate", "country", "identification", "identificationValue", "_isError", "getTelesales", "telesales", "getDebtRepaymentState", "debtRepayment", "getDebtRepayment", "shouldShowDebtRepaymetComponent", "show", "debtRepaymentFilled", "receiptNumber", "amount", "getMnpData", "mnpData", "getMNPCheckoutData", "Object", "keys", "filter", "m", "OnlineUtils", "isMnpApplicationSecondStep", "fixed", "identifier", "getCitySuggestionsForBusinessMnpAddress", "cbs", "createFilteredCitySuggestionsSelector", "getStreetSuggestionsBusinessMnpAddress", "createFilteredStreetSuggestionsSelector", "getBusinessMnpAddressValidation", "createAddressValidationSelector", "getCheckoutMnpProps", "getCartIsNet", "citySuggestions", "streetSuggestions", "validation", "isB2B", "getAddresses", "addresses", "getMainAddress", "main", "createGetAddressSelector", "addressType", "getAddressMain", "getAddressCorrespondence", "getAddressDelivery", "getAddressMappings", "mappings", "createGetAddressMappingSelector", "createGetMappedAddressSelector", "mapping", "getAddressCorrespondenceMapping", "getAddressDeliveryMapping", "getMappedAddressMain", "getMappedAddressCorrespondence", "getMappedAddressDelivery", "getCitySuggestionsForBillingAccountAddress", "getStreetSuggestionsForBillingAccountAddress", "getBillingAccountAddressValidation", "getCitySuggestionsForMainAddress", "getStreetSuggestionsForMainAddress", "getMainAddressValidation", "getCitySuggestionsForCorrespondenceAddress", "getStreetSuggestionsForCorrespondenceAddress", "getCorrespondenceAddressValidation", "getCitySuggestionsForDeliveryAddress", "getStreetSuggestionsForDeliveryAddress", "getDeliveryAddressValidation", "appendCbsValidationStateToErrors", "messageLevel", "genericErrors", "JSON", "parse", "stringify", "getOwnPropertyNames", "field", "Array", "push", "level", "message", "getCustomerErrors", "getCustomerDataErrors", "getCustomerMainAddressErrors", "mainAddress", "getCustomerCorrespondenceAddressErrors", "correspondenceAddress", "getDeliveryAddressErrors", "deliveryAddress", "getCustomerContactErrors", "getCustomerAddressErrors", "getCustomerCheckoutData", "getBillingAccountFormDataWithCbsErrors", "getBillingAccountFormValidation", "addressValidation", "getBillingAccountComponentData", "visible", "createEnabled", "getMetadata", "metadata", "customerDataRequested", "requested", "customerDataFinished", "finished", "paymentDataFinished", "payment", "representativeDataRequested", "representative", "billingAccountDataRequested", "deliveryDataRequested", "delivery", "deliveryDataRequestFinished", "cartMnpDataRequested", "cartMnpData", "customerDataLoading", "loading", "installationAvailableTimeSlotsRequested", "installation", "isManualVerificationModalVisible", "manualVerificationModalVisible", "isSmsVerified", "bpgRequested", "getBusinessDataSource", "businessDataSource", "isOnlineCookie", "isWWW", "areAllDocumentsSaving", "allDocuments", "areAllDocumentsSaved", "isCustomerDataReadOnly", "readOnly", "getCurrentStepId", "currentStepId", "getDelivery", "isDigitalAgreementDefault", "getCartDelivery", "cartDelivery", "getCartAgreementType", "documentsDeliveryModeName", "getCartDeliveryMethod", "deliveryMethod", "getCartDeliveryMethodForDevices", "deliveryMethodForDevices", "getAgreementType", "agreementType", "getDeliveryMobile", "_", "find", "methods", "item", "factory", "DeliveryMethodFactory", "MOBILE", "getDeliveryFix", "FIX", "getDeliveryFixDocuments", "deliveryModeType", "DeliveryMethodMode", "DOCUMENTS_PACKAGE", "getDeliveryFixDevices", "DEVICES_PACKAGE", "getDeliveryBundles", "bundleNumbers", "getDeliveryMethodsRaw", "method", "mergeMobileDeliveryMethods", "deliveryMethods", "isPickupOnEmailAvailable", "id", "some", "deliveryMethodCode", "DeliveryMethod", "PICKUP_ON_EMAIL", "getDeliveryMethods", "AgreementType", "DIGITAL", "isDigital", "isPaper", "isAgreementTypeRequired", "getDeliveryMethodsFetchDone", "deliveryMethodsFetchDone", "getDeliveryEmailAddress", "customerContact", "getDeliveryEmailAddressErrors", "emailAddressErrors", "getEmailConfirmationModalState", "emailConfirmationModalState", "getEmailConfirmationModalAccepted", "emailConfirmationModalAccepted", "deliveryAndCustomerDataLoaded", "cartDeliveryLoaded", "deliveryMethodsLoaded", "customerLoaded", "paymentDataLoaded", "merged", "temp", "finalMerged", "deliveryMethodWithMinPrice", "forEach", "maxCountDeliveryMethods", "Math", "max", "apply", "o", "j", "i", "splice", "findMinPriceDeliveryMethod", "arr", "parseFloat", "price", "getDeliveryModeTypeDocuments", "getDeliveryModeTypeDevices", "getDeliveryMethodsForDevices", "modeTypeDevices", "getIsDeliveryModesEqual", "isDeliveryModesEqual", "getRentDevices", "rentDevices", "getConvRentDevices", "getSalesDevices", "salesDevices", "getDeliveryContents", "entry", "contents", "reduce", "a", "b", "getDeliveryAllProductContents", "salesOfGoodsContents", "getSelectedDeliveryMethod", "selectedMethod", "getSelectedDeliveryMethodCode", "getSelectedMethodForDevices", "selectedMethodForDevices", "getSelectedDeliveryMethods", "isFixEqual", "mobile", "fixes", "fixDocuments", "fixDevices", "result", "selectedDeliveryMethods", "getSelectedDeliveryMethodForDevices", "getSelectedDeliveryMethodForDevicesForOrder", "getDeliveryPhoneContact", "phoneContact", "getSelectedDeliveryMethodId", "getCourierAdditionalInfo", "courierMessage", "getPickupPointsOfSale", "pointsOfSalePickup", "getPickupPointOfSaleCities", "pointOfSalePickupCities", "getSelectedPointOfSaleId", "selectedPointOfSale", "getParcelLocker", "parcelLockerList", "getParcelLockerList", "parcelLockerCityList", "getParcelLockerCity", "pointOfSaleCity", "getSelectedPointOfSaleCity", "getLastPos", "lastPos", "isPickupDeliveryValid", "posId", "getConvergentEntries", "getMiniCart", "miniCart", "entries", "cartEntry", "entryType", "CartEntryType", "CONVERGENT", "getSelectedMethodForDocuments", "convergentEntries", "getDocumentsDeliveryForConvergent", "getDeliveryCheckoutData", "deliveryBundles", "methodForDevicesId", "deliveryFix", "mappedDelivery", "pos", "documentDeliveryMethod", "isNewAddress", "methodId", "methodDevicesId", "bundles", "mobileBundles", "bundle", "distinctMobileBundles", "Set", "courierAdditionalInfo", "deliveryDataForm", "bundleNo", "pointOfServiceName", "newAddress", "getMyPosition", "myPosition", "pointsOfSale", "category", "shift", "onlyUnique", "index", "self", "getFixEntries", "getConvergentBundleNos", "convergentSubEntries", "allBundleNos", "getFixBundleNos", "allCartEntries", "cartEntries", "getInstallation", "getInstallationAvailableTimeSlots", "availableTimeSlots", "getInstallationPhoneContact", "phoneContactDAP", "getAdditionalInstallationData", "additionalData", "installationAddress", "streetName", "line1", "streetNumber", "line2", "getKwmLoadingState", "getKwmSelectedSlotDescription", "selectedSlotDisplayText", "getShowSelectedSlotError", "showSelectedSlotError", "getShouldRefreshSlots", "shouldRefresh", "getSelectedInstallationTimeSlot", "selectedInstallationTimeSlot", "getInstallationComment", "comment", "getInstallationCheckoutData", "installationTimeSlot", "installationComment", "fixBundleNos", "phoneNumber", "startDate", "endDate", "shouldSelectInstallation", "installationAvailableTimeSlots", "slots", "getPayment", "getAvailablePaymentMethods", "selectedMethodId", "supportedPaymentMethods", "dm", "flatMap", "checkPayU", "code", "paymentByCardPossibility", "paymentType", "sPM", "includes", "isDeliveryRequired", "paymentWithoutDeliveryMethod", "getSelectedPaymentMethod", "getSelectedPaymentModeValueEligCode", "selectedEligCode", "isOnlinePaymentMethodSelected", "getPaymentCheckoutData", "eligCode", "paymentMethod", "getFeeForSelectedPaymentMethod", "selectedDeliveryMethod", "selectedPaymentModeValueEligCode", "selectedPaymentMethod", "fee", "getDeliveryTotalCost", "total", "toFixed", "replace", "getCheckoutConsents", "consents", "getConsentsData", "getConsentsStatesData", "consentStates", "getConsentsCheckoutData", "makeBundleNoNullIfNecessary", "selectedConsentsStateCodes", "consentData", "consentState", "stateCode", "getConsentsForSubtype", "subType", "getConsentNegativeStateCodesForSubType", "earlierInstallationConsents", "consentPositiveStateCodes", "states", "positive", "flattenDeep", "getConsentEmailAddress", "consentEmailAddress", "getConsentPhoneNumber", "consentPhoneNumber", "getConsentAcknowledgmentsReadWhileTalking", "consentAcknowledgmentsReadWhileTalking", "getConsentDocumentStatus", "consentDocumentStatus", "areMainEarlierInstallationConsentsAccepted", "earlierInstallationConsentNegativeStateCodes", "earlierInstallationConsentPositiveStateCode", "areAdditionalEarlierInstallationConsentsAccepted", "isMainEarlierInstallationConsentPresent", "isEarlierInstallation", "updatingConsents", "updatingAnyConsent", "updating", "consentsDataInRequest", "cartConsentsDataRequested", "cartConsents", "getConsentsProps", "getBonusesConsents", "consentsData", "isRelatedWithBonusBySection", "conf", "sections", "s", "withBonus", "consentsCode", "cCodes", "consentCode", "isRelatedWithBonus", "getConsentsWithBonuses", "bonusConsents", "currentState", "title", "bonuses", "getBigAndZonkConsents", "areBigAndZonkConsentsAccepted", "bigAndZonkConsents", "areConsentsWithBonusesAccepted", "bonusConsent", "getCvDocumentsData", "cvDocuments", "getSelectedCvDocument", "selectedCustomerAdditionalDocument", "getDocumentCustomerWorkPhoneNumber", "customerWorkPhoneNumber", "getCvDocumentsCheckoutData", "selected", "phone", "getCvDocumentsList", "cvDocumentsList", "getCvDocumentsErrors", "getInvoiceEmail", "getInvoiceData", "invoiceEmail", "getInvoiceEmailMapping", "invoiceEmailMapping", "getInvoiceEmailErrors", "isContactEmailFilledAndValid", "email", "getInvoiceEmailForm", "contactEmailFilledAndValid", "customerFinished", "isInvoiceDataValid", "getInvoiceDataCheckoutData", "customerEmailAddress", "getCheckoutData", "mnp", "additionalDocuments", "invoiceData", "getCheckoutDataForDelivery", "getKdrCheckoutData", "getDocumentsConfirmationState", "documentsConfirmation", "getModifyConsentsInCartQueue", "modifyConsentsInCartQueue", "canSkipNumberReservation", "getMobileCartDevices", "mobileDevices", "POS", "isSerialNumberRequirementFulfilledForMagnum", "cartContainsReservableItems", "reservableCartEntries", "cartContainsAnySim", "cartContainsReservableSim", "anySim", "cartContainsAnyPhysicalSimCard", "isDigitalAgreementTypeWithoutPhysicalSimAndDevices", "isCartMobile", "cartHasMobileDevices", "hasAgreementTypeChanged", "cartAgreementType", "PAPER", "getDefaultDeliveryMethod", "deliveryMethodsParam", "deliveryMethodsRawParam", "deliveryMethodsRaw", "isFirstMethodDefault", "availableDeliveryMethodCodes", "console", "warn", "rawDeliveryMethodCodes", "d", "getSelectedOrDefaultMobileAgreementType", "hasCustomerNoEmail", "getSelectedOrDefaultAgreementType", "mobileDelivery", "defaultDeliveryMethod", "cartDeliveryMethod", "rawDeliveryMethods", "mobileAgreementType", "digitalAvailable", "cartAgreementDigital", "digital", "getAvailableDeliveryMethodCodes", "deliveryMethodId", "PICKUP_FROM_SHELF", "getSelectedOrDefaultDeliveryMethod", "selectedDeliveryMethodCode", "getSelectedOrDefaultPaymentMethod", "availablePaymentMethods", "paymentMethodCodes", "getPaymentMethodsForDelivery", "getDefaultPaymentMethodForDelivery", "defaultDeliveryMethodCode", "isDefault", "isSelectedDeliveryMethodAvailable", "deliveryMethodCodes", "shouldShowEmailWarning", "getDescriptionKey", "EmailWarningDescriptionEnum", "PICKUP", "DEFAULT", "invoiceIsPresentAndPaid", "skipNumberReservation", "paymentAndFiscalization", "isInvoicePresent", "paymentStatus", "paymentOverride", "saleUnlocked", "productsExists", "agencyPosStatusValid", "reservationData", "getReservationSimCardTypes", "simCardTypes", "getSimCardTypeForBundle", "serialNumbersFilled", "serialNumbers", "isReservationButtonDisabled", "serialNumberVerificationInProgress", "containsFixEntries", "fixEntries", "containsConvergentEntries", "getCustomerForm", "getContactCustomerForm", "getCustomerDataForm", "isNewAgreementInDocuments", "isCartFix", "isSalesOfGoodsOnly", "isSalesOfAddonsOnly", "isBzuOnlyAvailableOptionForFix", "getCustomerDataToValidation", "isSOG", "isSOA", "dataToValidate", "keysToIgnore", "emptyPersonalData", "k", "emptyBusinessData", "emptyPolishPersonalData", "emptyForeignerPersonalData", "getKeysToIgnoreForForeigner", "key", "vk", "noPesel", "getCustomerMainAddressForm", "address", "getCustomerCorrespondenceAddressForm", "addressMapping", "isEmailRequiredByEntries", "subTypeRequiringEmail", "vases", "vas", "isEmailRequiredByProductInCart", "isEmailFormValid", "getMnpContactMethods", "contactMethods", "isEmailFilledAndValid", "sort", "priority", "contactMethod", "contactErrors", "getCustomerContactForm", "fixentries", "getCustomerContactMsisdn", "getDeliveryAddressForm", "addressMain", "isDeliveryAddressValid", "cbsResult", "allConsentsValid", "selectedStates", "isSerialNumberRequirementFulfilledForFixPart", "isSerialNumberRequirementFulfilledForMobilePart", "checkSimInConvergentEntries", "convergentEntriesInEntries", "isSim", "processEntries", "process", "res", "_isFormFilled", "isSalesOfGoodsProcess", "isSalesOfAddonsProcess", "excludeValidKeys", "_getExcludedFieldConfiguration", "regon", "_isStreetNumberFilled", "error", "undefined", "_hasErrorsIgnoreFields", "fieldKeysToIgnore", "_isAdresCbsValid", "isCustomerDataValid", "addressCorrespondence", "customerDataErrors", "customerContactErrors", "addressCorrespondenceMapping", "mainAddressValidation", "correspondenceAddressValidation", "customerAddressErrors", "isCorrespondenceAddress", "isAddressCorrespondenceFilled", "getCustomerFieldKeysToIgnore", "contactFieldKeysToIgnore", "log", "isSogProcess", "isSoaProcess", "isNotNecessaryToCheckDocument", "isDocumentSelected", "selectedCvDocument", "notNecessaryToCheckDocument", "doc", "isCVPhoneFilled", "cvDocErrors", "selectedDoc", "phoneNeeded", "isNeededTextField", "isPhoneCorrect", "isRetentionBonusesDataFilled", "getMobileCartEntries", "getMobileVasesRaw", "mobileVas", "retentionEntriesCount", "filledRetentionBonuses", "mv", "categorizedBonuses", "retentionBonuses", "services", "rb", "productCode", "isMnpDataFilled", "x", "offerType", "businessName", "nip", "isHeadquartersAddressSame", "postalCode", "city", "houseNumber", "migrationMode", "isMnpDataValid", "entryErrors", "street", "flatNumber", "prevErrors", "nextErrors", "getApuState", "apu", "isApuSelected", "getReturnDocumentLoader", "returnDocument", "returnDocumentLoader", "getConsentDocumentsPrintState", "currentStep", "consentDocumentsPrintState", "getIsCustomerDataStep", "stepId", "getIsCartStep", "getDeliveryAndPaymentStep", "getConsentTypeInPrintConsentsValidator", "consentTypeInPrintConsentsValidator", "isWZRKConsentValid", "consentType", "type", "isPrintConsentDocumentsButtonEnabled", "getDocumentsState", "getDocumentsItems", "documents", "items", "getDocumentsLinks", "links", "getShouldSignDocuments", "methodForDocuments", "documentItems", "signable", "getCheckoutAgreement", "agreement", "getAgreementIntroductionStatuses", "introductionStatuses", "getAgreementIntroductionStatusForBundle", "isComplexAgreementLoadingForBundle", "documentLoadings", "allComplexDocumentsAreAccepted", "getDocumentCodesToMergeForBundle", "documentsToMerge", "documentsToMergePerBundle", "bundleMergeDocuments", "documentCodes", "getDocumentsCodesToMerge", "isDeliveryPhoneContactCorrect", "areDeliveryConditionsMet", "deliveryAddressValid", "selectedPointOfSaleId", "deliveryEmail", "deliveryEmailErrors", "isMobileDeliveryValid", "COURIER", "PARCEL_LOCKER", "toLowerCase", "isDuplicatedOrder", "isDuplicateOrder", "hasAccessRoleToProcessDuplicateOrder", "isContactValid", "deliveryPhoneContact", "isContactForDAPValid", "installationPhoneContact", "phoneNumberDAP", "test", "isContactForCourierValid", "isConsentsInAcknowledgmentState", "isChecked", "status", "isNextStepAvailable", "consentValidation", "apuValidation", "customerDataValid", "representativeDataValid", "isDeliveryAndPaymentStep", "selectedDeliverMethod", "ACCOUNT_MANAGER", "getPickup", "pickup", "posSimCardTypes", "pickupSerialNumbers", "getReservationStatus", "reservationStatus", "getGoodsOrderPaymentStatus", "goodsOrderPaymentStatus", "getPaymentOverrideStatus", "getPaymentAndFiscalizationLoaded", "paymentAndFiscalizationLoaded", "getPickupReplanishmentRequiredErrors", "pickupReplanishmentRequired", "getNavigationLoading", "navigationLoading", "getLastOrder", "lastOrder", "getOrderCanceled", "canceled", "getPickupError", "generalError", "firstPickupErrorWhenExists", "getFirstPickupError", "getPickupDocuments", "getPickupDocumentLinks", "documentlinks", "getDownloadedDocumentCode", "documentDownloaded", "getPickupSerialNumberErrors", "serialNumberError", "documentsPrinted", "required", "array", "document", "hasOwnProperty", "documentCode", "signableDocumentsPrintedPickup", "allDocumentsSaved", "signableDocumentsPrinted", "getAssistModeStateFromStore", "assistMode", "getAssistModeStateData", "assistModeState", "getAssistModeModalStateData", "modalAssistModeState", "getAssistModeConfirmationModalStateData", "confirmationModalState", "getEmployeeList", "employeeList", "getEmployeeListFilters", "filters", "isLoadingEmployeeList", "getSelectedEmployee", "selectedEmployee", "getCurrentPage", "page", "getFilterEnabled", "filterEnabled", "isLoadingAssistModeState", "getAssistModeConfirmationLeaveModalStateData", "confirmationLeaveModalState", "isEarlierInstallationConsentNotAcceptedModalVisible", "earlierInstallationConsentNotAcceptedModalIsVisible", "isEarlierInstallationConsentNotAcceptedModalIsAccepted", "earlierInstallationConsentNotAcceptedModalIsAccepted", "isEarlierInstallationConsentNotAcceptedModalMounted", "earlierInstallationConsentNotAcceptedModalDidMount", "isCourierDeliveryMethodModalVisible", "courierDeliveryMethodModalVisible", "isCourierDeliveryMethodModalMounted", "courierDeliveryMethodModalDidMount", "getCourierDeliveryMethodModalState", "courierDeliveryMethodModalState", "getEmailWarningModalState", "emailWarningModalState", "isEmailWarningModal", "modalState", "getWarningModalDescriptionKey", "descriptionKey", "ret", "rawConsentStates", "consentsMap", "obj", "requestedConsent", "msisdns", "bundleAssignments", "removeDuplicates", "hash", "notUnique", "hashed", "getAllReservableCartEntries", "isRegisteredAgreementConfirmationComponent", "wasBonusAgreementConfirmationModalConfirmed", "wasBigAndZonkAgreementConfirmationModalConfirmed", "getShowAgreementConfirmationModal", "showAgreementConfirmationModal", "getAgreementConfirmationModalVariant", "agreementConfirmationModalVariant", "getExistingOrderOrCartValidation", "existingOrderOrCartValidation", "getSectionForCourier", "EMPTY", "OTHER", "getFixCartRefreshResult", "fixCartRefreshResult", "shouldShowModalAfterProcessChanged", "previousProcess", "currentProcess", "getFactoryCart", "selectedDeliveryMethodIsPickupOnEmail", "isIdVerificationNeeded", "eagreementAvailabilityStatus", "getIdVerificationState", "idVerification", "getIdVerificationBanks", "banks", "getIdVerificationResult", "verificationResult", "getIdVerificationSelectedBankId", "idVerificationResult", "selectedBankId", "getIdVerificationStatus", "isIdVerificationRequired", "isIdVerificationFailedOrEmpty", "isIdVerificationRequiredAndNotVerified", "isIdVerificationRequiredAndSucceed", "getSummary", "summary", "getOrderFactoryForSummary", "orderSummary", "getSalesChannelForSummary", "salesChannel", "isFullPageLoader", "fullPageLoader", "allFixDeliveryMethods", "noERegulationsConsent", "eRegulationsConsentState", "getPreparedSimRequestFragment", "sims", "msisdn", "simCard", "reservable", "sim", "hasSerial", "simType", "simTypeDefinition", "simCardTypeDefinitions", "baseCode", "sku", "serialNumber", "bundleOmniCode", "simCardSerialNumberFilled", "verifySerialNumberError", "getConsentSections", "consentConfig", "isRequiredConsent", "isRequired", "sectionDescription", "groupTitle"],
    "mappings": "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",
    "sourcesContent": ["import {createSelector} from \"Reselect\";\nimport _ from \"lodash\";\n\nimport {selectors as cbs} from \"../cbs/main\";\nimport {\n    allCartEntries,\n    cartHasMobileDevices,\n    getBundlesProcessType,\n    getCartIsNet,\n    getInvoiceData,\n    getKdrCheckoutData,\n    getMiniCart,\n    getMobileCartDevices,\n    getMobileCartEntries,\n    getMobileVasesRaw,\n    isCartFix,\n    isCartMobile\n} from \"../cart/selectors\";\nimport {isNewAgreementInDocuments} from \"../documents/selectors\"\nimport DeliveryMethodFactory from \"./constants/DeliveryMethodFactoryEnum\";\nimport DeliveryMethodMode from \"./constants/DeliveryMethodModeEnum\";\nimport CartEntryType from \"./constants/CartEntryTypeEnum\";\nimport {like, validateConsent} from \"./utils/utils\";\nimport DeliveryMethod from \"./constants/DeliveryMethod\";\nimport {\n    emptyBusinessData,\n    emptyForeignerPersonalData,\n    emptyPersonalData,\n    emptyPolishPersonalData,\n} from \"./reducers/helperObjects\";\nimport {isDeliveryMethodRequired, isDeliveryMethodSelected} from \"./components/delivery/deliveryMethodHelpers\";\nimport {hasAccessRoleToProcessDuplicateOrder, isDuplicateOrder} from \"eshop/modules/fix/selectors/root\";\nimport {fixCustomerCheckoutData, toUpperCase} from \"../checkout/utils/utils\";\nimport {\n    cartContainsEsim,\n    cartEntriesContainsReservableItems,\n    entryContainsReservableSimCard,\n} from \"../checkout/utils/MiniCartUtils\"\nimport {areSerialNumbersFilled} from \"./actions/app\"\nimport {is2UCartEntry, is4UCartEntry} from \"./utils/MiniCartUtils\";\nimport {phoneNumberRegexp} from \"eshop/modules/core/validation\";\nimport AgreementType from \"./constants/AgreementType\";\nimport EmailWarningDescriptionEnum from \"./constants/EmailWarningDescriptionEnum\";\nimport OnlineUtils from 'eshop/utils/OnlineUtils';\n\nexport const getCheckoutState = state => state[\"checkout\"];\n\nexport const getCheckoutConditions = createSelector(getCheckoutState, checkout => checkout.conditions);\nexport const getRegisteredCheckoutConditions = createSelector(getCheckoutConditions, checkout => checkout.registered);\nexport const checkoutConditionIsRegistered = condition => createSelector(getRegisteredCheckoutConditions, registeredConditions => registeredConditions[condition]);\n\n// CHECKOUT NAVIGATION\nexport const isDoingCheckoutStep = createSelector(getCheckoutState, checkout => checkout.navigation.inProgress);\n\n// PROCESS TYPE\nexport const getSalesOfGoodsProcess = createSelector(getBundlesProcessType, processType => {\n    return processType.length !== 0 ? _countEntriesForProcess(processType, \"SALE_OF_GOODS\") === processType.length : false;\n});\n\nexport const getSalesOfAddonsProcess = createSelector(getBundlesProcessType, processType => {\n    return processType.length !== 0 ? _countEntriesForProcess(processType, \"SALE_OF_ADDONS\") === processType.length : false;\n});\n\nexport const getCheckoutErrors = createSelector(getCheckoutState, checkout => checkout.errors);\nexport const getFbbServices = createSelector(getCheckoutState, checkout => checkout.fbbServices.fbbServices);\nexport const getSelectedDesignationNumber = createSelector(getCheckoutState, checkout => checkout.fbbServices.selectedDesignationNumber);\nexport const getSelectedServiceInstanceId = createSelector(getCheckoutState, checkout => checkout.fbbServices.selectedServiceInstanceId);\nexport const getFrontValidationMsg = createSelector(getCheckoutErrors, errors => errors.frontValidationMsg);\nexport const getAuthCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.auth);\nexport const isAuthNeeded = createSelector(getCheckoutErrors, errors => (errors.auth!=null && errors.auth.length>0) );\nexport const isCallbackNeeded = createSelector(getCheckoutErrors, errors => (errors.callback!=null && errors.callback.length>0) );\nexport const getCvCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.cv);\nexport const getCvMagnumCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.cvMagnum);\nexport const getManualCvCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.manual);\nexport const getCVWithDepositErrors = createSelector(getCheckoutErrors, errors => errors.cvWithDeposit);\nexport const getCheckoutErrorsArray = createSelector(getCheckoutErrors, errors => errors.backendValidation.concat(errors.cim, errors.order, errors.data));\nexport const getOutOfStockCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.stock);\nexport const getNeedSearchCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.needsearch);\nexport const getCimConsistentCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.cimconsenterror);\nexport const getMnpNoEmailCheckoutErrors= createSelector(getCheckoutErrors, errors => errors.noemailmnp);\nexport const getCheckoutReservationErrorsArray = createSelector(getCheckoutErrors, errors => errors.reservation);\nexport const getFixClientExistsCheckoutErrors = createSelector(getCheckoutErrors, errors => errors.fixCustomerExists);\nexport const getFixAppartmentNoValidation = createSelector(getCheckoutErrors, errors => errors.fixAppartmentNoValidation);\n\n// CUSTOMER DATA\nexport const getCustomer = createSelector(getCheckoutState, checkout => checkout.customer);\nexport const getCustomerData = createSelector(getCustomer, customer => customer.data);\nexport const isBusinessClient = createSelector(getCustomerData, data => data.isBusinessClient);\nexport const isForeignerAvailable= createSelector(getCustomerData, data => data.foreignerAvailable);\nexport const getCustomerContact = createSelector(getCustomer, customer => customer.contact);\nexport const getCustomerNoEmail = createSelector(getCustomerContact, contact => contact.customerNoEmail);\nexport const getCustomerEmailAddress = createSelector(getCustomerContact, contact => contact.emailAddress);\nexport const isExistingCustomer = createSelector(getCustomer, customer => customer.existing);\nexport const hasFixAddress = createSelector(getCustomer, customer => customer.hasFixAddress);\nexport const isCustomerModified = createSelector(getCustomer, customer => customer.modified);\nexport const isDisabledIdNumber = createSelector(getCustomerData, data => data.disabledIdNumber);\nexport const getCustomerCompanyName = createSelector(getCustomerData, data => data.companyName);\nexport const customerHasActiveContracts = createSelector(getCustomerData, data => !!data.hasActiveContracts);\n\nexport const getLegalForm = createSelector(getCustomerData, data => data.legalForm);\n\nexport const isForeignerCheckboxAvailable = createSelector([isBusinessClient, isForeignerAvailable], (isBusinessClient, isForeignerAvailable) => {\n    return !isBusinessClient && isForeignerAvailable;\n});\n\n// LEAD\nexport const getInvestment = createSelector(getCheckoutState, checkout => checkout.investment);\nexport const getInvestmentData = createSelector(getInvestment, investment => investment.lead);\nexport const getInvestmentConsent = createSelector(getInvestment, investment => investment.consent);\nexport const getInvestmentOffers = createSelector(getInvestment, investment => investment.offers.offers);\n\n// BILLING ACCOUNT\nexport const getBillingAccount = createSelector(getCheckoutState, checkout => checkout.billingAccount);\nexport const getBillingAccountFormData = createSelector(getBillingAccount, billingAccount => billingAccount.formData);\nexport const getBillingAccountsData = createSelector(getBillingAccount, billingAccount => billingAccount.data);\nexport const getBillingAccountFormDataErrors = createSelector(getBillingAccount, billingAccount => billingAccount.formErrors);\nexport const getSelectedBillingAccountMobile = createSelector(getBillingAccount, billingAccount => billingAccount.selectedMobile);\nexport const getSelectedBillingAccountFix = createSelector(getBillingAccount, billingAccount => billingAccount.selectedFix);\nexport const isCreateBillingAccountEnabled = createSelector(getBillingAccount, billingAccount => billingAccount.create);\nexport const isBillingAccountFormVisible = createSelector(getBillingAccount, billingAccount => billingAccount.formVisible);\nexport const getBillingAccountCheckoutData = createSelector([getBillingAccountFormData, isCreateBillingAccountEnabled], (billingAccount, create) => create ? billingAccount : null);\nexport const isBillingComponentValid = createSelector([isCreateBillingAccountEnabled, getSelectedBillingAccountMobile, getSelectedBillingAccountFix], (create, selectedMobile, selectedFix) => create || selectedMobile.accountCode || selectedFix.accountCode);\nexport const getSelectedAccountContracts = createSelector(getBillingAccount, billingAccount => billingAccount.accountContracts);\nexport const getShowContractButtonEnabled = createSelector(getBillingAccount, billingAccount => billingAccount.isShowContractButtonEnabled);\nexport const areBillingAccountContractsVisible = createSelector(getBillingAccount, billingAccount => billingAccount.accountContractsVisible);\n\n// REPRESENTATIVE DATA\nexport const getRepresentativeData = createSelector(getCheckoutState, checkout => checkout ? checkout.representativeData : null);\nexport const getRepresentationMode = createSelector(getRepresentativeData, data => data ? data.representationMode : null);\nexport const getGrantingDate = createSelector(getRepresentativeData, data => data ? data.grantingDate : null);\nexport const getGrantingDateErrors = createSelector(getRepresentativeData, data => data ? data.grantingDateErrors : []);\nconst isGrantingDateFilled  = createSelector([getGrantingDate, getRepresentationMode], (date, mode) => [\"JR\",\"WR\"].indexOf(mode) > -1 || !date[0] );\n\nexport const getRepresentatives = createSelector(getRepresentativeData, representativeData => representativeData ? representativeData.representatives : null);\nexport const getRepresentativesData = createSelector(getRepresentatives, data => data ? data.data : []);\nexport const getRepresentativesErrors = createSelector(getRepresentatives, data => data ? data.errors : []);\n//export const getRepresentativesErrors = createSelector(getRepresentativesErrors, errors => {}); //TODO\nexport const getRepresentativesFormData = createSelector([getRepresentativesData, getRepresentativesErrors], mergeDataAndErrors);\nexport const getRepresentativeFormData = createSelector([getRepresentativesFormData], formData => formData[0] || {});\n\nexport const isRepresentativesFilled = createSelector(getRepresentativesData, datas => datas.map(_personalDataDataIsFilled).every(t=>t==true));\nexport const isRepresentativesDataEmpty = createSelector(getRepresentativesData, datas => datas.map(_personalDataDataIsEmpty).every(t=>t==true));\nexport const isRepresentativesValid = createSelector([isRepresentativesDataEmpty, isRepresentativesFilled, getRepresentativesErrors], (isEmpty, isFilled, errors) => {\n    //return isEmpty || (isFilled && _hasNoErrors(errors));\n    return isFilled && _hasNoErrors(errors);\n});\n\nexport const getSapReservationNumber = createSelector(getCheckoutState, checkout => checkout.reservation.sapReservationNumber);\n\nexport const getGrantors = createSelector(getRepresentativeData, representativeData => representativeData ? representativeData.grantors : null);\nexport const getGrantorsData = createSelector(getGrantors, data => data ? data.data : null);\nexport const getGrantorsErrors = createSelector(getGrantors, data => data ? data.errors : null);\nexport const getGrantorsFormData = createSelector([getGrantorsData, getGrantorsErrors], mergeDataAndErrors);\nexport const isGrantorsDataEmpty = createSelector(getGrantorsData, (datas) => datas ? datas.map(_personalDataDataIsEmpty).every(t=>t==true) : false);\nconst isGrantorsDataFilled = createSelector(getGrantorsData, (datas) => datas ? datas.map(_nameInPersonalDataIsFilled).every(t=>t==true) : false);\nexport const isGrantorsValid = createSelector([isGrantorsDataEmpty, isGrantorsDataFilled, getGrantorsErrors], (isEmpty, isFilled, errors) => {\n    //return isEmpty || (isFilled && _hasNoErrors(errors));\n    return isFilled && _hasNoErrors(errors);\n});\n\nexport const isRepresentativeDataFilled = createSelector([isRepresentativesFilled, isGrantorsDataFilled, isGrantingDateFilled], (isRepresentativesFilled, isGrantorsDataFilled, isGrantingDateFilled) => {\n    return isRepresentativesFilled && isGrantorsDataFilled && isGrantingDateFilled\n});\n\nexport const isRepresentativeDataValid = createSelector([isRepresentativesValid, isGrantorsValid, getGrantingDateErrors], (isRepresentativesValid, isGrantorsValid, getGrantingDateErrors) => {\n    return isRepresentativesValid && isGrantorsValid && !getGrantingDateErrors[0]\n});\n\nexport const isFixRepresentativeDataValid = createSelector([isRepresentativesDataEmpty, isRepresentativesFilled, getRepresentativesErrors], (isEmpty, isFilled, errors) => {\n    return isEmpty || (isFilled && _hasNoErrors(errors));\n});\n\nexport const getRepresentativeDataForBackend = createSelector([getRepresentativesData, getGrantorsData, getRepresentationMode, getCustomerData, getGrantingDate], (representatives, grantors, representationMethod, customerData, grantingDate) => {\n    if(customerData && customerData.legalForm){\n        return {\n            representatives,\n            grantors,\n            representationMethod,\n            grantingDate\n        }\n    } else {\n        return null\n    }\n});\n\nconst _isEmpty = (value) => !value || value === \"\" || value === null || typeof value === 'undefined';\nconst _personalDataDataIsEmpty = (data) => _isEmpty(data.firstName) && _isEmpty(data.lastName) && _isEmpty(data.pesel) && (_isEmpty(data.idNumber) && !data.foreigner) &&\n    (!data.foreigner && ((_isEmpty(data.identificationEndDate) || _isEmpty(data.identificationRegisterDate)) && _isEmpty(data.country) && _isEmpty(data.identification) && _isEmpty(data.identificationValue)));\nconst _personalDataDataIsFilled = (data) => !_isEmpty(data.firstName) && !_isEmpty(data.lastName) && !_isEmpty(data.pesel) && (!_isEmpty(data.idNumber) || data.foreigner) &&\n    (!data.foreigner || ((!_isEmpty(data.identificationEndDate) || !_isEmpty(data.identificationRegisterDate)) && !_isEmpty(data.country) && !_isEmpty(data.identification) && !_isEmpty(data.identificationValue)));\nconst _nameInPersonalDataIsFilled = (data) => !_isEmpty(data.firstName) && !_isEmpty(data.lastName)\nconst _hasNoErrors = (errors) => errors.map(_isError).every(t=>t==false)\n\n// TELESALES CAMPAIGN\nexport const getTelesales = createSelector(getCheckoutState, checkout => checkout.telesales);\n\nexport const getDebtRepaymentState = createSelector(getCheckoutState, checkout => checkout.debtRepayment);\nexport const getDebtRepayment = createSelector(getDebtRepaymentState, debtRepayment => debtRepayment.data);\nexport const shouldShowDebtRepaymetComponent = createSelector(getDebtRepaymentState, debtRepayment => debtRepayment.show);\nexport const debtRepaymentFilled = createSelector(getDebtRepayment, debtRepayment => !_isEmpty(debtRepayment.receiptNumber) && !_isEmpty(debtRepayment.amount));\n\n// MNP DATA\n\nexport const getMnpData = createSelector(getCheckoutState, checkout => checkout.mnpData.data);\nexport const getMNPCheckoutData = createSelector(\n    [getMnpData], (mnpData) => {\n        if (Object.keys(mnpData).length === 0) {\n            return [];\n        }\n        return mnpData.filter(m=> !OnlineUtils.isMnpApplicationSecondStep(m.processType)).map(m => {\n            let fixed = {...m};\n            delete fixed.errors;\n            delete fixed.identifier;\n            return fixed;\n        });\n    }\n);\nexport const getCitySuggestionsForBusinessMnpAddress = cbs.createFilteredCitySuggestionsSelector(getMnpData);\nexport const getStreetSuggestionsBusinessMnpAddress = cbs.createFilteredStreetSuggestionsSelector(getMnpData);\nexport const getBusinessMnpAddressValidation = cbs.createAddressValidationSelector(getMnpData);\nexport const getCheckoutMnpProps = createSelector(\n    [getMnpData, getCitySuggestionsForBusinessMnpAddress, getStreetSuggestionsBusinessMnpAddress, getBusinessMnpAddressValidation, getCartIsNet],\n    (mnpData, citySuggestions, streetSuggestions, validation, isB2B) => ({mnpData, citySuggestions, streetSuggestions, validation, isB2B})\n);\n\n// Addresses\nexport const getAddresses = createSelector(getCheckoutState, checkout => checkout.addresses);\nexport const getMainAddress = createSelector(getAddresses, addresses => addresses.main); // ToDo replace usages with getAddressMain\nexport const createGetAddressSelector = (addressType) => createSelector(getAddresses, addresses => addresses[addressType]);\nexport const getAddressMain = createGetAddressSelector(\"main\");\nexport const getAddressCorrespondence = createGetAddressSelector(\"correspondence\");\nexport const getAddressDelivery = createGetAddressSelector(\"delivery\");\nexport const getAddressMappings = createSelector(getAddresses, addresses => addresses.mappings);\nexport const createGetAddressMappingSelector = (addressType) =>\n    createSelector(getAddressMappings, mappings => mappings[addressType] || addressType);\nexport const createGetMappedAddressSelector = (addressType) =>\n    createSelector(\n        [getAddresses, createGetAddressMappingSelector(addressType)],\n        (addresses, mapping) => addresses[mapping]\n    );\nexport const getAddressCorrespondenceMapping = createGetAddressMappingSelector(\"correspondence\");\nexport const getAddressDeliveryMapping = createGetAddressMappingSelector(\"delivery\");\nexport const getMappedAddressMain = createGetMappedAddressSelector(\"main\");\nexport const getMappedAddressCorrespondence = createGetMappedAddressSelector(\"correspondence\");\nexport const getMappedAddressDelivery = createGetMappedAddressSelector(\"delivery\");\n\n// CBS suggestions\nexport const getCitySuggestionsForBillingAccountAddress = cbs.createFilteredCitySuggestionsSelector(getBillingAccountFormData);\nexport const getStreetSuggestionsForBillingAccountAddress = cbs.createFilteredStreetSuggestionsSelector(getBillingAccountFormData);\nexport const getBillingAccountAddressValidation = cbs.createAddressValidationSelector(getBillingAccountFormData);\nexport const getCitySuggestionsForMainAddress = cbs.createFilteredCitySuggestionsSelector(getAddressMain);\nexport const getStreetSuggestionsForMainAddress = cbs.createFilteredStreetSuggestionsSelector(getAddressMain);\nexport const getMainAddressValidation = cbs.createAddressValidationSelector(getAddressMain);\nexport const getCitySuggestionsForCorrespondenceAddress = cbs.createFilteredCitySuggestionsSelector(getAddressCorrespondence);\nexport const getStreetSuggestionsForCorrespondenceAddress = cbs.createFilteredStreetSuggestionsSelector(getAddressCorrespondence);\nexport const getCorrespondenceAddressValidation = cbs.createAddressValidationSelector(getAddressCorrespondence);\nexport const getCitySuggestionsForDeliveryAddress = cbs.createFilteredCitySuggestionsSelector(getAddressDelivery);\nexport const getStreetSuggestionsForDeliveryAddress = cbs.createFilteredStreetSuggestionsSelector(getAddressDelivery);\nexport const getDeliveryAddressValidation = cbs.createAddressValidationSelector(getAddressDelivery);\n\nconst appendCbsValidationStateToErrors = (errors, validation, messageLevel) => {\n    const genericErrors = JSON.parse(JSON.stringify({...errors}));\n    if (validation) {\n        Object.getOwnPropertyNames(validation).map(field => {\n            if (typeof validation !== 'undefined' && validation[field] === false) {\n                genericErrors[field] && genericErrors[field] instanceof Array && genericErrors[field].length === 0 && genericErrors[field].push({\n                    level: messageLevel,\n                    message: 'Pole nie jest wypełnione poprawnie.'\n                });\n            }\n        });\n    }\n\n    return genericErrors;\n};\n\nexport const getCustomerErrors = createSelector(getCustomer, customer => customer.errors);\nexport const getCustomerDataErrors = createSelector(getCustomerErrors, errors => errors.data);\n\nexport const getCustomerMainAddressErrors = createSelector([getCustomerErrors, getMainAddressValidation],\n    (errors, validation) => appendCbsValidationStateToErrors(errors.mainAddress, validation, 'warn'));\n\nexport const getCustomerCorrespondenceAddressErrors = createSelector([getCustomerErrors, getCorrespondenceAddressValidation],\n    (errors, validation) => appendCbsValidationStateToErrors(errors.correspondenceAddress, validation, 'error'));\n\nexport const getDeliveryAddressErrors = createSelector([getCustomerErrors, getDeliveryAddressValidation],\n    (errors, validation) => appendCbsValidationStateToErrors(errors.deliveryAddress, validation, 'error'));\n\nexport const getCustomerContactErrors = createSelector(getCustomerErrors, errors => errors.contact);\n\nexport const getCustomerAddressErrors = createSelector(getCustomerErrors, errors => errors.mainAddress);\n\nexport const getCustomerCheckoutData = createSelector(\n    [getCustomerData, isExistingCustomer, getCustomerContact, isCustomerModified, getMappedAddressMain, getMappedAddressCorrespondence],\n    (data, existing, contact, modified, mainAddress, correspondenceAddress) => ({\n        ...data,\n        existing,\n        ...contact,\n        modified,\n        mainAddress,\n        correspondenceAddress\n    })\n);\n\n// BILLING ACCOUNT\nexport const getBillingAccountFormDataWithCbsErrors = createSelector([getBillingAccountFormDataErrors, getBillingAccountAddressValidation],\n    (errors, validation) => appendCbsValidationStateToErrors(errors, validation, 'warn'));\nexport const getBillingAccountFormValidation = createSelector([getBillingAccountAddressValidation, getBillingAccountFormDataErrors], (addressValidation, errors) => ({...addressValidation, emailAddress: errors.emailAddress && errors.emailAddress.length === 0}));\nexport const getBillingAccountComponentData = createSelector(\n    [getBillingAccountsData, getBillingAccountFormData, getBillingAccountFormDataWithCbsErrors, isBillingAccountFormVisible, getCitySuggestionsForBillingAccountAddress, getStreetSuggestionsForBillingAccountAddress, getBillingAccountFormValidation, isCreateBillingAccountEnabled, getSelectedBillingAccountMobile,getSelectedBillingAccountFix, getSelectedAccountContracts, getShowContractButtonEnabled, areBillingAccountContractsVisible],\n    (data, formData, errors, visible, citySuggestions, streetSuggestions, validation, createEnabled, selectedMobile, selectedFix, accountContracts, isShowContractButtonEnabled, accountContractsVisible) => ({data, formData, errors, visible, citySuggestions, streetSuggestions, validation, createEnabled, selectedMobile, selectedFix, accountContracts, isShowContractButtonEnabled, accountContractsVisible})\n);\n\n// data state\nexport const getMetadata = createSelector(getCheckoutState, checkout => checkout.metadata);\nexport const customerDataRequested = createSelector(getMetadata, metadata => metadata.customer.requested);\nexport const customerDataFinished = createSelector(getMetadata, metadata => metadata.customer.finished);\nexport const paymentDataFinished = createSelector(getMetadata, metadata => metadata.payment.finished);\nexport const representativeDataRequested = createSelector(getMetadata, metadata => metadata.representative.requested);\nexport const billingAccountDataRequested = createSelector(getMetadata, metadata => metadata.billingAccount.requested);\nexport const deliveryDataRequested = createSelector(getMetadata, metadata => metadata.delivery.requested);\nexport const deliveryDataRequestFinished = createSelector(getMetadata, metadata => metadata.delivery.finished);\nexport const cartMnpDataRequested = createSelector(getMetadata, (metadata) => metadata.cartMnpData.requested);\nexport const customerDataLoading = createSelector(getMetadata, metadata => metadata.customer.loading);\nexport const installationAvailableTimeSlotsRequested = createSelector(getMetadata, metadata => metadata.installation.requested);\nexport const isManualVerificationModalVisible = createSelector(getMetadata, metadata => metadata.manualVerificationModalVisible);\nexport const isSmsVerified = createSelector(getMetadata, metadata => metadata.customer && metadata.customer.isSmsVerified);\nexport const bpgRequested = createSelector(getMetadata, metadata => metadata.customer && metadata.customer.bpgRequested);\nexport const getBusinessDataSource = createSelector(getMetadata, metadata => metadata.customer && metadata.customer.businessDataSource);\nexport const isOnlineCookie = createSelector(getMetadata, metadata => metadata.customer && metadata.customer.isOnlineCookie);\nexport const isWWW = createSelector(getMetadata, metadata => metadata.customer && metadata.customer.isWWW);\nexport const areAllDocumentsSaving = createSelector(getMetadata, metadata => metadata.allDocuments && metadata.allDocuments.loading);\nexport const areAllDocumentsSaved = createSelector(getMetadata, metadata => metadata.allDocuments && metadata.allDocuments.finished);\n\nexport const isCustomerDataReadOnly = createSelector(getMetadata, metadata => metadata.customer.readOnly);\n\nexport const getCurrentStepId = createSelector(getMetadata, metadata => metadata.currentStepId);\n// delivery\nexport const getDelivery = createSelector(getCheckoutState, checkout => checkout.delivery);\nexport const isDigitalAgreementDefault = createSelector(getDelivery, delivery => delivery.isDigitalAgreementDefault);\nexport const getCartDelivery = createSelector(getDelivery, delivery => delivery.cartDelivery);\nexport const getCartAgreementType = createSelector(getCartDelivery, cartDelivery => cartDelivery.documentsDeliveryModeName);\nexport const getCartDeliveryMethod = createSelector(getCartDelivery, cartDelivery => cartDelivery.deliveryMethod);\nexport const getCartDeliveryMethodForDevices = createSelector(getCartDelivery, cartDelivery => cartDelivery.deliveryMethodForDevices);\nexport const getAgreementType = createSelector(getDelivery, delivery => delivery.agreementType);\nexport const getDeliveryMobile = createSelector(getDelivery, delivery => _.find(delivery.methods, item => item.factory === DeliveryMethodFactory.MOBILE));\nexport const getDeliveryFix = createSelector(getDelivery, delivery => _.filter(delivery.methods, item => item.factory === DeliveryMethodFactory.FIX));\nexport const getDeliveryFixDocuments = createSelector(getDeliveryFix, delivery => _.find(delivery, item => item.deliveryModeType === DeliveryMethodMode.DOCUMENTS_PACKAGE));\nexport const getDeliveryFixDevices = createSelector(getDeliveryFix, delivery => _.find(delivery, item => item.deliveryModeType === DeliveryMethodMode.DEVICES_PACKAGE));\nexport const getDeliveryBundles = createSelector(getDelivery, delivery => {\n    return (delivery.methods[0]) ? delivery.methods[0].bundleNumbers : [];\n});\n\nexport const getDeliveryMethodsRaw = createSelector(getDelivery, delivery => {\n    //TODO: rozwiązanie mobile powinno być zastosowane również dla FIX - nie jest per factory\n    if (delivery.methods.length > 1 && delivery.methods.every(method => method.factory === \"MOBILE\")){\n        return mergeMobileDeliveryMethods(delivery);\n    }\n    return (delivery.methods[0]) ? delivery.methods[0].deliveryMethods : [];\n});\n\nexport const isPickupOnEmailAvailable = createSelector(getDeliveryMethodsRaw, deliveryMethods => deliveryMethods\n    .map(deliveryMethod => deliveryMethod.id)\n    .some(deliveryMethodCode => deliveryMethodCode === DeliveryMethod.PICKUP_ON_EMAIL));\n\nexport const getDeliveryMethods = createSelector([getDelivery, getAgreementType], (delivery, agreementType) => {\n    // debugger;\n    if (delivery.methods.length > 0 && delivery.methods.every(method => method.factory === \"MOBILE\")) {\n        if (delivery.methods.length > 1) {\n            return mergeMobileDeliveryMethods(delivery);\n        }\n        return delivery.methods[0] ? delivery.methods[0].deliveryMethods : [];\n    }\n    const deliveryMethods = delivery.methods[0] ? delivery.methods[0].deliveryMethods : [];\n    return deliveryMethods\n        .filter(method => !agreementType || (AgreementType.DIGITAL === agreementType ? DeliveryMethod.isDigital(method.id) : DeliveryMethod.isPaper(method.id)));\n});\n\nexport const isAgreementTypeRequired = createSelector(getDeliveryMethodsRaw, deliveryMethods => {\n    return deliveryMethods && deliveryMethods.map(m => m.id).some(DeliveryMethod.isDigital) &&\n        deliveryMethods.map(m => m.id).some(DeliveryMethod.isPaper);\n});\n\nexport const getDeliveryMethodsFetchDone = createSelector(getDelivery, delivery => delivery.deliveryMethodsFetchDone);\nexport const getDeliveryEmailAddress = createSelector([getDelivery, getCustomerContact], (delivery, customerContact) => delivery.emailAddress === null ? customerContact.emailAddress : delivery.emailAddress || \"\");\nexport const getDeliveryEmailAddressErrors = createSelector(getDelivery, delivery => delivery.emailAddressErrors || []);\nexport const getEmailConfirmationModalState = createSelector(getDelivery, delivery => !!delivery.emailConfirmationModalState);\nexport const getEmailConfirmationModalAccepted = createSelector(getDelivery, delivery => !!delivery.emailConfirmationModalAccepted);\nexport const deliveryAndCustomerDataLoaded = createSelector([deliveryDataRequestFinished, getDeliveryMethodsFetchDone, customerDataFinished, paymentDataFinished], (cartDeliveryLoaded, deliveryMethodsLoaded, customerLoaded, paymentDataLoaded) => cartDeliveryLoaded && deliveryMethodsLoaded && customerLoaded && paymentDataLoaded);\n\nfunction mergeMobileDeliveryMethods(delivery){\n    let merged = [];\n    let temp = [];\n    let finalMerged = [];\n    let deliveryMethodWithMinPrice;\n    delivery.methods.forEach(method => {\n        method.deliveryMethods.forEach(deliveryMethod => merged.push(deliveryMethod))\n    })\n    let maxCountDeliveryMethods = Math.max.apply(Math,delivery.methods.map(o => o.deliveryMethods.length))\n\n    for (let j = 0; j <= maxCountDeliveryMethods; j++){\n        for (let i = merged.length - 1; i >= 0; i--){\n            if (merged[0].id === merged[i].id){\n                temp.push(merged[i]);\n                merged.splice(i, 1);\n            }\n        }\n\n        if (temp.length === delivery.methods.length) {\n            deliveryMethodWithMinPrice = findMinPriceDeliveryMethod(temp)\n            finalMerged.push(deliveryMethodWithMinPrice)\n        }\n        temp = [];\n        deliveryMethodWithMinPrice = null;\n    }\n    return finalMerged;\n}\n\nfunction findMinPriceDeliveryMethod(arr) {\n    for (let i = arr.length -1; i >= 1; i--) {\n        if (parseFloat(arr[i].price) > (parseFloat(arr[i-1].price))){\n            arr.splice(i, 1)\n        } else {\n            arr.splice(i-1, 1)\n        }\n    }\n    return arr[0];\n}\n\nexport const getDeliveryModeTypeDocuments = createSelector(getDelivery, delivery => {\n    return (delivery.methods[0]) ? delivery.methods[0].deliveryModeType : '';\n});\n\nexport const getDeliveryModeTypeDevices = createSelector(getDelivery, delivery => {\n    return (delivery.methods[1]) ? delivery.methods[1].deliveryModeType : '';\n});\n\nexport const getDeliveryMethodsForDevices = createSelector(\n    [getDelivery, getDeliveryModeTypeDevices],\n    (delivery, modeTypeDevices) => {\n        return (modeTypeDevices === DeliveryMethodMode.DEVICES_PACKAGE && delivery.methods[1]) ? delivery.methods[1].deliveryMethods : [];\n    }\n);\n\nexport const getIsDeliveryModesEqual = createSelector(getDeliveryFix, deliveryMethods => {\n    return (deliveryMethods[0]) ? deliveryMethods[0].isDeliveryModesEqual : false;\n});\n\nexport const getRentDevices = createSelector(getDelivery, delivery => {\n    return (delivery.methods[1]) ? delivery.methods[1].rentDevices : '';\n});\nexport const getConvRentDevices = createSelector(getDelivery, delivery => {\n    return (delivery.methods[0]) ? delivery.methods[0].rentDevices : '';\n});\n\nexport const getSalesDevices = createSelector(getDelivery, delivery => {\n    return (delivery.methods[1]) ? delivery.methods[1].salesDevices : '';\n});\n\nexport const getDeliveryContents = createSelector(getDelivery, delivery => {\n    return delivery.methods[0] ? delivery.methods.map(entry => entry.contents).reduce((a, b) =>\n        {\n            if(a && b)\n                return a.concat(\", \").concat(b);\n            if(a){\n                return a;\n            }\n            if(b){\n                return b;\n            }\n        }\n    ): '';\n});\n\nexport const getDeliveryAllProductContents = createSelector(getDelivery, delivery => {\n    return delivery.methods[0] ? delivery.methods.map(entry => entry.salesOfGoodsContents)\n        .reduce((a, b) => (a && b && a.concat(b)) || (b)): '';\n});\n\nexport const getSelectedDeliveryMethod = createSelector(\n    [getDelivery, getDeliveryMethods],\n    (delivery, deliveryMethods) => {\n        return deliveryMethods && deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedMethod) || \"\";\n    }\n);\n\nexport const getSelectedDeliveryMethodCode = createSelector(getDelivery, (delivery) => delivery.selectedMethod);\n\nexport const getSelectedMethodForDevices = createSelector(getDelivery, (delivery) => delivery.selectedMethodForDevices);\n\nexport const getSelectedDeliveryMethods = createSelector(\n    [getDelivery, getIsDeliveryModesEqual],\n    (delivery, isFixEqual) => {\n        const mobile = _.find(delivery.methods, item => item.factory === DeliveryMethodFactory.MOBILE);\n        const fixes = _.filter(delivery.methods, item => item.factory === DeliveryMethodFactory.FIX);\n        const fixDocuments = _.find(fixes, item => item.deliveryModeType === DeliveryMethodMode.DOCUMENTS_PACKAGE);\n        const fixDevices = _.find(fixes, item => item.deliveryModeType === DeliveryMethodMode.DEVICES_PACKAGE);\n        const result = {\n            mobile: mobile ? (\n                mobile.deliveryMethods.length > 0\n                    ? mobile.deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedDeliveryMethods.mobile) || ''\n                    : fixDevices && fixDevices.deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedDeliveryMethods.mobile) || ''\n            ) : null,\n            fixDocuments: fixDocuments ? (\n                fixDocuments.deliveryMethods.length > 0\n                    ? fixDocuments.deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedDeliveryMethods.fixDocuments) || ''\n                    : ''\n            ) : null,\n            fixDevices: fixDevices ? (\n                fixDevices.deliveryMethods.length > 0\n                    ? fixDevices.deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedDeliveryMethods.fixDevices) || ''\n                    : ''\n            ) : null\n        };\n\n        if (!result.fixDevices && isFixEqual) {\n            result.fixDevices = result.fixDocuments;\n        }\n        return result;\n    }\n);\n\nexport const getSelectedDeliveryMethodForDevices = createSelector(\n    [getDelivery, getDeliveryMethodsForDevices],\n    (delivery, deliveryMethods) => {\n        return deliveryMethods.find(deliveryMethod => deliveryMethod.id === delivery.selectedMethodForDevices) || \"\";\n    }\n);\n\nexport const getSelectedDeliveryMethodForDevicesForOrder = createSelector(getDelivery, (delivery) => delivery.selectedMethodForDevices);\n\nexport const getDeliveryPhoneContact = createSelector(getDelivery, (delivery) => delivery.phoneContact || \"\");\nexport const getSelectedDeliveryMethodId = createSelector(getDelivery, (delivery) => !!delivery && delivery.selectedMethod);\n\nexport const getCourierAdditionalInfo = createSelector(getDelivery, delivery => delivery.courierMessage);\n\n\nexport const getPickupPointsOfSale = createSelector(getDelivery, delivery => delivery.pointsOfSalePickup);\nexport const getPickupPointOfSaleCities = createSelector(getDelivery, delivery => delivery.pointOfSalePickupCities);\nexport const getSelectedPointOfSaleId = createSelector(getDelivery, (delivery) => delivery.selectedPointOfSale);\n\nexport const getParcelLocker = createSelector(getDelivery, delivery => delivery.parcelLockerList);\nexport const getParcelLockerList = createSelector(getDelivery, delivery => delivery.parcelLockerCityList);\nexport const getParcelLockerCity = createSelector(getDelivery, delivery => delivery.pointOfSaleCity);\n\nexport const getSelectedPointOfSaleCity = createSelector(getDelivery, delivery => delivery.pointOfSaleCity);\nexport const getLastPos = createSelector(getDelivery, delivery => delivery.lastPos);\n\nexport const isPickupDeliveryValid = createSelector([getSelectedDeliveryMethod, getSelectedPointOfSaleId], (selectedMethod, posId) => {\n    return selectedMethod.id === 'pickup_from_shelf' ? !!posId : true;\n});\n\nexport const getConvergentEntries = createSelector(getMiniCart, miniCart => {\n    return miniCart.entries ? miniCart.entries.filter(cartEntry => cartEntry.entryType === CartEntryType.CONVERGENT) : [];\n});\n\nexport const getSelectedMethodForDocuments = createSelector(\n    [getDelivery, getSelectedDeliveryMethods, getConvergentEntries],\n    (delivery, selectedDeliveryMethods, convergentEntries) =>\n        convergentEntries.length === 0\n            ? delivery.selectedMethod\n            : ((selectedDeliveryMethods && getDocumentsDeliveryForConvergent(selectedDeliveryMethods)) || delivery.selectedMethod)\n);\n\nfunction getDocumentsDeliveryForConvergent(selectedDeliveryMethods) {\n    if(isDeliveryMethodRequired(selectedDeliveryMethods.fixDocuments)) {\n        return selectedDeliveryMethods.fixDocuments && selectedDeliveryMethods.fixDocuments.id;\n    } else {\n        return selectedDeliveryMethods.mobile && selectedDeliveryMethods.mobile.id;\n    }\n}\n\nexport const getDeliveryCheckoutData = createSelector(\n    [\n        getDeliveryBundles,\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethodForDevicesForOrder,\n        getDelivery,\n        getConvergentEntries,\n        getDeliveryFix,\n        getCourierAdditionalInfo,\n        getMappedAddressDelivery,\n        getAddressDeliveryMapping,\n        getDeliveryPhoneContact,\n        getDeliveryEmailAddress,\n        getIsDeliveryModesEqual,\n        getSelectedPointOfSaleId,\n        getAgreementType,\n    ], (deliveryBundles, method, methodForDevicesId, delivery, convergentEntries, deliveryFix, courierMessage, deliveryAddress, mappedDelivery, phoneContact, emailAddress, isDeliveryModesEqual, pos, documentDeliveryMethod) => {\n        const isNewAddress = mappedDelivery === 'delivery';\n        const methodId = method ? method.id : \"\";\n        const methodDevicesId = (isDeliveryModesEqual) ? methodId : methodForDevicesId;\n        const bundles = [];\n        if (convergentEntries.length > 0) {\n            const mobileBundles = [];\n            delivery.methods\n                .filter(method => method.factory === \"MOBILE\")\n                .forEach(method => method.bundleNumbers.forEach(bundle => mobileBundles.push(bundle)));\n            const distinctMobileBundles = [...new Set(mobileBundles)];\n            if (distinctMobileBundles.length > 0) {\n                distinctMobileBundles.forEach(bundle => {\n                    bundles.push({\n                        phoneContact: phoneContact,\n                        courierAdditionalInfo: courierMessage,\n                        deliveryDataForm: deliveryAddress,\n                        bundleNo: bundle,\n                        deliveryMethod: delivery.selectedDeliveryMethods.mobile,\n                        pointOfServiceName: pos,\n                        newAddress: isNewAddress,\n                        documentsDeliveryModeName: documentDeliveryMethod,\n                        emailAddress\n                    })\n                });\n            }\n\n            if (deliveryFix && deliveryFix.length > 0) {\n                bundles.push({\n                    phoneContact: phoneContact,\n                    courierAdditionalInfo: courierMessage,\n                    deliveryDataForm: deliveryAddress,\n                    bundleNo: deliveryFix[0].bundleNumbers[0],\n                    deliveryMethod: delivery.selectedDeliveryMethods.fixDocuments,\n                    deliveryMethodForDevices: delivery.selectedDeliveryMethods.fixDevices,\n                    pointOfServiceName: '',\n                    newAddress: isNewAddress,\n                    documentsDeliveryModeName: documentDeliveryMethod,\n                    emailAddress\n                });\n            }\n            return bundles;\n        } else {\n            return deliveryBundles.map(b => ({\n                phoneContact: phoneContact,\n                courierAdditionalInfo: courierMessage,\n                deliveryDataForm: deliveryAddress,\n                bundleNo: b,\n                deliveryMethod: methodId,\n                deliveryMethodForDevices: methodDevicesId,\n                pointOfServiceName: pos,\n                newAddress: isNewAddress,\n                documentsDeliveryModeName: documentDeliveryMethod,\n                emailAddress\n            }));\n        }\n    }\n);\n\nexport const getMyPosition = createSelector(getDelivery, delivery => {\n    const myPosition = delivery.pointsOfSale.filter(pos => pos.category === 'myPosition');\n\n    return myPosition.shift();\n});\n\n//MINICART - BUNDLENO\nfunction onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n}\n\nexport const getFixEntries = createSelector(getMiniCart, miniCart => {\n    return miniCart.entries ? miniCart.entries.filter(cartEntry => cartEntry.entryType === CartEntryType.FIX) : [];\n});\n\nexport const getConvergentBundleNos = createSelector(getConvergentEntries, convergentEntries => {\n    const convergentSubEntries = convergentEntries.map(cartEntry => cartEntry.entries);\n    const allBundleNos = [].concat.apply([], convergentSubEntries).map(cartEntry => cartEntry.bundleNo);\n    return allBundleNos.filter(onlyUnique);\n});\n\nexport const getFixBundleNos = createSelector(allCartEntries, cartEntries => {\n    return cartEntries\n        .filter(cartEntry => cartEntry.entryType === CartEntryType.FIX)\n        .map(cartEntry => cartEntry.bundleNo)\n        .filter(onlyUnique);\n});\n\n//INSTALLATION\nexport const getInstallation = createSelector(getCheckoutState, checkout => checkout.installation);\nexport const getInstallationAvailableTimeSlots = createSelector(getInstallation, installation => installation.availableTimeSlots);\nexport const getInstallationPhoneContact = createSelector(getInstallation, installation => installation.phoneContactDAP || \"\");\nexport const getAdditionalInstallationData = createSelector(getInstallation, installation => {\n    const additionalData = installation.availableTimeSlots.additionalData;\n    if (!!additionalData) {\n        return {\n            ...additionalData,\n            installationAddress: {\n                ...additionalData.installationAddress,\n                streetName: additionalData.installationAddress.line1,\n                streetNumber: additionalData.installationAddress.line2,\n            }\n        };\n    }\n    return additionalData;\n});\nexport const getKwmLoadingState = createSelector(getInstallation, installation => installation.loading);\nexport const getKwmSelectedSlotDescription = createSelector(getInstallation, installation => installation.selectedSlotDisplayText);\nexport const getShowSelectedSlotError = createSelector(getInstallation, installation => installation.showSelectedSlotError);\nexport const getShouldRefreshSlots = createSelector(getInstallation, installation => installation.shouldRefresh);\n\nexport const getSelectedInstallationTimeSlot = createSelector(getInstallation, installation => installation.selectedInstallationTimeSlot);\nexport const getInstallationComment = createSelector(getInstallation, installation => installation.comment);\nexport const getInstallationCheckoutData = createSelector([getSelectedInstallationTimeSlot, getInstallationComment, getFixBundleNos, getInstallationPhoneContact], (installationTimeSlot, installationComment, fixBundleNos, phoneNumber) => {\n    if (!installationTimeSlot) {\n        return [];\n    }\n    return fixBundleNos.map(bundleNo => ({\n            bundleNo: bundleNo,\n            startDate: installationTimeSlot.startDate,\n            endDate: installationTimeSlot.endDate,\n            comment: installationComment,\n            phoneNumber: phoneNumber}\n    ));\n});\nexport const shouldSelectInstallation = createSelector(getInstallationAvailableTimeSlots, installationAvailableTimeSlots => {\n    return installationAvailableTimeSlots && installationAvailableTimeSlots.slots && installationAvailableTimeSlots.slots.length > 0;\n});\n\n// payment\nexport const getPayment = createSelector(getCheckoutState, checkout => checkout.payment);\nexport const getAvailablePaymentMethods = createSelector([getDeliveryMethods, getSelectedDeliveryMethod, getLastPos, getDelivery], (deliveryMethods, selectedMethod, lastPos, delivery) => {\n    const selectedMethodId = selectedMethod ? selectedMethod.id : \"\";\n    const supportedPaymentMethods = deliveryMethods.filter(dm => dm.id === selectedMethodId).flatMap(dm => dm.supportedPaymentMethods);\n    //filter DeliveryMethods when parcelLocker is present;\n    if(selectedMethodId === \"parcel_locker\"){\n        let checkPayU = supportedPaymentMethods.some(t => t.code === \"PayU\" || t.code === \"BlueMedia\");\n        if(checkPayU === true){\n            if(lastPos.paymentByCardPossibility === true && lastPos.paymentType === true){\n                return supportedPaymentMethods.filter(sPM=>[\"Cash\", \"PayU\", \"BlueMedia\"].includes(sPM.code));\n            }else{\n                return supportedPaymentMethods.filter(sPM=>[\"PayU\", \"BlueMedia\"].includes(sPM.code));\n            }\n        }else {\n            if(lastPos.paymentByCardPossibility === true && lastPos.paymentType === true){\n                return supportedPaymentMethods.filter(sPM=>[\"Cash\"].includes(sPM.code));\n            }else {\n                return[];\n            }\n        }\n    }\n    if(supportedPaymentMethods.length === 0 && !delivery.isDeliveryRequired) {\n        return [{code:delivery.paymentWithoutDeliveryMethod}];\n    } else {\n        return supportedPaymentMethods;\n    }\n});\n\nexport const getSelectedPaymentMethod = createSelector(getPayment, payment => payment.selectedMethod);\nexport const getSelectedPaymentModeValueEligCode = createSelector(getPayment, payment => payment.selectedEligCode);\n\nexport const isOnlinePaymentMethodSelected = createSelector(getPayment, payment => payment.selectedMethod === \"PayU\" || payment.selectedMethod === \"BlueMedia\");\n\nexport const getPaymentCheckoutData = createSelector([getDeliveryBundles, getSelectedPaymentMethod,getSelectedPaymentModeValueEligCode], (bundles, payment,eligCode) => {\n    const paymentMethod = payment && payment.length > 0 ? payment : \"Cash\";\n    return bundles.map(b => ({\n        bundleNo: b,\n        paymentMethod,\n        eligCode\n    }));\n});\nexport const getFeeForSelectedPaymentMethod = createSelector([getSelectedDeliveryMethod, getSelectedPaymentModeValueEligCode], (selectedDeliveryMethod, selectedPaymentModeValueEligCode) => {\n        if (selectedDeliveryMethod.supportedPaymentMethods && selectedPaymentModeValueEligCode) {\n            const selectedPaymentMethod = selectedDeliveryMethod.supportedPaymentMethods.find(method => selectedPaymentModeValueEligCode === method.eligCode);\n            return selectedPaymentMethod && selectedPaymentMethod.fee || \"\";\n        }\n        return \"\";\n    }\n);\nexport const getDeliveryTotalCost = createSelector([getSelectedDeliveryMethod, getFeeForSelectedPaymentMethod], (selectedDeliveryMethod, fee) => {\n    if (selectedDeliveryMethod && selectedDeliveryMethod.price && fee) {\n        const total = parseFloat(selectedDeliveryMethod.price) + parseFloat(fee);\n        return total.toFixed(2).replace(\".\", \",\") + \" zł\";\n    }\n    return \"0,00 zł\";\n});\n// CONSENTS DATA\nexport const getCheckoutConsents = createSelector(getCheckoutState, checkout => checkout.consents.consents);\n\nexport const getConsentsData = createSelector(getCheckoutState, checkout => checkout.consents);\nexport const getConsentsStatesData = createSelector(getCheckoutState, checkout => checkout.consents.consentStates);\nexport const getConsentsCheckoutData = createSelector([getConsentsStatesData, getConsentsData], makeBundleNoNullIfNecessary);\n\nconst selectedConsentsStateCodes = createSelector(getConsentsData, consentData => {\n    let consentStates = consentData.consentStates || [];\n    return consentStates.map(consentState => consentState.stateCode);\n});\nconst getConsentsForSubtype = subType => createSelector(getConsentsData, consentData => {\n    let consents = consentData.consents || [];\n    return consents.filter(consent => consent.subType === subType);\n});\nconst getConsentNegativeStateCodesForSubType = subType => createSelector(getConsentsForSubtype(subType), earlierInstallationConsents => {\n    let consentPositiveStateCodes = earlierInstallationConsents.map(consent => consent.states.filter(consentState => !consentState.positive).map(consentState => consentState.code));\n    return _.flattenDeep(consentPositiveStateCodes);\n});\n\nexport const getConsentEmailAddress = createSelector(getConsentsData, checkout => checkout.consentEmailAddress);\nexport const getConsentPhoneNumber = createSelector(getConsentsData, checkout => checkout.consentPhoneNumber);\nexport const getConsentAcknowledgmentsReadWhileTalking = createSelector(getConsentsData, checkout => checkout.consentAcknowledgmentsReadWhileTalking);\nexport const getConsentDocumentStatus = createSelector(getConsentsData, checkout => checkout.consentDocumentStatus);\n\n\n// CONSENTS DATA - EARLIER INSTALLATION\nexport const areMainEarlierInstallationConsentsAccepted = createSelector([selectedConsentsStateCodes, getConsentNegativeStateCodesForSubType(\"MAIN_EARLIER_INSTALLATION\")], (selectedConsentsStateCodes, earlierInstallationConsentNegativeStateCodes) =>\n    !earlierInstallationConsentNegativeStateCodes.some(earlierInstallationConsentPositiveStateCode => selectedConsentsStateCodes.includes(earlierInstallationConsentPositiveStateCode))\n);\nexport const areAdditionalEarlierInstallationConsentsAccepted = createSelector([selectedConsentsStateCodes, getConsentNegativeStateCodesForSubType(\"ADDITIONAL_EARLIER_INSTALLATION\")], (selectedConsentsStateCodes, earlierInstallationConsentNegativeStateCodes) =>\n    !earlierInstallationConsentNegativeStateCodes.some(earlierInstallationConsentPositiveStateCode => selectedConsentsStateCodes.includes(earlierInstallationConsentPositiveStateCode))\n);\nexport const isMainEarlierInstallationConsentPresent = createSelector(getConsentsForSubtype(\"MAIN_EARLIER_INSTALLATION\"), earlierInstallationConsents => earlierInstallationConsents.length > 0);\n\nexport const isEarlierInstallation = createSelector([isMainEarlierInstallationConsentPresent, areMainEarlierInstallationConsentsAccepted, areAdditionalEarlierInstallationConsentsAccepted], (isMainEarlierInstallationConsentPresent, areMainEarlierInstallationConsentsAccepted, areAdditionalEarlierInstallationConsentsAccepted) => {\n    if (isMainEarlierInstallationConsentPresent) {\n        return areMainEarlierInstallationConsentsAccepted;\n    } else {\n        return areAdditionalEarlierInstallationConsentsAccepted;\n    }\n});\n\nexport const updatingConsents = createSelector(getMetadata, metadata => metadata.updatingConsents);\nexport const updatingAnyConsent = createSelector(getMetadata, metadata => metadata.consents.updating);\nexport const consentsDataInRequest = createSelector(getMetadata, metadata => metadata.consents.data || {});\nexport const cartConsentsDataRequested = createSelector(getMetadata, metadata => metadata.cartConsents.requested);\nexport const getConsentsProps = createSelector(\n    [getConsentsData, updatingConsents, updatingAnyConsent, getConsentsCheckoutData],\n    (data, updatingConsents, updatingAnyConsent, consentStates) => ({...data, updatingConsents, updatingAnyConsent, consentStates})\n);\nexport const getBonusesConsents = createSelector(getConsentsData, consentsData => {\n    function isRelatedWithBonusBySection(conf, consent){\n        return conf.some(conf => {\n             return (conf.sections || [])\n             .filter(s => s.withBonus)\n             .map(s=>s.consentsCode)\n             .some(\n                cCodes=>cCodes.indexOf(consent.consentCode) > -1\n             )\n        })\n    }\n\n    return consentsData.consents.filter((consentData) => consentData.isRelatedWithBonus || isRelatedWithBonusBySection(consentsData.conf, consentData));\n});\n\nexport const getConsentsWithBonuses = createSelector([getConsentsData, getBonusesConsents], (consentsData, bonusConsents) => {\n\n    return bonusConsents.map((consent) => {\n        const currentState = consentsData.consentStates.find((state) => state.consentCode === consent.consentCode);\n        const stateCode = currentState ? currentState.stateCode : \"\";\n        return ({\n            state: consent.states.find((state) => state.code === stateCode),\n            title: consent.title,\n            bonuses: consent.bonuses\n        });\n    });\n});\nexport const getBigAndZonkConsents = createSelector(getConsentsData, consentsData => {\n    return consentsData.consents.filter((consentData) => consentData.consentCode === \"100_CONV\" || consentData.consentCode === \"MSCONSENT_4\")\n});\nexport const areBigAndZonkConsentsAccepted = createSelector([getBigAndZonkConsents, getConsentsData], (bigAndZonkConsents, consentsData) => {\n    return !bigAndZonkConsents.find((consent) => {\n        const currentState = consentsData.consentStates.find((state) => state.consentCode === consent.consentCode);\n        return consent.states.find((state) => (state.code === (currentState ? currentState.stateCode : \"\")) && !state.positive)\n    });\n});\n\nexport const areConsentsWithBonusesAccepted = createSelector(getConsentsWithBonuses, bonusConsents => {\n    return !bonusConsents.find(bonusConsent => bonusConsent.state.positive !== true);\n});\n\nexport const getCvDocumentsData = createSelector(getCheckoutState, checkout => checkout.cvDocuments);\nexport const getSelectedCvDocument = createSelector(getCvDocumentsData, cvDocuments => cvDocuments.selectedCustomerAdditionalDocument);\nexport const getDocumentCustomerWorkPhoneNumber = createSelector(getCvDocumentsData, cvDocuments => cvDocuments.customerWorkPhoneNumber);\nexport const getCvDocumentsCheckoutData = createSelector([getDeliveryBundles, getSelectedCvDocument, getDocumentCustomerWorkPhoneNumber],\n    (bundles, selected, phone) => {\n        return selected ? bundles.map(b => ({\n            bundleNo: b,\n            selectedCustomerAdditionalDocument: selected,\n            customerWorkPhoneNumber: phone\n        })) : [];\n    }\n);\nexport const getCvDocumentsList = createSelector(getCvDocumentsData, cvDocuments => {\n    return (cvDocuments.cvDocumentsList[0]) ? cvDocuments.cvDocumentsList : [] ;\n});\nexport const getCvDocumentsErrors = createSelector(getCvDocumentsData, cvDocuments => cvDocuments.errors);\n\n\nexport const getInvoiceEmail = createSelector(getInvoiceData, data => data.invoiceEmail);\nexport const getInvoiceEmailMapping = createSelector(getInvoiceData, data => data.invoiceEmailMapping);\nexport const getInvoiceEmailErrors = createSelector(getInvoiceData, data => data.errors);\nexport const isContactEmailFilledAndValid = createSelector([getCustomerNoEmail, getCustomerEmailAddress, getCustomerContactErrors],\n    (customerNoEmail, email, errors) => {\n        return !customerNoEmail && (email && email.length > 0) && !(errors && errors.emailAddress && errors.emailAddress.length !== 0);\n    });\nexport const getInvoiceEmailForm = createSelector([getInvoiceEmail, getInvoiceEmailMapping, getInvoiceEmailErrors, isContactEmailFilledAndValid, customerDataFinished],\n    (invoiceEmail, invoiceEmailMapping, errors, contactEmailFilledAndValid, customerFinished) => (\n        {invoiceEmail, invoiceEmailMapping, errors, contactEmailFilledAndValid, customerFinished}\n    )\n);\nexport const isInvoiceDataValid = createSelector(\n    [getInvoiceEmailErrors], (errors) => {\n        return errors.length === 0;\n    });\n\nexport const getInvoiceDataCheckoutData = createSelector([getInvoiceEmailMapping, getInvoiceEmail, getCustomerEmailAddress], (invoiceEmailMapping, invoiceEmail, customerEmailAddress) => {\n        return invoiceEmail !== null ? {invoiceEmail: (invoiceEmailMapping === 'invoiceEmail' ? invoiceEmail : customerEmailAddress)} : null;\n    }\n);\n\nexport const getCheckoutData = createSelector(\n    [getCustomerCheckoutData, getRepresentativeDataForBackend, getConsentsCheckoutData, getDeliveryCheckoutData, getInstallationCheckoutData, getPaymentCheckoutData, getMNPCheckoutData, getCvDocumentsCheckoutData, getTelesales, getBillingAccountCheckoutData, getDebtRepayment, getInvoiceDataCheckoutData],\n    (customer, representativeData, consentStates, delivery, installation, payment, mnp, additionalDocuments, telesales, billingAccount, debtRepayment, invoiceData) => {\n        if(!!mnp) {\n            mnp.forEach(m => m.email = customer.emailAddress);\n        }\n        return {\n            customer: fixCustomerCheckoutData(customer),\n            representativeData: toUpperCase(representativeData),\n            consentStates,\n            delivery,\n            installation,\n            payment,\n            mnp,\n            additionalDocuments,\n            telesales,\n            billingAccount,\n            debtRepayment,\n            invoiceData\n        }\n    }\n);\n\nexport const getCheckoutDataForDelivery = createSelector(\n    [getCustomerCheckoutData, getRepresentativeDataForBackend, getConsentsCheckoutData, getDeliveryCheckoutData, getInstallationCheckoutData, getPaymentCheckoutData, getMNPCheckoutData, getCvDocumentsCheckoutData, getTelesales, getBillingAccountCheckoutData, getDebtRepayment, getKdrCheckoutData],\n    (customer, representativeData, consentStates, delivery, installation, payment, mnp, additionalDocuments, telesales, billingAccount, debtRepayment) => {\n        if(!!mnp) {\n            mnp.forEach(m => m.email = customer.emailAddress);\n        }\n        return {\n            customer: fixCustomerCheckoutData(customer),\n            representativeData: toUpperCase(representativeData),\n            consentStates,\n            delivery,\n            installation,\n            mnp,\n            additionalDocuments,\n            telesales,\n            billingAccount,\n            debtRepayment\n        }\n    }\n);\nexport const getDocumentsConfirmationState = createSelector(getConsentsData, consents => consents.documentsConfirmation);\nexport const getModifyConsentsInCartQueue = createSelector(getConsentsData, consents => consents.modifyConsentsInCartQueue);\n\nconst canSkipNumberReservation = createSelector(\n    [getSelectedMethodForDevices, getSelectedDeliveryMethods, getConvergentEntries, getMobileCartDevices],\n    (selectedMethodForDevices, selectedDeliveryMethods, convergentEntries, mobileDevices) =>\n        convergentEntries.length === 0\n            ? (selectedMethodForDevices && selectedMethodForDevices !== \"\" && selectedMethodForDevices !== DeliveryMethod.POS)\n            : isSerialNumberRequirementFulfilledForMagnum(mobileDevices,selectedDeliveryMethods,convergentEntries)\n);\n\nexport const cartContainsReservableItems = createSelector([allCartEntries, getSelectedDeliveryMethods, getSelectedMethodForDevices], (cartEntries, selectedDeliveryMethods, selectedMethodForDevices)=> {\n    let reservableCartEntries = cartEntries.filter(entry => {\n        let selectedDeliveryMethod;\n        if (entry.entryType === CartEntryType.FIX) {\n            selectedDeliveryMethod = selectedDeliveryMethods.fixDevices ? selectedDeliveryMethods.fixDevices.id : selectedMethodForDevices;\n        } else {\n            selectedDeliveryMethod = selectedDeliveryMethods.mobile ? selectedDeliveryMethods.mobile.id : \"\";\n        }\n        return selectedDeliveryMethod === \"\" || selectedDeliveryMethod === DeliveryMethod.POS;\n    });\n    return cartEntriesContainsReservableItems(reservableCartEntries);\n});\n\nexport const cartContainsAnySim = createSelector(allCartEntries, cartEntries => {\n    return cartContainsEsim(cartEntries);\n});\n\nexport const cartContainsReservableSim = createSelector([getSelectedDeliveryMethods, cartContainsAnySim], (selectedDeliveryMethods, anySim)=> {\n    let selectedDeliveryMethod = selectedDeliveryMethods.mobile ? selectedDeliveryMethods.mobile.id : \"\";\n    return (selectedDeliveryMethod === \"\" || selectedDeliveryMethod === DeliveryMethod.POS) && anySim;\n});\n\nexport const cartContainsAnyPhysicalSimCard = createSelector(allCartEntries, cartEntries => {\n    return cartEntries.filter(entry => entryContainsReservableSimCard(entry)).length > 0;\n});\n\nexport const isDigitalAgreementTypeWithoutPhysicalSimAndDevices = createSelector([getAgreementType, isCartMobile, cartContainsAnyPhysicalSimCard, cartHasMobileDevices], (agreementType, isCartMobile, cartContainsAnyPhysicalSimCard, cartHasMobileDevices) => agreementType === AgreementType.DIGITAL && isCartMobile && !cartContainsAnyPhysicalSimCard && !cartHasMobileDevices);\n\nexport const hasAgreementTypeChanged = createSelector([getCartAgreementType, getAgreementType], (cartAgreementType, agreementType) => {\n    return (!cartAgreementType && agreementType === AgreementType.DIGITAL) ||\n        (cartAgreementType === AgreementType.DIGITAL && agreementType === AgreementType.PAPER);\n});\n\nexport const getDefaultDeliveryMethod = createSelector([getDeliveryMethods, getDeliveryMethodsRaw, getDelivery], (deliveryMethodsParam, deliveryMethodsRawParam, delivery) => {\n    const deliveryMethodsRaw = (deliveryMethodsRawParam || []).filter(dm => dm.id !== DeliveryMethod.PICKUP_ON_EMAIL);\n    const deliveryMethods = (deliveryMethodsParam || []).filter(dm => dm.id !== DeliveryMethod.PICKUP_ON_EMAIL);\n    if (delivery.isFirstMethodDefault || (deliveryMethods || []).length === 1){\n        const availableDeliveryMethodCodes = deliveryMethods.map(deliveryMethod => deliveryMethod.id);\n        if (availableDeliveryMethodCodes.length > 0) {\n            console.warn(\"getDefaultDeliveryMethod\", availableDeliveryMethodCodes[0]);\n            return availableDeliveryMethodCodes[0];\n        }\n        const rawDeliveryMethodCodes = deliveryMethodsRaw.map(d => d.id);\n        return rawDeliveryMethodCodes[0] || null;\n    } else {\n        return null;\n    }\n});\n\nexport const getSelectedOrDefaultMobileAgreementType = createSelector([isAgreementTypeRequired, getCustomerNoEmail, isDigitalAgreementDefault, getCartAgreementType], (isAgreementTypeRequired, hasCustomerNoEmail, isDigitalAgreementDefault, cartAgreementType) => {\n    if (!isAgreementTypeRequired || (hasCustomerNoEmail && cartAgreementType)) {\n        return AgreementType.PAPER;\n    }\n    if (isDigitalAgreementDefault && !cartAgreementType) {\n        return AgreementType.DIGITAL;\n    }\n    return cartAgreementType;\n});\n\nexport const getSelectedOrDefaultAgreementType = createSelector(\n    [isAgreementTypeRequired, getCustomerNoEmail, isDigitalAgreementDefault, getCartAgreementType, getDeliveryMobile, getDefaultDeliveryMethod, getCartDeliveryMethod, getDeliveryMethodsRaw, getSelectedOrDefaultMobileAgreementType],\n    (isAgreementTypeRequired, hasCustomerNoEmail, isDigitalAgreementDefault, cartAgreementType, mobileDelivery, defaultDeliveryMethod, cartDeliveryMethod, rawDeliveryMethods, mobileAgreementType) => {\n        if (!mobileDelivery) {\n            const digitalAvailable = rawDeliveryMethods.map(d => d.id).some(DeliveryMethod.isDigital);\n            const cartAgreementDigital = cartAgreementType === AgreementType.DIGITAL && digitalAvailable;\n            const digital = cartAgreementDigital || (isDigitalAgreementDefault && digitalAvailable);\n            return digital ? AgreementType.DIGITAL : AgreementType.PAPER;\n        } else {\n            return hasCustomerNoEmail ? AgreementType.PAPER : mobileAgreementType;\n        }\n    });\n\nexport const getAvailableDeliveryMethodCodes = createSelector([getDeliveryMethods, getAgreementType, getCustomerNoEmail], (deliveryMethods, agreementType, customerNoEmail) => {\n    return deliveryMethods\n        .map(deliveryMethod => deliveryMethod.id)\n        .filter(deliveryMethodId => !(customerNoEmail && deliveryMethodId === DeliveryMethod.PICKUP_FROM_SHELF))\n        .filter(deliveryMethodId => !(DeliveryMethod.PICKUP_ON_EMAIL === deliveryMethodId && AgreementType.PAPER === agreementType));\n});\n\nexport const getSelectedOrDefaultDeliveryMethod = createSelector(\n    [getSelectedDeliveryMethodCode, getCartDeliveryMethod, getDefaultDeliveryMethod, isDigitalAgreementTypeWithoutPhysicalSimAndDevices, getAvailableDeliveryMethodCodes],\n    (selectedDeliveryMethodCode, cartDeliveryMethod, defaultDeliveryMethod, isDigitalAgreementTypeWithoutPhysicalSimAndDevices, availableDeliveryMethodCodes) => {\n        if (isDigitalAgreementTypeWithoutPhysicalSimAndDevices) {\n            return DeliveryMethod.PICKUP_ON_EMAIL;\n        }\n        const deliveryMethodCode = selectedDeliveryMethodCode || cartDeliveryMethod;\n        if (deliveryMethodCode && availableDeliveryMethodCodes.includes(deliveryMethodCode)) {\n            return deliveryMethodCode;\n        }\n        return defaultDeliveryMethod;\n    });\n\nexport const getSelectedOrDefaultPaymentMethod = createSelector([getSelectedDeliveryMethodCode, getDeliveryMethodsRaw, getSelectedPaymentMethod, getAvailablePaymentMethods], (selectedDeliveryMethodCode, deliveryMethodsRaw, selectedPaymentMethod, availablePaymentMethods) => {\n    const deliveryMethod = deliveryMethodsRaw.find(deliveryMethod => deliveryMethod.id === selectedDeliveryMethodCode);\n    const paymentMethodCodes = getPaymentMethodsForDelivery(deliveryMethod).map(paymentMethod => paymentMethod.id);\n    if (paymentMethodCodes.length > 0) {\n        if (paymentMethodCodes.includes(selectedPaymentMethod)) {\n            return selectedPaymentMethod;\n        }\n        return getDefaultPaymentMethodForDelivery(deliveryMethod);\n    }\n    if (availablePaymentMethods && availablePaymentMethods[0]) {\n        return availablePaymentMethods[0];\n    }\n    return null;\n});\n\nconst getDefaultPaymentMethodForDelivery = deliveryMethod => {\n    const defaultDeliveryMethodCode = getPaymentMethodsForDelivery(deliveryMethod).find(paymentMethod => paymentMethod.isDefault);\n    if (defaultDeliveryMethodCode) {\n        return defaultDeliveryMethodCode.id;\n    }\n    return null;\n};\n\nconst getPaymentMethodsForDelivery = deliveryMethod => {\n    if (deliveryMethod && deliveryMethod.supportedPaymentMethods && deliveryMethod.supportedPaymentMethods.length > 0) {\n        return deliveryMethod.supportedPaymentMethods;\n    }\n    return [];\n};\n\nexport const isSelectedDeliveryMethodAvailable = createSelector([getSelectedDeliveryMethodCode, getAvailableDeliveryMethodCodes], (selectedDeliveryMethodCode, deliveryMethodCodes) => {\n    return selectedDeliveryMethodCode && deliveryMethodCodes.includes(selectedDeliveryMethodCode);\n});\n\nexport const shouldShowEmailWarning = createSelector([getCartDeliveryMethod, getCartAgreementType, getCustomerNoEmail], (cartDeliveryMethod, cartAgreementType, customerNoEmail) => {\n    return customerNoEmail && (cartAgreementType === AgreementType.DIGITAL || cartDeliveryMethod === DeliveryMethod.PICKUP_FROM_SHELF);\n});\n\nexport const getDescriptionKey = createSelector(getCartDeliveryMethod, cartDeliveryMethod => {\n    if (cartDeliveryMethod === DeliveryMethod.PICKUP_FROM_SHELF) {\n        return EmailWarningDescriptionEnum.PICKUP;\n    }\n    return EmailWarningDescriptionEnum.DEFAULT;\n});\n\nexport const invoiceIsPresentAndPaid = createSelector(\n    [getCheckoutState, canSkipNumberReservation, cartContainsReservableItems],\n    (checkout, skipNumberReservation, cartContainsReservableItems) => (\n        (checkout.reservation.paymentAndFiscalization && checkout.reservation.paymentAndFiscalization.isInvoicePresent) ?\n            (checkout.reservation.paymentStatus || checkout.reservation.paymentOverride) :\n            ( checkout.reservation.saleUnlocked ||\n                checkout.reservation.paymentStatus ||\n                checkout.reservation.paymentOverride ||\n                !checkout.reservation.productsExists ||\n                checkout.reservation.agencyPosStatusValid ||\n                skipNumberReservation ||\n                !cartContainsReservableItems\n            )\n    )\n);\n\n\n// Cart Data\nexport const reservationData = createSelector(getCheckoutState, checkout => checkout.reservation);\nexport const getReservationSimCardTypes = createSelector(reservationData, reservation => reservation.simCardTypes);\nexport const getSimCardTypeForBundle = bundleNo => createSelector(getReservationSimCardTypes, simCardTypes => simCardTypes[bundleNo]);\nconst serialNumbersFilled = state => areSerialNumbersFilled(state.checkout.reservation.serialNumbers, state);\nexport const isReservationButtonDisabled = createSelector([reservationData, serialNumbersFilled, cartContainsReservableItems], (reservation, serialNumbersFilled, cartContainsReservableItems) => {\n    return !cartContainsReservableItems||\n        !serialNumbersFilled ||\n        reservation.sapReservationNumber ||\n        reservation.serialNumberVerificationInProgress ||\n        reservation.agencyPosStatusValid;\n});\n\nexport const containsFixEntries = createSelector([getFixEntries], fixEntries => {\n    return (fixEntries !=null && fixEntries.length > 0);\n});\n\nexport const containsConvergentEntries = createSelector([getConvergentEntries], convergentEntries => {\n    return (convergentEntries !=null && convergentEntries.length > 0);\n});\n\nexport const getCustomerForm = createSelector(\n    [\n        getCustomerData,\n        getCustomerDataErrors,\n        isExistingCustomer,\n    ], (\n        data,\n        errors,\n        existing,\n        readOnly\n    ) => ({\n        ...data,\n        errors,\n        existing,\n        readOnly,\n    })\n);\n\nexport const getContactCustomerForm = createSelector(\n    [\n        getCustomerContact,\n        getCustomerContactErrors,\n        isExistingCustomer,\n    ], (\n        contact,\n        errors,\n        existing,\n        readOnly\n    ) => ({\n        ...contact,\n        errors,\n        existing,\n        readOnly,\n    })\n);\n\n// Component specific selectors - move to containers\nexport const getCustomerDataForm = createSelector(\n    [\n        getCustomerData,\n        getCustomerDataErrors,\n        isCustomerDataReadOnly,\n        isExistingCustomer,\n        getSalesOfGoodsProcess,\n        getSalesOfAddonsProcess,\n        customerDataRequested,\n        customerDataLoading,\n        isSmsVerified,\n        isOnlineCookie,\n        isWWW,\n        bpgRequested,\n        containsFixEntries,\n        getCartIsNet,\n        isNewAgreementInDocuments,\n        isCartFix,\n    ],(\n        data,\n        errors,\n        readOnly,\n        existing,\n        isSalesOfGoodsOnly,\n        isSalesOfAddonsOnly,\n        customerDataRequested,\n        customerDataLoading,\n        isSmsVerified,\n        isOnlineCookie,\n        isWWW,\n        bpgRequested,\n        containsFixEntries,\n        isB2B,\n        isNewAgreementInDocuments,\n        isCartFix\n    ) => (\n        {\n            ...data,\n            errors,\n            readOnly,\n            existing,\n            isSalesOfGoodsOnly,\n            isSalesOfAddonsOnly,\n            show: customerDataRequested && !customerDataLoading,\n            isSmsVerified,\n            isOnlineCookie,\n            isWWW,\n            bpgRequested,\n            containsFixEntries,\n            isB2B,\n            isBzuOnlyAvailableOptionForFix: !isNewAgreementInDocuments && existing && isSalesOfAddonsOnly && isCartFix,\n        }\n    )\n);\n\nexport const getCustomerDataToValidation = createSelector(\n    [getCustomerDataForm, getSalesOfGoodsProcess, getSalesOfAddonsProcess], (data, isSOG, isSOA) => {\n        const dataToValidate = {};\n        const keysToIgnore = [];\n        if (data.isBusinessClient) {\n            Object.keys(emptyPersonalData).forEach(k => keysToIgnore.push(k));\n            if (isSOG || isSOA) {\n                keysToIgnore.push(\"regon\");\n                keysToIgnore.push(\"registrationDate\");\n                keysToIgnore.push(\"companyStatus\");\n            }\n        } else {\n            Object.keys(emptyBusinessData).forEach(k => keysToIgnore.push(k));\n            if (isSOG || isSOA) {\n                Object.keys(emptyPolishPersonalData).forEach(k => keysToIgnore.push(k));\n                Object.keys(emptyForeignerPersonalData).forEach(k => keysToIgnore.push(k));\n            } else {\n                if (data.foreigner) {\n                    getKeysToIgnoreForForeigner(keysToIgnore, data).forEach(key => keysToIgnore.push(key));\n                } else {\n                    Object.keys(emptyForeignerPersonalData).forEach(k => keysToIgnore.push(k));\n                }\n            }\n        }\n        Object.keys(data).filter(k => keysToIgnore.indexOf(k) === -1).forEach(vk => dataToValidate[vk] = data[vk]);\n        return dataToValidate;\n    }\n);\n\nconst getKeysToIgnoreForForeigner = (keysToIgnore, customer) => {\n    if (!customer.noPesel) {\n        return [...keysToIgnore, Object.keys(emptyPolishPersonalData).filter(key => key !== \"pesel\")];\n    }\n    return [...keysToIgnore, Object.keys(emptyPolishPersonalData)];\n};\n\nexport const getCustomerMainAddressForm = createSelector(\n    [\n        getAddressMain,\n        getCustomerMainAddressErrors,\n        getCitySuggestionsForMainAddress,\n        getStreetSuggestionsForMainAddress,\n        getMainAddressValidation,\n        isCustomerDataReadOnly,\n        customerDataRequested,\n        customerDataLoading,\n        isBusinessClient,\n        isForeignerCheckboxAvailable,\n        bpgRequested,\n        isExistingCustomer,\n        hasFixAddress,\n        getSalesOfGoodsProcess,\n        getSalesOfAddonsProcess,\n        isWWW,\n        isNewAgreementInDocuments,\n        isCartFix,\n    ],\n    (\n        address,\n        errors,\n        citySuggestions,\n        streetSuggestions,\n        validation,\n        readOnly,\n        customerDataRequested,\n        customerDataLoading,\n        isBusinessClient,\n        isForeignerCheckboxAvailable,\n        bpgRequested,\n        existing,\n        hasFixAddress,\n        isSalesOfGoodsOnly,\n        isSalesOfAddonsOnly,\n        isWWW,\n        isNewAgreementInDocuments,\n        isCartFix\n    ) => (\n        {\n            ...address,\n            errors,\n            citySuggestions,\n            streetSuggestions,\n            validation,\n            readOnly,\n            isBusinessClient,\n            isForeignerCheckboxAvailable,\n            bpgRequested,\n            show: customerDataRequested && !customerDataLoading,\n            existing,\n            hasFixAddress,\n            isSalesOfGoodsOnly,\n            isSalesOfAddonsOnly,\n            isWWW,\n            isBzuOnlyAvailableOptionForFix: !isNewAgreementInDocuments && existing && isSalesOfAddonsOnly && isCartFix,\n        }\n    )\n);\n\nexport const getCustomerCorrespondenceAddressForm = createSelector(\n    [getAddressCorrespondence, getCustomerCorrespondenceAddressErrors, getCitySuggestionsForCorrespondenceAddress, getStreetSuggestionsForCorrespondenceAddress, getCorrespondenceAddressValidation, getAddressCorrespondenceMapping, isCustomerDataReadOnly],\n    (address, errors, citySuggestions, streetSuggestions, validation, addressMapping, readOnly) => ({...address, errors, citySuggestions, streetSuggestions, validation, addressMapping, readOnly})\n);\n\nfunction isEmailRequiredByEntries(entries) {\n    const subTypeRequiringEmail = \"NEOIBEZP\";\n    return entries.some(entry => (entry.vases || []).some(vas => vas.subType === subTypeRequiringEmail));\n}\n\nexport const isEmailRequiredByProductInCart = createSelector([getFixEntries, getConvergentEntries, containsFixEntries, containsConvergentEntries], (fixEntries, convergentEntries, containsFixEntries, containsConvergentEntries) => {\n    if (containsFixEntries) {\n        return isEmailRequiredByEntries(fixEntries);\n    } else if (containsConvergentEntries) {\n        return convergentEntries.some(entry => isEmailRequiredByEntries(entry.entries));\n    }\n    return false;\n});\n\nexport const isEmailFormValid = createSelector([isEmailRequiredByProductInCart, getCustomerNoEmail], (isEmailRequiredByProductInCart, customerNoEmail) => {\n    return isEmailRequiredByProductInCart && customerNoEmail;\n});\n\nexport const getMnpContactMethods = contactMethods => createSelector(isEmailFilledAndValid, (isEmailFilledAndValid) => {\n    if (isEmailFilledAndValid) {\n        return contactMethods.sort((a, b) => a.priority - b.priority);\n    }\n    return contactMethods.filter(contactMethod => !like(contactMethod.value, \"EMAIL\"))\n        .sort((a, b) => a.priority - b.priority);\n});\n\nexport const isEmailFilledAndValid = createSelector([getCustomerContact, getCustomerContactErrors], (contact, contactErrors) => {\n    return contact.emailAddress && (!contactErrors || !contactErrors.emailAddress || contactErrors.emailAddress.length === 0);\n});\n\nexport const getCustomerContactForm = createSelector(\n    [\n        getCustomerContact,\n        getCustomerContactErrors,\n        isCustomerDataReadOnly,\n        isExistingCustomer,\n        getFixEntries,\n        customerDataRequested,\n        customerDataLoading,\n        isBusinessClient,\n        isForeignerCheckboxAvailable,\n        bpgRequested,\n        getSalesOfGoodsProcess,\n        getSalesOfAddonsProcess,\n        isWWW,\n        isEmailRequiredByProductInCart,\n    ],\n    (\n        contact,\n        errors,\n        readOnly,\n        existing,\n        fixentries,\n        customerDataRequested,\n        customerDataLoading,\n        isBusinessClient,\n        isForeignerCheckboxAvailable,\n        bpgRequested,\n        isSalesOfGoodsOnly,\n        isSalesOfAddonsOnly,\n        isWWW,\n        isEmailRequiredByProductInCart\n    ) => (\n        {\n            ...contact,\n            errors,\n            readOnly,\n            existing,\n            fixentries,\n            isBusinessClient,\n            isForeignerCheckboxAvailable,\n            bpgRequested,\n            show: customerDataRequested && !customerDataLoading,\n            isSalesOfGoodsOnly,\n            isSalesOfAddonsOnly,\n            isWWW,\n            isEmailRequiredByProductInCart,\n        }\n    )\n);\nexport const getCustomerContactMsisdn = createSelector(getCustomerContact,contact=>contact.phoneNumber);\nexport const getDeliveryAddressForm = createSelector(\n    [\n        getAddressDelivery,\n        getDeliveryAddressErrors,\n        getCitySuggestionsForDeliveryAddress,\n        getStreetSuggestionsForDeliveryAddress,\n        getDeliveryAddressValidation,\n        getAddressDeliveryMapping,\n        isCustomerDataReadOnly,\n        getAddressMain,\n    ], (address, errors, citySuggestions, streetSuggestions, validation, addressMapping, readOnly, addressMain) => (\n        {...address, errors, citySuggestions, streetSuggestions, validation, addressMapping, readOnly, addressMain}\n    )\n);\n\n//usunac tego hardcode na city ale to po konsultacji z tworca tej formatki\nexport const isDeliveryAddressValid = createSelector([getDeliveryAddressValidation, getAddressDeliveryMapping, getAddressDelivery], (cbsResult, addressType, deliveryAddress) => {\n    return addressType === \"main\" || (addressType === \"delivery\" && !Object.keys(cbsResult).find(key => key !==\"city\" && !cbsResult[key]) && !_isEmpty(deliveryAddress.streetNumber))\n});\n\n//VALIDATION\n//przyklad uzycia selectora ktory pobiera propsy z komponentu jako argumenty\n//export const createTestPropsSelector = () => createSelector([getConsentsData, (_,props) => props.consentTypesList],(consentData,cmsConfig) => {return {test:consentData,cms:cmsConfig}})\n\nexport const allConsentsValid = createSelector([getCheckoutConsents, getConsentsCheckoutData], (consents, selectedStates) => {\n    return !consents.find(consent => !validateConsent(consent, selectedStates));\n});\n\nconst isSerialNumberRequirementFulfilledForMagnum = (mobileDevices, selectedDeliveryMethods, convergentEntries) => selectedDeliveryMethods && isSerialNumberRequirementFulfilledForFixPart(selectedDeliveryMethods) && isSerialNumberRequirementFulfilledForMobilePart(mobileDevices, selectedDeliveryMethods, convergentEntries);\n\nconst isSerialNumberRequirementFulfilledForFixPart = selectedDeliveryMethods => !isDeliveryMethodRequired(selectedDeliveryMethods.fixDevices) || (isDeliveryMethodSelected(selectedDeliveryMethods.fixDevices) && selectedDeliveryMethods.fixDevices.id !== DeliveryMethod.POS);\n\nconst isSerialNumberRequirementFulfilledForMobilePart = (mobileDevices,selectedDeliveryMethods, convergentEntries) => (mobileDevices && mobileDevices.length === 0 && !checkSimInConvergentEntries(convergentEntries)) || !isDeliveryMethodRequired(selectedDeliveryMethods.mobile) || (isDeliveryMethodSelected(selectedDeliveryMethods.mobile) && selectedDeliveryMethods.mobile.id !== DeliveryMethod.POS);\n\nfunction checkSimInConvergentEntries(convergentEntries) {\n    if (convergentEntries){\n        let entries = convergentEntries[0];\n        return entries.entries.some(convergentEntriesInEntries => convergentEntriesInEntries.isSim === true);\n    } else {\n        return false;\n    }\n\n}\n\nfunction _countEntriesForProcess(processEntries, process) {\n    let res = 0;\n    for (let i = 0; i < processEntries.length; i++) {\n        if (processEntries[i] === process) {\n            res++;\n        }\n    }\n    return res;\n}\n\nfunction _isFormFilled(data, isSalesOfGoodsProcess, isSalesOfAddonsProcess)  {\n    const excludeValidKeys = _getExcludedFieldConfiguration(data, isSalesOfGoodsProcess, isSalesOfAddonsProcess);\n    return Object.keys(data)\n        .filter(key => excludeValidKeys.indexOf(key) === -1)\n        .filter(key => typeof(data[key]) !== \"boolean\" && !data[key]).length === 0;\n}\n\nfunction _getExcludedFieldConfiguration(data, isSalesOfGoodsProcess, isSalesOfAddonsProcess) {\n    const excludeValidKeys = [];\n\n    excludeValidKeys.push(\"foreigner\");\n    excludeValidKeys.push(\"isBusinessClient\");\n    excludeValidKeys.push(\"customerNoEmail\");\n    excludeValidKeys.push(\"noPesel\");\n    excludeValidKeys.push(\"fakePesel\");\n    excludeValidKeys.push(\"peselType\");\n    excludeValidKeys.push(\"statusAndDateFromBpg\");\n    excludeValidKeys.push(\"hasActiveContracts\");\n\n    if (data.isBusinessClient) {\n        excludeValidKeys.push(\"pesel\");\n        excludeValidKeys.push(\"idNumber\");\n        excludeValidKeys.push(\"firstName\");\n        excludeValidKeys.push(\"lastName\");\n        excludeValidKeys.push(\"country\");\n        excludeValidKeys.push(\"identification\");\n        excludeValidKeys.push(\"identificationNumber\");\n        excludeValidKeys.push(\"identificationExpirationDate\");\n        excludeValidKeys.push(\"identificationRegistrationDate\");\n        excludeValidKeys.push(\"gender\");\n        if (isSalesOfGoodsProcess || isSalesOfAddonsProcess) {\n            if (!data.regon){\n                excludeValidKeys.push(\"regon\");\n            }\n            excludeValidKeys.push(\"registrationDate\");\n            excludeValidKeys.push(\"companyStatus\");\n            excludeValidKeys.push(\"disabledIdNumber\");\n        }\n    } else {\n        Object.keys(emptyBusinessData).map(k => excludeValidKeys.push(k));\n        if (isSalesOfGoodsProcess || isSalesOfAddonsProcess) {\n            excludeValidKeys.push(\"pesel\");\n            excludeValidKeys.push(\"idNumber\");\n            excludeValidKeys.push(\"country\");\n            excludeValidKeys.push(\"identification\");\n            excludeValidKeys.push(\"identificationNumber\");\n            excludeValidKeys.push(\"identificationExpirationDate\");\n            excludeValidKeys.push(\"identificationRegistrationDate\");\n            excludeValidKeys.push(\"gender\");\n        } else {\n            if (data.foreigner) {\n                excludeValidKeys.push(\"idNumber\");\n                if (data.noPesel) {\n                    excludeValidKeys.push(\"pesel\");\n                } else {\n                    excludeValidKeys.push(\"gender\");\n                }\n                if (\"UE_CERTIFICATE\" !== data.identification){\n                    excludeValidKeys.push(\"identificationRegistrationDate\");\n                }\n                if (\"UE_CERTIFICATE\" === data.identification){\n                    excludeValidKeys.push(\"identificationExpirationDate\");\n                }\n            } else {\n                excludeValidKeys.push(\"country\");\n                excludeValidKeys.push(\"identification\");\n                excludeValidKeys.push(\"identificationNumber\");\n                excludeValidKeys.push(\"identificationExpirationDate\");\n                excludeValidKeys.push(\"identificationRegistrationDate\");\n                excludeValidKeys.push(\"gender\");\n            }\n        }\n    }\n\n    //TODO: Ugly hardcoded... DO NOT EXTEND THIS!\n    if (data.customerNoEmail) {\n        excludeValidKeys.push(\"emailAddress\");\n    }\n\n    return excludeValidKeys;\n}\n\nfunction _isStreetNumberFilled(data) {\n    return data[\"streetNumber\"] !== \"\";\n}\n\nfunction _isError(error) {\n    return error !== undefined ? Object.keys(error).filter(key => error[key].length !== 0).length !== 0 : false;\n}\n\nfunction _hasErrorsIgnoreFields(error, fieldKeysToIgnore) {\n    return error && Object.keys(error).filter(key => (error[key] && error[key].length > 0 && fieldKeysToIgnore.indexOf(key) === -1)).length !== 0;\n}\n\nfunction _isAdresCbsValid(address) {\n    return Object.keys(address).filter(key => address[key] === false).length <= 1;\n}\n\nexport const isCustomerDataValid = createSelector(\n    [\n        getCustomerData,\n        getCustomerContact,\n        getAddressMain,\n        getAddressCorrespondence,\n        getCustomerDataErrors,\n        getCustomerContactErrors,\n        getAddressCorrespondenceMapping,\n        getMainAddressValidation,\n        getCorrespondenceAddressValidation,\n        getSalesOfGoodsProcess,\n        getSalesOfAddonsProcess,\n        getCustomerAddressErrors,\n        isEmailFormValid,\n    ],\n    (customerData, customerContact, addressMain, addressCorrespondence, customerDataErrors, customerContactErrors,\n     addressCorrespondenceMapping, mainAddressValidation, correspondenceAddressValidation, isSalesOfGoodsProcess, isSalesOfAddonsProcess, customerAddressErrors, isEmailFormValid) => {\n        const isCorrespondenceAddress = addressCorrespondenceMapping === \"correspondence\";\n        const isAddressCorrespondenceFilled = isCorrespondenceAddress ? _isAdresCbsValid(correspondenceAddressValidation) && _isStreetNumberFilled(addressCorrespondence) : true;\n        const fieldKeysToIgnore = getCustomerFieldKeysToIgnore(customerData, isSalesOfGoodsProcess, isSalesOfAddonsProcess);\n        const contactFieldKeysToIgnore = customerContact.customerNoEmail ? [\"emailAddress\"] : [];\n        console.log(\"isSalesOfGoodsProcess \", isSalesOfGoodsProcess);\n        console.log(\"isSalesOfAddonsProcess \", isSalesOfAddonsProcess);\n        console.log(\"fieldKeysToIgnore \", fieldKeysToIgnore);\n        return _isFormFilled(customerData, isSalesOfGoodsProcess, isSalesOfAddonsProcess) &&\n            _isFormFilled(customerContact) &&\n            _isAdresCbsValid(mainAddressValidation) &&\n            _isStreetNumberFilled(addressMain) &&\n            isAddressCorrespondenceFilled &&\n            !_hasErrorsIgnoreFields(customerDataErrors, fieldKeysToIgnore) &&\n            !_hasErrorsIgnoreFields(customerContactErrors, contactFieldKeysToIgnore) &&\n            !_hasErrorsIgnoreFields(customerAddressErrors, [\"streetId\", \"townId\"]) &&\n            !isEmailFormValid;\n    });\n\nconst getCustomerFieldKeysToIgnore = (customer, isSogProcess, isSoaProcess) => {\n    let keysToIgnore = [];\n    if (customer.isBusinessClient) {\n        keysToIgnore = keysToIgnore.concat([\"firstName\", \"lastName\", \"pesel\", \"identificationNumber\", \"identificationExpirationDate\", \"idNumber\"]);\n    } else {\n        keysToIgnore = keysToIgnore.concat([\"companyName\", \"nip\", \"regon\"]);\n    }\n    if (customer.foreigner) {\n        keysToIgnore = keysToIgnore.concat([\"idNumber\"]);\n        if (customer.noPesel) {\n            keysToIgnore = keysToIgnore.concat([\"pesel\"]);\n        } else {\n            keysToIgnore = keysToIgnore.concat([\"gender\"]);\n        }\n        if (\"UE_CERTIFICATE\" !== customer.identification) {\n            keysToIgnore = keysToIgnore.concat([\"identificationRegistrationDate\"]);\n        } else if (\"UE_CERTIFICATE\" === customer.identification) {\n            keysToIgnore = keysToIgnore.concat([\"identificationExpirationDate\"]);\n        }\n    } else {\n        keysToIgnore = keysToIgnore.concat([\"country\", \"identification\", \"identificationNumber\", \"identificationExpirationDate\", \"identificationRegistrationDate\", \"gender\"]);\n    }\n    if (isSogProcess || isSoaProcess) {\n        keysToIgnore = keysToIgnore.concat([\"pesel\", \"identificationNumber\", \"identificationExpirationDate\", \"identificationRegistrationDate\", \"idNumber\"]);\n    }\n    return keysToIgnore;\n};\n\nexport const isNotNecessaryToCheckDocument = createSelector(getConvergentEntries, convergentEntries => {\n    return convergentEntries.length>0 && convergentEntries.every(entry => is2UCartEntry(entry) || is4UCartEntry(entry));\n});\n\nexport const isDocumentSelected = createSelector([getCvDocumentsList, getSelectedCvDocument, isNotNecessaryToCheckDocument],\n    (cvDocumentsList, selectedCvDocument, notNecessaryToCheckDocument) => {\n        //selectedCvDocument is string, doc.id is int\n        return notNecessaryToCheckDocument || cvDocumentsList.some(doc => doc.id === +selectedCvDocument);\n    });\n\nexport const isCVPhoneFilled = createSelector([getCvDocumentsList, getSelectedCvDocument, getDocumentCustomerWorkPhoneNumber, getCvDocumentsErrors, isNotNecessaryToCheckDocument],\n    (cvDocumentsList, selectedCvDocument, customerWorkPhoneNumber, cvDocErrors, notNecessaryToCheckDocument) => {\n        //selectedCvDocument is string, doc.id is int\n        const selectedDoc = cvDocumentsList.find(doc => doc.id === +selectedCvDocument);\n        const phoneNeeded = !!selectedDoc && selectedDoc.isNeededTextField;\n        const isPhoneCorrect = !cvDocErrors || !cvDocErrors[\"customerWorkPhoneNumber\"] || cvDocErrors[\"customerWorkPhoneNumber\"].length === 0;\n        return notNecessaryToCheckDocument || (!phoneNeeded || (!!customerWorkPhoneNumber && isPhoneCorrect));\n    });\nexport const isRetentionBonusesDataFilled = createSelector(\n    [getMobileCartEntries, getMobileVasesRaw],\n    (entries,mobileVas) => {\n\n        let retentionEntriesCount=0;\n        let filledRetentionBonuses=0;\n        console.log(\"isRetentionBonusesDataFilled \");\n        if (!!mobileVas && !!mobileVas.find(mv => mv.process===\"RETENTION\") && !!mobileVas.find(mv => mv.process===\"RETENTION\").categorizedBonuses[\"RetentionBonuses\"]) {\n            let retentionBonuses = mobileVas.find(mv => mv.process===\"RETENTION\").categorizedBonuses[\"RetentionBonuses\"].services;\n            if (!retentionBonuses || retentionBonuses.length <= 0) {\n                return true;\n            }\n            entries.filter(entry => entry.processType === \"RETENTION\")\n                   .forEach(entry => {\n                            retentionEntriesCount++;\n                            if (!entry.vases || entry.vases.length === 0) {\n                                console.log(\"NO RETENTION BONUS SELECTED FOR:\", entry);\n                                return false;\n                            }\n                            retentionBonuses.forEach(rb => {\n                                console.log(\"RETENTION BONUS\", rb.id);\n                                console.log(entry.vases.find(vas => {\n                                    console.log(vas.productCode);\n                                    return vas.productCode == rb.id\n                                }));\n                                if (entry.vases.find(vas => {\n                                    console.log(vas.productCode);\n                                    return vas.productCode == rb.id\n                                })) {\n\n                                    console.log(\"RETENTION BONUS FOUND \");\n                                    filledRetentionBonuses++;\n\n                                }\n                            });\n                });\n            console.log(\"RETENTION BONUSES SELECTED? \", !!(retentionEntriesCount == filledRetentionBonuses));\n            console.log(\"retentionEntriesCount \", retentionEntriesCount);\n            console.log(\"filledRetentionBonuses \", filledRetentionBonuses);\n\n            return retentionEntriesCount <= filledRetentionBonuses;\n        }\n        return true;\n    });\n\n\nexport const isMnpDataFilled = createSelector(\n    [getMnpData, getCartIsNet],\n    (mnpData, isB2B) => {\n\n        if (Object.getOwnPropertyNames(mnpData).length === 0) {\n            return true;\n        }\n\n        const x = mnpData.map(entry => {\n            if (OnlineUtils.isMnpApplicationSecondStep(entry.processType)) {\n                return true;\n            }\n            if (!entry.offerType) {\n                return false;\n            }\n            if (!entry.agreementType) {\n                return false;\n            }\n            if (!isB2B){\n                if (entry.agreementType === \"2\"){\n                    if (!entry.businessName) {\n                        return false;\n                    }\n                    if (entry.identifier === \"NIP\" && !entry.nip) {\n                        return false;\n                    }\n                    if (entry.identifier === \"REGON\" && !entry.regon) {\n                        return false;\n                    }\n                    if (entry.isHeadquartersAddressSame === false && (!entry.postalCode || !entry.city || !entry.houseNumber)) {\n                        return false;\n                    }\n                }\n            }\n            else if (isB2B && entry.agreementType === \"1\"){\n                if (!entry.firstName || !entry.lastName || !entry.pesel || !entry.idNumber){\n                    return false;\n                }\n            }\n            return entry.migrationMode === \"END\" || !!entry.date;\n        });\n        return x[0];\n    });\n\nexport const isMnpDataValid = createSelector([getMnpData, getCartIsNet], (mnpData, isB2B) => {\n    return Object.getOwnPropertyNames(mnpData).length === 0\n        || mnpData.map(entry => {\n            const entryErrors = {...entry.errors};\n            if (isB2B) {\n                if (entry.agreementType === \"3\" || entry.agreementType === \"2\") {\n                    entryErrors.firstName = [];\n                    entryErrors.lastName = [];\n                    entryErrors.pesel = [];\n                    entryErrors.idNumber = [];\n                    entryErrors.businessName = [];\n                    entryErrors.identifier = [];\n                    entryErrors.nip = [];\n                    entryErrors.regon = [];\n                    entryErrors.isHeadquartersAddressSame = [];\n                } else if (entry.agreementType === \"1\"){\n                    entryErrors.businessName = [];\n                    entryErrors.identifier = [];\n                    entryErrors.nip = [];\n                    entryErrors.regon = [];\n                    if (entry.isHeadquartersAddressSame === true) {\n                        entryErrors.postalCode = [];\n                        entryErrors.street = [];\n                        entryErrors.city = [];\n                        entryErrors.houseNumber = [];\n                        entryErrors.flatNumber = [];\n                    }\n                }\n            }\n            if (!isB2B) {\n                entryErrors.firstName = [];\n                entryErrors.pesel = [];\n                entryErrors.idNumber = [];\n                entryErrors.lastName = [];\n                if (entry.agreementType === \"1\") {\n                    entryErrors.businessName = [];\n                    entryErrors.identifier = [];\n                    entryErrors.nip = [];\n                    entryErrors.regon = [];\n                    entryErrors.isHeadquartersAddressSame = [];\n                } else if (entry.agreementType === \"2\") {\n                    if (entry.identifier === \"NIP\") {\n                        entryErrors.regon = [];\n                    } else if (entry.identifier === \"REGON\") {\n                        entryErrors.nip = [];\n                    }\n                }\n                if (entry.agreementType === \"1\" || entry.isHeadquartersAddressSame === true) {\n                    entryErrors.postalCode = [];\n                    entryErrors.street = [];\n                    entryErrors.city = [];\n                    entryErrors.houseNumber = [];\n                    entryErrors.flatNumber = [];\n                }\n            }\n\n            if (entry.migrationMode === \"EOP\") {\n                entryErrors.date = [];\n            }\n\n\n            return Object.getOwnPropertyNames(entryErrors)\n                .map(key => entryErrors[key]).reduce((prevErrors, nextErrors) => [...prevErrors, ...nextErrors]);\n        })\n            .reduce((prevErrors, nextErrors) => [...prevErrors, ...nextErrors], [])\n            .length === 0;\n});\n\nexport const getApuState = createSelector(getCheckoutState, checkout=>checkout.apu.isApuSelected);\n\nexport const getReturnDocumentLoader = createSelector(getCheckoutState, checkout=>checkout.returnDocument.returnDocumentLoader);\n\nexport const getConsentDocumentsPrintState = createSelector([getCheckoutState,getCurrentStepId], (checkout, currentStep)=>{\n    if (\"customer-data\"===currentStep) {\n        return checkout.consents.consentDocumentsPrintState;\n    }\n    return true;\n});\n\nexport const getIsCustomerDataStep = createSelector(getCurrentStepId,stepId=>stepId===\"customer-data\");\nexport const getIsCartStep = createSelector(getCurrentStepId,stepId=>stepId===\"cart-contents\");\nexport const getDeliveryAndPaymentStep = createSelector(getCurrentStepId,stepId=>stepId===\"delivery-payment\");\n\nexport const getConsentTypeInPrintConsentsValidator = createSelector(getCheckoutState, checkout=>checkout.consents.consentTypeInPrintConsentsValidator);\n\nexport const isWZRKConsentValid = createSelector([getCheckoutConsents, getConsentsCheckoutData, getConsentTypeInPrintConsentsValidator], (consents, selectedStates, consentType) => {\n    return !consents.filter(consent => consent.type===consentType)\n        .find(consent => !validateConsent(consent, selectedStates));\n});\n\nexport const isPrintConsentDocumentsButtonEnabled = createSelector([isWZRKConsentValid, isDeliveryAddressValid, isCustomerDataValid, isRepresentativeDataValid, getCartIsNet], (isWZRKConsentValid, isDeliveryAddressValid, isCustomerDataValid, isRepresentativeDataValid, getCartIsNet) => {\n    return !getCartIsNet ? isDeliveryAddressValid && isCustomerDataValid : isDeliveryAddressValid && isCustomerDataValid && isRepresentativeDataValid;\n});\n\nexport const getDocumentsState = state => state[\"documents\"];\nexport const getDocumentsItems = createSelector(getDocumentsState, documents=>documents.items);\nexport const getDocumentsLinks = createSelector(getDocumentsState, documents=>documents.links);\n\nexport const getShouldSignDocuments = createSelector([getSelectedMethodForDocuments, getDocumentsItems],\n    (methodForDocuments, documentItems) => {\n        return DeliveryMethod.POS === methodForDocuments && !!documentItems && documentItems.some(doc => doc.signable);\n    }\n);\n\nconst getCheckoutAgreement = createSelector(getCheckoutState, checkout => checkout.agreement);\nconst getAgreementIntroductionStatuses = createSelector(getCheckoutAgreement, agreement => agreement.introductionStatuses);\nexport const getAgreementIntroductionStatusForBundle = bundleNo => createSelector(getCheckoutAgreement, agreement => agreement.introductionStatuses[bundleNo] ? agreement.introductionStatuses[bundleNo] : 'TO_INTRODUCE');\nexport const isComplexAgreementLoadingForBundle = bundleNo => createSelector(getCheckoutAgreement, agreement => !!agreement.documentLoadings[bundleNo]);\nexport const allComplexDocumentsAreAccepted = createSelector([getMobileCartEntries, getAgreementIntroductionStatuses], (cartEntries, introductionStatuses) => cartEntries.every(cartEntry => introductionStatuses[cartEntry.bundleNo] === 'ACCEPTED'));\nexport const getDocumentCodesToMergeForBundle = bundleNo => createSelector(getCheckoutAgreement, agreement => {\n    let documentsToMerge = agreement.documentsToMergePerBundle.find(bundleMergeDocuments => bundleMergeDocuments.bundleNo === bundleNo);\n    if (documentsToMerge) {\n        return documentsToMerge.documentCodes\n    }\n    return [];\n});\n\nexport const getDocumentsCodesToMerge = createSelector(getCheckoutAgreement, agreement => agreement.documentsToMergePerBundle)\n\nexport const isDeliveryPhoneContactCorrect = createSelector([getCartIsNet, getDeliveryPhoneContact, getSelectedDeliveryMethodId], (isB2B, phoneContact, selectedMethodId) => {\n    if (isB2B && selectedMethodId === \"courier\") {\n        return phoneContact.length === 0 || phoneNumberRegexp(phoneContact);\n    }\n    if (!isB2B && selectedMethodId === \"courier\") {\n        return phoneNumberRegexp(phoneContact);\n    }\n    return true;\n});\n\nexport const areDeliveryConditionsMet = createSelector(\n    [\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethods,\n        isDeliveryAddressValid,\n        getConvergentEntries,\n        isPickupDeliveryValid,\n        isDeliveryPhoneContactCorrect,\n        getSelectedPointOfSaleId,\n        getAgreementType,\n        getDeliveryEmailAddress,\n        getDeliveryEmailAddressErrors,\n    ],\n    (\n        selectedDeliveryMethod,\n        selectedDeliveryMethods,\n        deliveryAddressValid,\n        convergentEntries,\n        isPickupDeliveryValid,\n        isDeliveryPhoneContactCorrect,\n        selectedPointOfSaleId,\n        agreementType,\n        deliveryEmail,\n        deliveryEmailErrors\n    ) => {\n        return (\n            convergentEntries.length === 0\n                ? isMobileDeliveryValid(selectedDeliveryMethod, isPickupDeliveryValid, selectedPointOfSaleId)\n                : _.filter(selectedDeliveryMethods, method => method === \"\").length === 0\n        ) && (agreementType !== AgreementType.PAPER || deliveryAddressValid) &&\n            (agreementType !== AgreementType.DIGITAL || (!!deliveryEmail && deliveryEmailErrors.length === 0)) &&\n            (selectedDeliveryMethod.id !== DeliveryMethod.COURIER || isDeliveryPhoneContactCorrect);\n    }\n);\n\nconst isMobileDeliveryValid = (selectedDeliveryMethod, isPickupDeliveryValid, selectedPointOfSaleId) => {\n    if (selectedDeliveryMethod && DeliveryMethod.PARCEL_LOCKER.toLowerCase() === selectedDeliveryMethod.id) {\n        return !!selectedPointOfSaleId;\n    }\n    return selectedDeliveryMethod && isPickupDeliveryValid;\n};\n\nexport const isDuplicatedOrder = createSelector([isDuplicateOrder,hasAccessRoleToProcessDuplicateOrder],(isDuplicateOrder,hasAccessRoleToProcessDuplicateOrder) => {\n    return isDuplicateOrder && !hasAccessRoleToProcessDuplicateOrder;\n});\n\n\nfunction isContactValid(customerContactErrors, deliveryPhoneContact) {\n    if ((customerContactErrors && customerContactErrors.phoneNumber && customerContactErrors.phoneNumber.length > 0) || deliveryPhoneContact == null || deliveryPhoneContact === \"\") {\n        return false;\n    }\n    return true;\n}\n\nexport const isContactForDAPValid = createSelector(\n    [\n        getInstallationPhoneContact,\n        shouldSelectInstallation,\n        getCustomerContactErrors,\n        getDeliveryPhoneContact,\n        getSelectedDeliveryMethods,\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethodForDevices,\n        getCurrentStepId,\n        getInstallationPhoneContact\n    ],\n    (\n        getInstallationPhoneContact,\n        shouldSelectInstallation,\n        customerContactErrors,\n        deliveryPhoneContact,\n        getSelectedDeliveryMethods,\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethodForDevices,\n        getCurrentStepId,\n        installationPhoneContact\n    ) => {\n        if (shouldSelectInstallation) {\n            if ((customerContactErrors && customerContactErrors.phoneNumberDAP && customerContactErrors.phoneNumberDAP.length > 0)) {\n                return false;\n            }\n            if (installationPhoneContact.length!==9 || !(/^\\d+$/.test(installationPhoneContact))) {\n                return false;\n            }\n        }\n        return true;\n    });\n\nexport const isContactForCourierValid = createSelector(\n    [\n        getCustomerContactErrors,\n        getDeliveryPhoneContact,\n        getSelectedDeliveryMethods,\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethodForDevices,\n        getCurrentStepId\n    ],\n    (\n        customerContactErrors,\n        deliveryPhoneContact,\n        getSelectedDeliveryMethods,\n        getSelectedDeliveryMethod,\n        getSelectedDeliveryMethodForDevices,\n        getCurrentStepId\n    ) => {\n        const COURIER = \"courier\";\n        if (getCurrentStepId === \"delivery-payment\") {\n            //fix or mobile\n            if (getSelectedDeliveryMethods.fixDocuments === \"\") {\n                if (getSelectedDeliveryMethod.id === COURIER || getSelectedDeliveryMethodForDevices.id === COURIER) {\n                    return isContactValid(customerContactErrors, deliveryPhoneContact);\n                }\n            } else {\n                //magnum\n                if (getSelectedDeliveryMethods.fixDocuments && getSelectedDeliveryMethods.fixDocuments.id === COURIER ||\n                    getSelectedDeliveryMethods.fixDevices && getSelectedDeliveryMethods.fixDevices.id === COURIER ||\n                    getSelectedDeliveryMethods.mobile && getSelectedDeliveryMethods.mobile.id === COURIER) {\n                    return isContactValid(customerContactErrors, deliveryPhoneContact);\n                }\n            }\n        }\n        return true;\n    });\n\nexport const isConsentsInAcknowledgmentState = createSelector([getConsentAcknowledgmentsReadWhileTalking, getConsentDocumentStatus], (isChecked, status) => {\n    return isChecked || status === \"COMPLETED\";\n});\n\n//wrzucic warunki do oddzielnego pliku\nexport const isNextStepAvailable = createSelector(\n    [\n        allConsentsValid,\n        getApuState,\n        getConsentDocumentsPrintState,\n        isDoingCheckoutStep,\n        getRegisteredCheckoutConditions,\n        getSelectedPaymentMethod,\n        isCustomerDataValid,\n        isRepresentativeDataValid,\n        isMnpDataValid,\n        isMnpDataFilled,\n        isBillingComponentValid,\n        isDuplicatedOrder,\n        isFixRepresentativeDataValid,\n        isEmailFormValid,\n        getDeliveryAndPaymentStep,\n        getSelectedDeliveryMethod,\n        isConsentsInAcknowledgmentState\n    ],\n    (\n        consentValidation,\n        apuValidation,\n        getConsentDocumentsPrintState,\n        inProgress,\n        conditions,\n        selectedPaymentMethod,\n        customerDataValid,\n        representativeDataValid,\n        isMnpDataValid,\n        isMnpDataFilled,\n        isBillingComponentValid,\n        isDuplicatedOrder,\n        isFixRepresentativeDataValid,\n        isEmailFormValid,\n        isDeliveryAndPaymentStep,\n        selectedDeliverMethod,\n        isConsentsInAcknowledgmentState\n    ) => !inProgress &&\n        (isDeliveryAndPaymentStep || (!conditions[\"consents\"] || consentValidation)) &&\n        (!conditions[\"customerData\"] || customerDataValid && representativeDataValid) &&\n        (!conditions[\"fixRepresentativeData\"] || isFixRepresentativeDataValid) &&\n        (!conditions[\"mnpData\"] || isMnpDataValid && isMnpDataFilled) &&\n        (!conditions[\"apuData\"] || apuValidation) &&\n        (!conditions[\"consentDocuments\"] || getConsentDocumentsPrintState) &&\n        (!conditions[\"billingAccount\"] || isBillingComponentValid) &&\n        (!isDuplicatedOrder) &&\n        (!isEmailFormValid) &&\n        !(isDeliveryAndPaymentStep && selectedDeliverMethod && DeliveryMethod.ACCOUNT_MANAGER == selectedDeliverMethod.id) &&\n        (!conditions[\"consentsAcknowledgment\"] || isConsentsInAcknowledgmentState)\n);\n\n\nexport const getPickup = createSelector(getCheckoutState, checkout => checkout.pickup);\nexport const posSimCardTypes = createSelector(getPickup, pickup => pickup.simCardTypes);\nexport const pickupSerialNumbers = createSelector(getPickup, pickup => pickup.serialNumbers);\nexport const getReservationStatus = createSelector(getPickup, pickup => pickup.reservationStatus);\nexport const getGoodsOrderPaymentStatus = createSelector(getPickup, pickup => pickup.goodsOrderPaymentStatus);\nexport const getPaymentOverrideStatus = createSelector(getPickup, pickup => pickup.paymentOverride);\nexport const getPaymentAndFiscalizationLoaded = createSelector(getPickup, pickup => pickup.paymentAndFiscalizationLoaded);\nexport const getPickupReplanishmentRequiredErrors = createSelector(getCheckoutErrors, errors => errors.pickupReplanishmentRequired);\nexport const getNavigationLoading = createSelector(getPickup, pickup => pickup.navigationLoading);\nexport const getLastOrder = createSelector(getPickup, pickup => pickup.lastOrder);\nexport const getOrderCanceled = createSelector(getPickup, pickup => pickup.canceled);\nexport const getPickupError = createSelector(getPickup, pickup => pickup.generalError);\n\nfunction firstPickupErrorWhenExists(pickup) {\n    return (pickup.generalError[0] ? pickup.generalError[0] : pickup.generalError);\n}\n\nexport const getFirstPickupError = createSelector(getPickup, pickup => pickup.generalError && pickup.generalError.length > 0 ? firstPickupErrorWhenExists(pickup)  : \"\");\nexport const getPickupDocuments = createSelector(getPickup, pickup => pickup.documents);\nexport const getPickupDocumentLinks = createSelector(getPickup, pickup => pickup.documentlinks);\nexport const getDownloadedDocumentCode = createSelector(getPickup, pickup => pickup.documentDownloaded);\nexport const getPickupSerialNumberErrors = createSelector(getPickup, pickup => pickup.serialNumberError);\nconst documentsPrinted = (documents, links) => {\n    let required = Object.keys(documents).reduce((array, key) => array.concat(documents[key]), []).filter(document => document.signable);\n    return required.every((document => {\n        return !!links && links.hasOwnProperty(document.documentCode + \"_\" + document.bundleNo);\n    }));\n};\nexport const signableDocumentsPrintedPickup = createSelector([getPickupDocuments, getDocumentsLinks, areAllDocumentsSaved], (documents, links, allDocumentsSaved) => {\n    return documentsPrinted(documents, links) || allDocumentsSaved;\n});\nexport const signableDocumentsPrinted = createSelector([getDocumentsItems, getDocumentsLinks, areAllDocumentsSaved], (documents, links, allDocumentsSaved) => {\n    return documentsPrinted(documents, links) || allDocumentsSaved;\n})\nexport const getAssistModeStateFromStore = createSelector(getCheckoutState, checkout => checkout.assistMode);\nexport const getAssistModeStateData = createSelector(getAssistModeStateFromStore, assistMode => assistMode.assistModeState);\nexport const getAssistModeModalStateData = createSelector(getAssistModeStateFromStore, assistMode => assistMode.modalAssistModeState);\nexport const getAssistModeConfirmationModalStateData = createSelector(getAssistModeStateFromStore, assistMode => assistMode.confirmationModalState);\nexport const getEmployeeList = createSelector(getAssistModeStateFromStore, assistMode => assistMode.employeeList);\nexport const getEmployeeListFilters = createSelector(getAssistModeStateFromStore, assistMode => assistMode.filters);\nexport const isLoadingEmployeeList = createSelector(getAssistModeStateFromStore, assistMode => assistMode.isLoadingEmployeeList);\nexport const getSelectedEmployee = createSelector(getAssistModeStateFromStore, assistMode => assistMode.selectedEmployee);\nexport const getCurrentPage = createSelector(getAssistModeStateFromStore, assistMode => assistMode.page);\nexport const getFilterEnabled = createSelector(getAssistModeStateFromStore, assistMode => assistMode.filterEnabled);\nexport const isLoadingAssistModeState = createSelector(getAssistModeStateFromStore, assistMode => assistMode.isLoadingAssistModeState);\nexport const getAssistModeConfirmationLeaveModalStateData = createSelector(getAssistModeStateFromStore, assistMode => assistMode.confirmationLeaveModalState);\n\nexport const isEarlierInstallationConsentNotAcceptedModalVisible = createSelector(getMetadata, metadata => metadata.earlierInstallationConsentNotAcceptedModalIsVisible);\nexport const isEarlierInstallationConsentNotAcceptedModalIsAccepted = createSelector(getMetadata, metadata => metadata.earlierInstallationConsentNotAcceptedModalIsAccepted);\nexport const isEarlierInstallationConsentNotAcceptedModalMounted = createSelector(getMetadata, metadata => metadata.earlierInstallationConsentNotAcceptedModalDidMount);\n\nexport const isCourierDeliveryMethodModalVisible = createSelector(getMetadata, metadata => metadata.courierDeliveryMethodModalVisible);\nexport const isCourierDeliveryMethodModalMounted = createSelector(getMetadata, metadata => metadata.courierDeliveryMethodModalDidMount);\nexport const getCourierDeliveryMethodModalState = createSelector(getMetadata, metadata => metadata.courierDeliveryMethodModalState);\n\n\nconst getEmailWarningModalState = createSelector(getMetadata, metadata => metadata.emailWarningModalState);\nexport const isEmailWarningModal = createSelector(getEmailWarningModalState, modalState => modalState.visible);\nexport const getWarningModalDescriptionKey = createSelector(getEmailWarningModalState, modalState => modalState.descriptionKey);\n\nfunction mergeDataAndErrors(data, errors) {\n    let ret = data.map((item, index) => {\n            return {...item, errors: errors[index]};\n        }\n    );\n    return ret;\n}\n\nfunction makeBundleNoNullIfNecessary(rawConsentStates, getConsentsData){\n    let consents = getConsentsData.consents || [];\n    let consentsMap = consents.reduce((map, obj) => {\n        map[obj.consentCode] = obj;\n        return map\n    }, {});\n\n    let ret = rawConsentStates.map(consentState => {\n        let requestedConsent = consentsMap[consentState.consentCode];\n        if (requestedConsent && !requestedConsent.msisdns && !requestedConsent.bundleAssignments[0]) {\n            return {...consentState, bundleNo: null}\n        } else {\n            return consentState\n        }\n    });\n    return removeDuplicates(ret, obj=>obj.consentCode + obj.bundleNo);\n}\n\nfunction removeDuplicates(array, hash){\n    let state = {};\n    let ret = array.filter(notUnique => {\n        let hashed = hash(notUnique);\n        if (state[hashed]) {\n            return false;\n        } else {\n            state[hashed] = \"dummy\";\n            return true;\n        }\n    });\n    return ret;\n}\n\nexport const getAllReservableCartEntries = createSelector(\n    [getSelectedDeliveryMethods, getSelectedMethodForDevices, allCartEntries], (selectedDeliveryMethods, selectedMethodForDevices, allCartEntries) => {\n        return allCartEntries.filter(entry => {\n            let selectedDeliveryMethod;\n            if (entry.entryType === CartEntryType.FIX) {\n                selectedDeliveryMethod = selectedDeliveryMethods.fixDevices ? selectedDeliveryMethods.fixDevices.id : selectedMethodForDevices;\n            } else {\n                selectedDeliveryMethod = selectedDeliveryMethods.mobile ? selectedDeliveryMethods.mobile.id : \"\";\n            }\n            return selectedDeliveryMethod === \"\" || selectedDeliveryMethod === DeliveryMethod.POS;\n        });\n    });\n\n\nexport const isRegisteredAgreementConfirmationComponent = createSelector(getConsentsData, consents => consents.isRegisteredAgreementConfirmationComponent);\nexport const wasBonusAgreementConfirmationModalConfirmed = createSelector(getConsentsData, consents => consents.wasBonusAgreementConfirmationModalConfirmed);\nexport const wasBigAndZonkAgreementConfirmationModalConfirmed = createSelector(getConsentsData, consents => consents.wasBigAndZonkAgreementConfirmationModalConfirmed);\nexport const getShowAgreementConfirmationModal = createSelector(getCheckoutErrors, errors => errors.showAgreementConfirmationModal);\nexport const getAgreementConfirmationModalVariant = createSelector(getCheckoutErrors, errors => errors.agreementConfirmationModalVariant);\nexport const getExistingOrderOrCartValidation = createSelector(getCheckoutErrors, errors => errors.existingOrderOrCartValidation);\n\nexport const getSectionForCourier = createSelector([getSelectedDeliveryMethods, getSelectedDeliveryMethod, getSelectedDeliveryMethodForDevices],\n    (getSelectedDeliveryMethods, getSelectedDeliveryMethod, getSelectedDeliveryMethodForDevices) => {\n\n        const DOCUMENTS_PACKAGE = \"DOCUMENTS_PACKAGE\";\n        const DEVICES_PACKAGE = \"DEVICES_PACKAGE\";\n        const EMPTY = \"\";\n        const OTHER = \"OTHER\";\n        const COURIER = \"courier\";\n\n        //fix or mobile\n        if (getSelectedDeliveryMethods.fixDocuments === \"\") {\n            if (getSelectedDeliveryMethod.id === COURIER) {\n                return DOCUMENTS_PACKAGE;\n            }\n            if (getSelectedDeliveryMethodForDevices.id === COURIER) {\n                return DEVICES_PACKAGE;\n            }\n        } else {\n            //magnum\n            if (getSelectedDeliveryMethods.fixDocuments && getSelectedDeliveryMethods.fixDocuments.id === COURIER) {\n                return DOCUMENTS_PACKAGE;\n            }\n            if (getSelectedDeliveryMethods.fixDevices && getSelectedDeliveryMethods.fixDevices.id === COURIER) {\n                return DEVICES_PACKAGE;\n            }\n            if (getSelectedDeliveryMethods.mobile && getSelectedDeliveryMethods.mobile.id === COURIER) {\n                return EMPTY;\n            }\n        }\n\n        return OTHER;\n\n    });\n\nexport const getFixCartRefreshResult = createSelector(getMetadata, metadata => metadata.fixCartRefreshResult);\nexport const shouldShowModalAfterProcessChanged = createSelector(getFixCartRefreshResult,\n    result => result && result.previousProcess === \"ACTIVATION\" && result.currentProcess === \"ACTIVATION_NNAKED\"\n);\n\nexport const getFactoryCart = createSelector(getMiniCart, miniCart => {\n    return miniCart && miniCart.entries && miniCart.entries.length > 0 ? miniCart.entries[0].entryType : \"\";\n});\n\nexport const selectedDeliveryMethodIsPickupOnEmail = createSelector([getSelectedDeliveryMethodCode, getAgreementType, getFactoryCart], (selectedDeliveryMethod, agreementType, factory) => ((DeliveryMethod.PICKUP_ON_EMAIL === selectedDeliveryMethod) || (agreementType === AgreementType.DIGITAL && (factory === 'MOBILE' || !factory))));\n\nconst isIdVerificationNeeded = createSelector(getMobileCartEntries, entries => entries && entries.length > 0 && entries.some(entry => \"ID_VERIFICATION_NEEDED\" === entry.eagreementAvailabilityStatus));\n\nconst getIdVerificationState = createSelector(getCheckoutState, checkout => checkout.idVerification);\nexport const getIdVerificationBanks = createSelector(getIdVerificationState, idVerification => idVerification.banks);\nexport const getIdVerificationResult = createSelector(getIdVerificationState, idVerification => idVerification.verificationResult);\nexport const getIdVerificationSelectedBankId = createSelector(getIdVerificationResult, idVerificationResult => idVerificationResult.selectedBankId);\nexport const getIdVerificationStatus = createSelector(getIdVerificationResult, idVerificationResult => idVerificationResult.status);\nexport const isIdVerificationRequired = createSelector([selectedDeliveryMethodIsPickupOnEmail, customerHasActiveContracts, isIdVerificationNeeded], (selectedDeliveryMethodIsPickupOnEmail, customerHasActiveContracts, isIdVerificationNeeded) => ((selectedDeliveryMethodIsPickupOnEmail && !customerHasActiveContracts) || isIdVerificationNeeded));\nexport const isIdVerificationFailedOrEmpty = createSelector(getIdVerificationStatus, status => !status || status === \"FAIL\");\nexport const isIdVerificationRequiredAndNotVerified = createSelector([isIdVerificationRequired, getIdVerificationSelectedBankId, getIdVerificationStatus], (isIdVerificationRequired, selectedBankId, status) => isIdVerificationRequired && selectedBankId && !['SUCCESS', 'IN_PROGRESS'].includes(status));\nexport const isIdVerificationRequiredAndSucceed = createSelector([isIdVerificationRequired, getIdVerificationSelectedBankId, getIdVerificationStatus], (isIdVerificationRequired, selectedBankId, status) => isIdVerificationRequired && selectedBankId && status === 'SUCCESS');\n\n// Summary\nconst getSummary = createSelector(getCheckoutState, checkout => checkout.summary);\nexport const getOrderFactoryForSummary = createSelector(getSummary, summary => {\n    return summary && summary.orderSummary.entries && summary.orderSummary.entries.length > 0 ? summary.orderSummary.entries[0].entryType : \"\";\n});\n\nexport const getSalesChannelForSummary = createSelector(getSummary, summary =>summary && summary.salesChannel);\n\nexport const isFullPageLoader = createSelector(getMetadata, metadata => metadata.fullPageLoader);\nexport const allFixDeliveryMethods = createSelector(getDelivery, delivery => {\n    return delivery.methods.length > 0 && delivery.methods.every(method => method.factory === \"FIX\");\n});\nexport const noERegulationsConsent = createSelector(getConsentsStatesData, consentStates => {\n    const eRegulationsConsentState = consentStates.find(consentState => consentState.consentCode === \"21_CONV\");\n    return eRegulationsConsentState && eRegulationsConsentState.stateCode === \"NO_21_CONV\";\n});\nexport const getPreparedSimRequestFragment = createSelector(\n    [reservationData, getAllReservableCartEntries], (reservation, entries) => {\n        const sims = [];\n        entries.filter(entry => entry.isSim && entry.msisdn &&\n            entry.simCard.reservable).map(entry => {\n            const sim = {};\n            sim.bundle = entry.bundleNo;\n            sim.hasSerial = true;\n            console.log(reservation.simCardTypes &&\n                Object.keys(reservation.simCardTypes).length > 0);\n            if (reservation.simCardTypes &&\n                Object.keys(reservation.simCardTypes).length > 0) {\n                const simType = reservation.simCardTypes[entry.bundleNo] ?\n                    reservation.simCardTypes[entry.bundleNo] : \"\";\n                const simTypeDefinition = reservation.simCardTypeDefinitions\n                    .find(sim => sim.baseCode === simType);\n                sim.sku = simTypeDefinition ? simTypeDefinition.sku : \"\";\n            }\n            sim.serialNumber = reservation.serialNumbers[entry.productCode + \"_\" + entry.bundleOmniCode];\n            sim.type = \"SIM_CARD\";\n            sim.msisdn = entry.msisdn;\n            sims.push(sim);\n        });\n        return sims;\n});\n\nexport const simCardSerialNumberFilled =\n    createSelector([reservationData, serialNumbersFilled, cartContainsReservableItems],\n        (reservation, serialNumbersFilled, cartContainsReservableItems) =>\n            !cartContainsReservableItems ||\n            serialNumbersFilled &&\n            reservation.verifySerialNumberError === \"\" &&\n            reservation.agencyPosStatusValid\n    );\n\nexport const getConsentSections = createSelector([getConsentsData], (consentsData) => {\n    let conf = consentsData.conf || [];\n\n    return conf.map((consentConfig) => {\n        return ({\n            isRequiredConsent: !!consentConfig.isRequired,\n            sectionDescription: consentConfig.groupTitle,\n            consentsCode: consentConfig.consentsCode\n        });\n    });\n\n});\n"],
    "file": "selectors.js"
}