{
    "version": 3,
    "sources": ["../../../../../../../es6/eshop/modules/checkout/components/consents/MulticartConsentsGroupSubSection.jsx"],
    "names": ["MulticartConsentsGroupSubSectionView", "props", "allConsents", "map", "c", "consentCode", "consentCodes", "subsectionConsentsCodes", "getCurrentConsentsCheckoutData", "filter", "cs", "find", "ccCode", "consentProps", "consents", "consent", "state", "states", "s", "positive", "requiredPositiveStates", "checkedStatesConf", "currentStates", "currentSubsectionConsentsStates", "reduce", "a", "b", "stateCode", "every", "requiredState", "code", "data", "sectionWithBonus", "undefined", "onUpdate", "allConsentsOfSubSectionAreCheckedBeforeChange", "checkIfAllConsentsOfSectionAreChecked", "onChange", "allConsentsOfSubSectionAreCheckedAfterChange", "fields", "toUpdateData", "preamble", "__html", "consentsWithBonusLoading", "className", "i", "length", "getPropsForConsent", "bind", "descriptions", "isDeliveryStep", "sectionIndex", "consentStates", "formInputType", "React", "Component", "mapStateToProps", "mapDispatchToProps", "dispatch", "getState", "MulticartConsentsGroupSubSection"],
    "mappings": "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",
    "sourcesContent": ["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport MulticartSingleConsentRow from \"./MulticartSingleConsentRow\";\nimport {getConsentsCheckoutData} from \"eshop/modules/checkout/selectors\"\n\n/*\nSubSection exists to:\n- present preambles before each subsection\n- suppress update request to backend until whole subsection is filled\n*/\nclass MulticartConsentsGroupSubSectionView extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    subsectionConsentsCodes(){\n        return this.props.allConsents\n        .map(c=>c.consentCode)\n    }\n\n    currentSubsectionConsentsStates(){\n        let consentCodes = this.subsectionConsentsCodes()\n        return this.props.getCurrentConsentsCheckoutData().filter(cs => consentCodes.find(ccCode => cs.consentCode == ccCode))\n    }\n\n    checkedStatesConf(){\n        let consentCodes = this.subsectionConsentsCodes()\n        return this.props.consentProps.consents\n            .filter(cs => consentCodes.find(ccCode => cs.consentCode == ccCode))\n            .map(consent => ({consentCode: consent.consentCode, state: consent.states.find(s=>s.positive)}))\n    }\n\n    checkIfAllConsentsOfSectionAreChecked(){\n\n        let requiredPositiveStates = this.checkedStatesConf();\n        let currentStates = this.currentSubsectionConsentsStates().reduce((a,b)=>{return {...a, [b.consentCode]: b.stateCode }},{});\n\n        return requiredPositiveStates.every(\n            requiredState => currentStates[requiredState.consentCode]  == requiredState.state.code\n        )\n\n    }\n\n    onUpdate(data){\n        if(this.props.sectionWithBonus == undefined){\n           this.props.onUpdate(data) // do not hook\n        } else {\n            let allConsentsOfSubSectionAreCheckedBeforeChange = this.checkIfAllConsentsOfSectionAreChecked()\n            this.props.onChange(data)\n            if(this.props.sectionWithBonus){\n                let allConsentsOfSubSectionAreCheckedAfterChange = this.checkIfAllConsentsOfSectionAreChecked()\n                if(allConsentsOfSubSectionAreCheckedAfterChange != allConsentsOfSubSectionAreCheckedBeforeChange){\n\n                    let fields = ['bundleNo','consentCode','stateCode']\n                    let toUpdateData = this.currentSubsectionConsentsStates().map(\n                        cs => fields.reduce((a,b) => ({...a, [b]: cs[b]}), {})\n                    )\n\n                    this.props.onUpdate(toUpdateData)\n                }\n            }\n        }\n    }\n\n    preamble(){\n        if(this.props.consents && this.props.consents[0] && this.props.preamble){\n            return (\n            <div className=\"u-padding-top-l\">\n                <blockquote className=\"opl-blockquote g-bluef-bdrc u-box-shadow--s u-no-padding-l\">\n                  <div className=\"opl-msg opl-msg--box opl-msg--info g-white1-bg g-black1-c\">\n                    <div className=\"o-icon-list\">\n                      <div className=\"o-icon-list__item\"></div>\n                      <div className=\"u-xsmall-block u-small-padding-l o-icon-list__icon u-vertical-top u-padding-right\">\n                        <div className=\"g-icon g-icon--info g-icon--before g-icon--s g-bluef-c\" aria-hidden=\"true\"></div>\n                      </div>\n                      <div class=\"o-icon-list__text\">\n                        <p dangerouslySetInnerHTML={{__html: this.props.preamble}}></p>\n                      </div>\n                    </div>\n                  </div>\n                </blockquote>\n            </div>)\n        } else {\n            return null\n        }\n    }\n\n    consentsWithBonusLoading(){\n        if(this.props.sectionWithBonus != undefined){\n            return {consentsWithBonusLoading: this.props.sectionWithBonus}\n        }else{\n            return {}\n        }\n    }\n\n    render(){\n        return (\n            <div className={this.props.className || \"\"}>\n                {this.preamble()}\n                {\n                this.props.consents.map((consent, i)=>{\n                        return <div className={`${this.props.consents.length - 1 === i ? '' : 'u-border-bottom'}`}>\n                            <MulticartSingleConsentRow\n                            {...this.props.getPropsForConsent(consent)}\n                            {...this.consentsWithBonusLoading()}\n                            onUpdate={this.onUpdate.bind(this)} //hook onUpdate property\n                            descriptions={this.props.descriptions}\n                            isDeliveryStep={this.props.isDeliveryStep}\n                            sectionKey={\"consent\"+consent.sectionIndex}\n                            consents={this.props.consents}\n                            consentStates={this.props.consentStates}\n                            formInputType={this.props.formInputType}/>\n                        </div>\n                })\n                }\n            </div>);\n    }\n}\n\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getCurrentConsentsCheckoutData: () => dispatch((dispatch, getState) => { return getConsentsCheckoutData(getState())})\n});\n\nconst MulticartConsentsGroupSubSection = connect(mapStateToProps, mapDispatchToProps)(MulticartConsentsGroupSubSectionView)\nexport default MulticartConsentsGroupSubSection;"],
    "file": "MulticartConsentsGroupSubSection.js"
}