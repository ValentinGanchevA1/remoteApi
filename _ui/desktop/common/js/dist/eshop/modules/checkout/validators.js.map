{
    "version": 3,
    "sources": ["../../../../../es6/eshop/modules/checkout/validators.js"],
    "names": ["customerDataFormValidators", "checkRequiredFieldMessage", "level", "message", "representativeDataFormValidators", "addressFormValidators", "checkNotEmpty", "billingAccountFormValidators", "emailDeliveryValidators", "customerContactFormValidators", "courierDeliveryMessageValidator", "courierMessage", "wwtValidator", "courierPhoneContactValidator", "customerWorkPhoneNumberValidator", "customerWorkPhoneNumber", "checkNotEmptyStandardMessage", "mnpFormValidators", "migrationMode", "contactMethod", "operator", "offerType", "nip", "date", "businessName", "regon", "postalCode", "city", "street", "houseNumber", "flatNumber", "identifier", "pesel", "idNumber", "identificationNumber", "firstName", "lastName", "countryValidator", "countryNameOrIsocode", "countries", "errors", "country", "find", "isocode", "push"],
    "mappings": "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",
    "sourcesContent": ["import {\n    check,\n    checkAppartment,\n    checkEmail,\n    checkIdentificationNumber,\n    checkIdNumber,\n    checkNIP,\n    checkNonEmptyEmail,\n    checkNotEmpty,\n    checkNotEmptyStandardMessage,\n    checkOnlyLetters,\n    checkPesel,\n    checkPeselAdult,\n    checkPhoneNumber,\n    checkPostCode,\n    checkREGON,\n    checkRequiredFieldMessage,\n    checkSpaceInText,\n    limitTo8Characters,\n    maxLength,\n    minLength,\n    noPolishCharacters,\n    validator\n} from \"eshop/modules/core/validation\";\n\nexport const customerDataFormValidators = {\n    \"firstName\": validator(\n        checkRequiredFieldMessage,\n        check(minLength(2))({level: \"error\", message: \"Wymagane minimum 2 litery.\"}),\n        checkOnlyLetters({level: \"warn\", message: \"Nieprawidłowe imię.\"})\n    ),\n    \"lastName\": validator(\n        checkRequiredFieldMessage,\n        check(minLength(2))({level: \"error\", message: \"Wymagane minimum 2 litery.\"}),\n        checkOnlyLetters({level: \"warn\", message: \"Nieprawidłowe nazwisko.\"})\n    ),\n    \"pesel\": validator(\n        checkRequiredFieldMessage,\n        checkPesel({level: \"warn\", message: \"Nieprawidłowy pesel.\"}),\n        checkPeselAdult({level: \"warn\", message: \"Aby złożyć zamówienie musisz mieć skończone 18 lat.\"})\n    ),\n    \"idNumber\": validator(\n        checkRequiredFieldMessage,\n        checkIdNumber({level: \"warn\", message: \"Nieprawidłowy numer dowodu.\"})\n    ),\n    \"isBusinessClient\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"nip\": validator(\n        checkRequiredFieldMessage,\n        checkNIP({level:\"warn\", message: \"Nieprawidłowy NIP\"})\n    ),\n    \"regon\": validator(\n        checkRequiredFieldMessage,\n        checkREGON({level:\"warn\", message: \"Nieprawidłowy REGON\"})\n    ),\n    \"regonSog\": validator(\n        checkREGON({level:\"warn\", message: \"Nieprawidłowy REGON\"})\n    ),\n    \"companyName\": validator(\n        checkRequiredFieldMessage,\n        check(maxLength(100))({level: \"warn\", message: \"Pole za długie >100 znaków\"})\n    ),\n    \"identificationNumber\": validator(\n        checkRequiredFieldMessage,\n        checkIdentificationNumber({level: \"warn\", message: \"Nieprawidłowy numer dokumentu.\"})\n    ),\n    \"identificationExpirationDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identificationRegistrationDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"registrationDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"legalForm\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"companyStatus\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"gender\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"country\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identification\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"invoiceEmail\": validator(\n        checkNonEmptyEmail({level: \"warn\", message: \"Nieprawidłowy adres email.\"}),\n        noPolishCharacters({level: \"warn\", message: \"Adres email nie może zawierać polskich znaków. \"})\n    )\n};\n\nexport const representativeDataFormValidators = {\n    \"firstName\": validator(\n        checkRequiredFieldMessage,\n        check(minLength(2))({level: \"error\", message: \"Wymagane minimum 2 litery.\"}),\n        checkOnlyLetters({level: \"info\", message: \"Nieprawidłowe imię.\"})\n    ),\n    \"lastName\": validator(\n        checkRequiredFieldMessage,\n        check(minLength(2))({level: \"error\", message: \"Wymagane minimum 2 litery.\"}),\n        checkOnlyLetters({level: \"info\", message: \"Nieprawidłowe nazwisko.\"})\n    ),\n    \"pesel\": validator(\n        checkRequiredFieldMessage,\n        checkPesel({level: \"warn\", message: \"Nieprawidłowy pesel.\"}),\n        checkPeselAdult({level: \"warn\", message: \"Aby złożyć zamówienie musisz mieć skończone 18 lat.\"})\n    ),\n    \"idNumber\": validator(\n        checkRequiredFieldMessage,\n        checkIdNumber({level: \"warn\", message: \"Nieprawidłowy numer dowodu.\"})\n    ),\n    \"identificationNumber\": validator(\n        checkRequiredFieldMessage,\n        checkIdentificationNumber({level: \"warn\", message: \"Nieprawidłowy numer dokumentu.\"})\n    ),\n    \"grantingDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identificationEndDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identificationRegisterDate\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"country\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identification\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"identificationValue\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"foreigner\": validator()\n};\n\nexport const addressFormValidators = {\n    \"postalCode\": validator(\n        checkRequiredFieldMessage,\n        checkPostCode({level: \"warn\", message: \"Nieprawidłowy kod pocztowy.\"})\n    ),\n    \"town\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"streetName\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"streetNumber\": validator(\n        checkRequiredFieldMessage,\n        checkSpaceInText({level: \"error\", message: \"Pole nie może zawierać spacji.\"}),\n        checkAppartment({level: \"error\", message: \"Dopuszczone są znaki specjalne \\\"-\\\" oraz \\\"/\\\". \\n\" +\n            \"Nie mogą wystąpić bezpośrednio po sobie, ani na  początku  lub końcu ciągu znaków. \"}),\n        limitTo8Characters({level: \"error\", message: \"Maksymalna ilość znaków to 8.\"})\n\n    ),\n    \"appartmentNo\": validator(\n        checkSpaceInText({level: \"error\", message: \"Pole nie może zawierać spacji.\"}),\n        checkAppartment({level: \"error\", message: \"Dopuszczone są znaki specjalne \\\"-\\\" oraz \\\"/\\\". \\n\" +\n            \"Nie mogą wystąpić bezpośrednio po sobie, ani na  początku  lub końcu ciągu znaków. \"}),\n        limitTo8Characters({level: \"error\", message: \"Maksymalna ilość znaków to 8.\"})\n    ),\n    \"townId\": validator(\n        checkNotEmpty\n    ),\n    \"streetId\": validator(\n        checkNotEmpty\n     )\n};\n\nexport const billingAccountFormValidators = {\n    \"postalCode\": validator(\n        checkRequiredFieldMessage,\n        checkPostCode({level: \"warn\", message: \"Nieprawidłowy kod pocztowy.\"})\n    ),\n    \"town\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"streetName\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"streetNumber\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"appartmentNo\": validator(\n        checkAppartment({level: \"warn\", message: \"Niepoprawny numer lokalu.\"})\n    ),\n    \"emailAddress\": validator(\n        checkNonEmptyEmail({level: \"warn\", message: \"Nieprawidłowy adres email.\"})\n    )\n};\n\nexport const emailDeliveryValidators = {\n    \"emailAddress\": validator(\n        checkRequiredFieldMessage,\n        checkEmail({level: \"warn\", message: \"Nieprawidłowy adres email.\"}),\n        noPolishCharacters({level: \"warn\", message: \"Adres email nie może zawierać polskich znaków. \"})\n    )\n};\n\nexport const customerContactFormValidators = {\n    \"emailAddress\": validator(\n        checkRequiredFieldMessage,\n        checkEmail({level: \"warn\", message: \"Nieprawidłowy adres email.\"}),\n        noPolishCharacters({level: \"warn\", message: \"Adres email nie może zawierać polskich znaków. \"})\n    ),\n    \"phoneNumber\": validator(\n        checkRequiredFieldMessage,\n        checkPhoneNumber({level: \"warn\", message: \"Nieprawidłowy numer telefonu.\"})\n    ),\n    \"customerNoEmail\": validator(\n        checkRequiredFieldMessage\n    ),\n    \"phoneNumberDAP\": validator(\n        checkRequiredFieldMessage,\n        checkPhoneNumber({level: \"warn\", message: \"Nieprawidłowy numer telefonu.\"})\n    )\n};\n\nexport const courierDeliveryMessageValidator = {\n    courierMessage: validator(check(maxLength(2))({level: \"warn\", message: \"Zbyt długa wiadomość.\"}))\n};\n\nexport const wwtValidator = {\n    \"wwtAddressValidator\": validator(\n        checkSpaceInText({level: \"error\", message: \"Pole nie może zawierać spacji.\"}),\n        checkAppartment({level: \"error\", message: \"Dopuszczone są znaki specjalne \\\"-\\\" oraz \\\"/\\\". \\n\" +\n    \"Nie mogą wystąpić bezpośrednio po sobie, ani na  początku  lub końcu ciągu znaków. \"}),\n        limitTo8Characters({level: \"error\", message: \"Maksymalna ilość znaków to 8.\"})\n\n    )\n};\n\nexport const courierPhoneContactValidator = {\n    \"phoneContact\": validator(\n        checkRequiredFieldMessage,\n        checkPhoneNumber({level: \"warn\", message: \"Nieprawidłowy numer telefonu.\"})\n    ),\n};\n\nexport const customerWorkPhoneNumberValidator = {\n    customerWorkPhoneNumber: validator(checkNotEmptyStandardMessage,checkPhoneNumber({level: \"warn\", message: \"Nieprawidłowy numer telefonu.\"}))\n};\n\nexport const mnpFormValidators = {\n    migrationMode: validator(checkNotEmptyStandardMessage),\n    contactMethod: validator(checkNotEmptyStandardMessage),\n    operator: validator(checkNotEmptyStandardMessage),\n    offerType: validator(checkNotEmptyStandardMessage),\n    nip: validator(checkNotEmptyStandardMessage, checkNIP({level:\"warn\", message: \"Nieprawidłowy NIP\"})),\n    date: validator(checkNotEmptyStandardMessage),\n    businessName: validator(checkNotEmptyStandardMessage),\n    regon: validator(checkNotEmptyStandardMessage, checkREGON({level:\"warn\", message: \"Nieprawidłowy REGON\"})),\n    postalCode: validator(checkNotEmptyStandardMessage, checkPostCode({level: \"warn\", message: \"Nieprawidłowy kod pocztowy.\"})),\n    city: validator(checkNotEmptyStandardMessage),\n    street: validator(checkNotEmptyStandardMessage),\n    houseNumber: validator(checkNotEmptyStandardMessage),\n    flatNumber: validator(checkNotEmptyStandardMessage),\n    identifier: validator(checkNotEmptyStandardMessage),\n    pesel: validator(checkPesel({level: \"warn\", message: \"Nieprawidłowy pesel.\"})),\n    idNumber: validator(checkIdNumber({level: \"warn\", message: \"Nieprawidłowy numer dowodu.\"})),\n    identificationNumber: validator(checkIdentificationNumber({level: \"warn\", message: \"Nieprawidłowy numer dokumentu.\"})),\n    firstName: validator(checkNotEmptyStandardMessage),\n    lastName: validator(checkNotEmptyStandardMessage)\n};\n\nexport const countryValidator = (countryNameOrIsocode, countries) => {\n    var errors = customerDataFormValidators['country'](countryNameOrIsocode);\n    let country = countries.find(country => country.isocode === countryNameOrIsocode);\n    if (!country) {\n        errors.push({level:\"error\", message: \"Niepoprawne obywatelstwo\"})\n    }\n    return errors;\n};\n"],
    "file": "validators.js"
}