{
    "version": 3,
    "sources": ["../../../../../../es6/eshop/modules/checkout/reducers/mnpData.js"],
    "names": ["BUSSINESS_DATA_KEYS", "BUSSINESS_IDS_KEYS", "ADDRESS_KEYS", "data", "state", "action", "type", "CHANGE_CUSTOMER_MNP_DATA_FORM_FIELD", "CHANGE_BUSINESS_MNP_ADDRESS_FORM_FIELD", "map", "el", "idx", "newEntry", "errors", "name", "value", "entryIndex", "defaults", "migrationMode", "offerType", "migrationModes", "filter", "operatorOfferTypeCode", "reduce", "date", "forEach", "k", "identifier", "isHeadquartersAddressSame", "bundleNo", "GET_CART_MNP_DATA_DONE", "sources", "response", "entry", "Object", "getOwnPropertyNames", "key", "SWITCH_SAME_MNP_DATA", "newState", "slice", "item", "index", "postalCode", "agreementType", "businessName", "contactMethod", "email", "flatNumber", "houseNumber", "nip", "operator", "regon", "city", "street", "firstName", "lastName", "pesel", "idNumber", "concat"],
    "mappings": "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",
    "sourcesContent": ["import {\n    CHANGE_CUSTOMER_MNP_DATA_FORM_FIELD,\n    CHANGE_BUSINESS_MNP_ADDRESS_FORM_FIELD,\n    GET_CART_MNP_DATA_DONE,\n    SWITCH_SAME_MNP_DATA\n} from \"../actionTypes\";\n\nconst BUSSINESS_DATA_KEYS = ['nip', 'regon', 'businessName', 'pesel', 'firstName', 'lastName', 'idNumber'];\nconst BUSSINESS_IDS_KEYS = ['nip', 'regon'];\nconst ADDRESS_KEYS = ['postalCode', 'city', 'street', 'houseNumber', 'flatNumber'];\n\nexport const data = (state = [], action) => {\n    switch(action.type) {\n        case CHANGE_CUSTOMER_MNP_DATA_FORM_FIELD:\n        case CHANGE_BUSINESS_MNP_ADDRESS_FORM_FIELD:\n            return state.map((el, idx) => {\n                let newEntry = {...el};\n                if(!newEntry.errors)\n                    newEntry.errors=[];\n                switch (action.name) {\n                    case 'contactMethod':\n                        newEntry[action.name] = action.value;\n                        break;\n                };\n\n                if (action.entryIndex === idx && !!action.defaults) {\n                    if (action.value !== newEntry[action.name]) {\n                        switch (action.name) {\n                            case 'offerType':\n                                if (action.value === '') {\n                                    newEntry.migrationMode = '';\n                                    newEntry.offerType = '';\n                                } else {\n                                    switch (action.value) {\n                                        case 'postpaid':\n                                            newEntry.migrationMode = action.defaults.migrationModes\n                                            .filter(migrationMode => migrationMode.operatorOfferTypeCode === action.value)\n                                            .filter(migrationMode => migrationMode.value === 'EOP')\n                                            .reduce(el => el)\n                                            .value;\n                                            break;\n                                        default:\n                                            newEntry.migrationMode = action.defaults.migrationModes\n                                            .filter(migrationMode => migrationMode.operatorOfferTypeCode === action.value)[0]\n                                            .value;\n                                    }\n                                }\n                                newEntry.errors.migrationMode = [];\n                                newEntry.errors.date = [];\n                                break;\n                            case 'migrationMode':\n                                newEntry.date = '';\n                                newEntry.errors.date = [];\n                                break;\n                            case 'identifier':\n                                BUSSINESS_IDS_KEYS.forEach(k => {\n                                    newEntry[k] = '';\n                                    newEntry.errors[k] = [];\n                                });\n                                break;\n                            case 'agreementType':\n                                BUSSINESS_DATA_KEYS.forEach(k => {\n                                    newEntry[k] = '';\n                                    newEntry.errors[k] = [];\n                                });\n                                newEntry.identifier = 'NIP';\n                                newEntry.isHeadquartersAddressSame = true;\n                                break;\n                            case 'isHeadquartersAddressSame':\n                                ADDRESS_KEYS.forEach(k => {\n                                    newEntry[k] = '';\n                                    newEntry.errors[k] = [];\n                                });;\n                                break;\n                        }\n                    }\n                    newEntry[action.name] = (action.name === 'isHeadquartersAddressSame' ? action.value === true : action.value);\n                    if(!newEntry.errors) {\n                        newEntry.errors = {};\n                    }\n                    newEntry.errors[action.name] = action.errors;\n                } else if(action.entryIndex === el.bundleNo) {\n                    //Validation only - no changes!\n                    if(!newEntry.errors) {\n                        newEntry.errors = {};\n                    }\n                    newEntry.errors[action.name] = action.errors;\n                }\n                return newEntry;\n            });\n        case GET_CART_MNP_DATA_DONE:\n            if (!action.sources.response)\n                return state;\n            return action.sources.response.map((entry) => {\n                entry.errors = {};\n\n                Object.getOwnPropertyNames(action.sources.defaults).forEach(key => {\n                    if (!entry[key]) {\n                        entry[key] = action.sources.defaults[key];\n                    }\n                });\n\n                return entry;\n            });\n        case SWITCH_SAME_MNP_DATA:\n            let newState = state.slice(1).map((item, index) => ({\n                ...item,\n                postalCode: state[0].postalCode,\n                agreementType: state[0].agreementType,\n                businessName: state[0].businessName,\n                contactMethod: state[0].contactMethod,\n                date: state[0].date,\n                email: state[0].email,\n                flatNumber: state[0].flatNumber,\n                houseNumber: state[0].houseNumber,\n                identifier: state[0].identifier,\n                isHeadquartersAddressSame: state[0].isHeadquartersAddressSame,\n                migrationMode: state[0].migrationMode,\n                nip: state[0].nip,\n                offerType: state[0].offerType,\n                operator: state[0].operator,\n                regon: state[0].regon,\n                city: state[0].city,\n                street: state[0].street,\n                firstName: state[0].firstName,\n                lastName: state[0].lastName,\n                pesel: state[0].pesel,\n                idNumber: state[0].idNumber\n            }))\n\n            return state.slice(0,1).concat(newState);\n        default:\n            return state;\n    }\n};\n"],
    "file": "mnpData.js"
}