{
    "version": 3,
    "sources": ["../../../../es6/eshop/utils/ReactUtils.js"],
    "names": ["renamed", "name", "Component", "RenamedComponent", "displayName", "mountElement", "element", "node", "OPL", "UI", "initModules", "mount", "props", "storePath", "UX", "require", "ReactRedux", "store", "Provider"],
    "mappings": ";;;;;;;;;;;;;;;;AAGA,MAAIA,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,WAAI,UAAAC,SAAS,EAAI;AAAA,UACzBC,gBADyB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,QACAD,SADA;;AAI/BC,MAAAA,gBAAgB,CAACC,WAAjB,GAA+BH,IAA/B;AACA,aAAOE,gBAAP;AACH,KANiB;AAAA,GAAlB;;AAQA,WAASE,YAAT,CAAsBC,OAAtB,EAA+BC,IAA/B,EAAqC;AACjC,0BAAOD,OAAP,EAAgBC,IAAhB;AACAC,IAAAA,GAAG,CAACC,EAAJ,CAAOC,WAAP,CAAmBH,IAAnB;AACH;;AAEM,WAASI,KAAT,OAA0D;AAAA,QAA1CJ,IAA0C,QAA1CA,IAA0C;AAAA,QAApCL,SAAoC,QAApCA,SAAoC;AAAA,QAAzBU,KAAyB,QAAzBA,KAAyB;AAAA,QAAlBX,IAAkB,QAAlBA,IAAkB;AAAA,QAAZY,SAAY,QAAZA,SAAY;;AAC7D,QAAI,CAACA,SAAL,EAAgB;AACZR,MAAAA,YAAY,CAAC,0BAAcH,SAAd,EAAyBU,KAAzB,CAAD,EAAkCL,IAAlC,CAAZ;AACH,KAFD,MAEO;AACH;AACAO,MAAAA,EAAE,CAACC,OAAH,CAAW,CAAC,aAAD,EAAgBF,SAAhB,CAAX,EAAuC,UAAUG,UAAV,EAAsBC,KAAtB,EAA6B;AAChEZ,QAAAA,YAAY,CACR,0BACIL,OAAO,CAACC,IAAI,uBAAgBC,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACD,IAAnD,MAAL,CAAP,CAAwEe,UAAU,CAACE,QAAnF,CADJ,EACkG;AAACD,UAAAA,KAAK,EAALA;AAAD,SADlG,EAEI,0BAAcf,SAAd,oBAA6BU,KAA7B,EAFJ,CADQ,EAILL,IAJK,CAAZ;AAKH,OAND;AAOH;AACJ",
    "sourcesContent": ["import {createElement} from \"react\";\nimport {render} from \"react-dom\";\n\nlet renamed = name => Component => {\n    class RenamedComponent extends Component {\n    }\n\n    RenamedComponent.displayName = name;\n    return RenamedComponent;\n};\n\nfunction mountElement(element, node) {\n    render(element, node);\n    OPL.UI.initModules(node);\n}\n\nexport function mount({node, Component, props, name, storePath}) {\n    if (!storePath) {\n        mountElement(createElement(Component, props), node);\n    } else {\n        // another require, so that we can dynamically get redux and store only for redux-connected components\n        UX.require([\"react-redux\", storePath], function (ReactRedux, store) {\n            mountElement(\n                createElement(\n                    renamed(name || `Provider(${Component.displayName || Component.name})`)(ReactRedux.Provider), {store},\n                    createElement(Component, {...props})\n                ), node);\n        });\n    }\n}\n\n"],
    "file": "ReactUtils.js"
}